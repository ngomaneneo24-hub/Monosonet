// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/video_types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2fvideo_5ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2fvideo_5ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2fvideo_5ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2fvideo_5ftypes_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2fvideo_5ftypes_2eproto;
namespace sonet {
namespace common {
class DeviceView;
struct DeviceViewDefaultTypeInternal;
extern DeviceViewDefaultTypeInternal _DeviceView_default_instance_;
class EngagementMetrics;
struct EngagementMetricsDefaultTypeInternal;
extern EngagementMetricsDefaultTypeInternal _EngagementMetrics_default_instance_;
class GeographicView;
struct GeographicViewDefaultTypeInternal;
extern GeographicViewDefaultTypeInternal _GeographicView_default_instance_;
class TimeView;
struct TimeViewDefaultTypeInternal;
extern TimeViewDefaultTypeInternal _TimeView_default_instance_;
class VideoAnalytics;
struct VideoAnalyticsDefaultTypeInternal;
extern VideoAnalyticsDefaultTypeInternal _VideoAnalytics_default_instance_;
class VideoBatchRequest;
struct VideoBatchRequestDefaultTypeInternal;
extern VideoBatchRequestDefaultTypeInternal _VideoBatchRequest_default_instance_;
class VideoBatchRequest_ParametersEntry_DoNotUse;
struct VideoBatchRequest_ParametersEntry_DoNotUseDefaultTypeInternal;
extern VideoBatchRequest_ParametersEntry_DoNotUseDefaultTypeInternal _VideoBatchRequest_ParametersEntry_DoNotUse_default_instance_;
class VideoBatchResponse;
struct VideoBatchResponseDefaultTypeInternal;
extern VideoBatchResponseDefaultTypeInternal _VideoBatchResponse_default_instance_;
class VideoBatchResponse_ResultsEntry_DoNotUse;
struct VideoBatchResponse_ResultsEntry_DoNotUseDefaultTypeInternal;
extern VideoBatchResponse_ResultsEntry_DoNotUseDefaultTypeInternal _VideoBatchResponse_ResultsEntry_DoNotUse_default_instance_;
class VideoCandidate;
struct VideoCandidateDefaultTypeInternal;
extern VideoCandidateDefaultTypeInternal _VideoCandidate_default_instance_;
class VideoFeatures;
struct VideoFeaturesDefaultTypeInternal;
extern VideoFeaturesDefaultTypeInternal _VideoFeatures_default_instance_;
class VideoMetadata;
struct VideoMetadataDefaultTypeInternal;
extern VideoMetadataDefaultTypeInternal _VideoMetadata_default_instance_;
class VideoProcessingStatus;
struct VideoProcessingStatusDefaultTypeInternal;
extern VideoProcessingStatusDefaultTypeInternal _VideoProcessingStatus_default_instance_;
class VideoQueryParams;
struct VideoQueryParamsDefaultTypeInternal;
extern VideoQueryParamsDefaultTypeInternal _VideoQueryParams_default_instance_;
class VideoRecommendation;
struct VideoRecommendationDefaultTypeInternal;
extern VideoRecommendationDefaultTypeInternal _VideoRecommendation_default_instance_;
class VideoSearchResult;
struct VideoSearchResultDefaultTypeInternal;
extern VideoSearchResultDefaultTypeInternal _VideoSearchResult_default_instance_;
class VideoUploadMetadata;
struct VideoUploadMetadataDefaultTypeInternal;
extern VideoUploadMetadataDefaultTypeInternal _VideoUploadMetadata_default_instance_;
class VideoUploadRequest;
struct VideoUploadRequestDefaultTypeInternal;
extern VideoUploadRequestDefaultTypeInternal _VideoUploadRequest_default_instance_;
class VideoUploadResponse;
struct VideoUploadResponseDefaultTypeInternal;
extern VideoUploadResponseDefaultTypeInternal _VideoUploadResponse_default_instance_;
}  // namespace common
}  // namespace sonet
PROTOBUF_NAMESPACE_OPEN
template<> ::sonet::common::DeviceView* Arena::CreateMaybeMessage<::sonet::common::DeviceView>(Arena*);
template<> ::sonet::common::EngagementMetrics* Arena::CreateMaybeMessage<::sonet::common::EngagementMetrics>(Arena*);
template<> ::sonet::common::GeographicView* Arena::CreateMaybeMessage<::sonet::common::GeographicView>(Arena*);
template<> ::sonet::common::TimeView* Arena::CreateMaybeMessage<::sonet::common::TimeView>(Arena*);
template<> ::sonet::common::VideoAnalytics* Arena::CreateMaybeMessage<::sonet::common::VideoAnalytics>(Arena*);
template<> ::sonet::common::VideoBatchRequest* Arena::CreateMaybeMessage<::sonet::common::VideoBatchRequest>(Arena*);
template<> ::sonet::common::VideoBatchRequest_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage<::sonet::common::VideoBatchRequest_ParametersEntry_DoNotUse>(Arena*);
template<> ::sonet::common::VideoBatchResponse* Arena::CreateMaybeMessage<::sonet::common::VideoBatchResponse>(Arena*);
template<> ::sonet::common::VideoBatchResponse_ResultsEntry_DoNotUse* Arena::CreateMaybeMessage<::sonet::common::VideoBatchResponse_ResultsEntry_DoNotUse>(Arena*);
template<> ::sonet::common::VideoCandidate* Arena::CreateMaybeMessage<::sonet::common::VideoCandidate>(Arena*);
template<> ::sonet::common::VideoFeatures* Arena::CreateMaybeMessage<::sonet::common::VideoFeatures>(Arena*);
template<> ::sonet::common::VideoMetadata* Arena::CreateMaybeMessage<::sonet::common::VideoMetadata>(Arena*);
template<> ::sonet::common::VideoProcessingStatus* Arena::CreateMaybeMessage<::sonet::common::VideoProcessingStatus>(Arena*);
template<> ::sonet::common::VideoQueryParams* Arena::CreateMaybeMessage<::sonet::common::VideoQueryParams>(Arena*);
template<> ::sonet::common::VideoRecommendation* Arena::CreateMaybeMessage<::sonet::common::VideoRecommendation>(Arena*);
template<> ::sonet::common::VideoSearchResult* Arena::CreateMaybeMessage<::sonet::common::VideoSearchResult>(Arena*);
template<> ::sonet::common::VideoUploadMetadata* Arena::CreateMaybeMessage<::sonet::common::VideoUploadMetadata>(Arena*);
template<> ::sonet::common::VideoUploadRequest* Arena::CreateMaybeMessage<::sonet::common::VideoUploadRequest>(Arena*);
template<> ::sonet::common::VideoUploadResponse* Arena::CreateMaybeMessage<::sonet::common::VideoUploadResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sonet {
namespace common {

// ===================================================================

class VideoCandidate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.common.VideoCandidate) */ {
 public:
  inline VideoCandidate() : VideoCandidate(nullptr) {}
  ~VideoCandidate() override;
  explicit PROTOBUF_CONSTEXPR VideoCandidate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoCandidate(const VideoCandidate& from);
  VideoCandidate(VideoCandidate&& from) noexcept
    : VideoCandidate() {
    *this = ::std::move(from);
  }

  inline VideoCandidate& operator=(const VideoCandidate& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoCandidate& operator=(VideoCandidate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoCandidate& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoCandidate* internal_default_instance() {
    return reinterpret_cast<const VideoCandidate*>(
               &_VideoCandidate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VideoCandidate& a, VideoCandidate& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoCandidate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoCandidate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoCandidate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoCandidate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoCandidate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VideoCandidate& from) {
    VideoCandidate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoCandidate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.common.VideoCandidate";
  }
  protected:
  explicit VideoCandidate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 5,
    kIdFieldNumber = 1,
    kTitleFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kCategoryFieldNumber = 4,
    kLanguageFieldNumber = 6,
    kCreatorIdFieldNumber = 8,
    kCreatorUsernameFieldNumber = 9,
    kCreatorDisplayNameFieldNumber = 10,
    kCreatorAvatarUrlFieldNumber = 11,
    kCreatedAtFieldNumber = 14,
    kUpdatedAtFieldNumber = 15,
    kCursorFieldNumber = 16,
    kVideoFieldNumber = 7,
    kEngagementFieldNumber = 12,
    kFeaturesFieldNumber = 13,
  };
  // repeated string tags = 5;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string category = 4;
  void clear_category();
  const std::string& category() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_category(ArgT0&& arg0, ArgT... args);
  std::string* mutable_category();
  PROTOBUF_NODISCARD std::string* release_category();
  void set_allocated_category(std::string* category);
  private:
  const std::string& _internal_category() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_category(const std::string& value);
  std::string* _internal_mutable_category();
  public:

  // string language = 6;
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // string creator_id = 8;
  void clear_creator_id();
  const std::string& creator_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creator_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creator_id();
  PROTOBUF_NODISCARD std::string* release_creator_id();
  void set_allocated_creator_id(std::string* creator_id);
  private:
  const std::string& _internal_creator_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator_id(const std::string& value);
  std::string* _internal_mutable_creator_id();
  public:

  // string creator_username = 9;
  void clear_creator_username();
  const std::string& creator_username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creator_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creator_username();
  PROTOBUF_NODISCARD std::string* release_creator_username();
  void set_allocated_creator_username(std::string* creator_username);
  private:
  const std::string& _internal_creator_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator_username(const std::string& value);
  std::string* _internal_mutable_creator_username();
  public:

  // string creator_display_name = 10;
  void clear_creator_display_name();
  const std::string& creator_display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creator_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creator_display_name();
  PROTOBUF_NODISCARD std::string* release_creator_display_name();
  void set_allocated_creator_display_name(std::string* creator_display_name);
  private:
  const std::string& _internal_creator_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator_display_name(const std::string& value);
  std::string* _internal_mutable_creator_display_name();
  public:

  // string creator_avatar_url = 11;
  void clear_creator_avatar_url();
  const std::string& creator_avatar_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creator_avatar_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creator_avatar_url();
  PROTOBUF_NODISCARD std::string* release_creator_avatar_url();
  void set_allocated_creator_avatar_url(std::string* creator_avatar_url);
  private:
  const std::string& _internal_creator_avatar_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator_avatar_url(const std::string& value);
  std::string* _internal_mutable_creator_avatar_url();
  public:

  // string created_at = 14;
  void clear_created_at();
  const std::string& created_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_created_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_created_at();
  PROTOBUF_NODISCARD std::string* release_created_at();
  void set_allocated_created_at(std::string* created_at);
  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(const std::string& value);
  std::string* _internal_mutable_created_at();
  public:

  // string updated_at = 15;
  void clear_updated_at();
  const std::string& updated_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_updated_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_updated_at();
  PROTOBUF_NODISCARD std::string* release_updated_at();
  void set_allocated_updated_at(std::string* updated_at);
  private:
  const std::string& _internal_updated_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updated_at(const std::string& value);
  std::string* _internal_mutable_updated_at();
  public:

  // string cursor = 16;
  void clear_cursor();
  const std::string& cursor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cursor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cursor();
  PROTOBUF_NODISCARD std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // .sonet.common.VideoMetadata video = 7;
  bool has_video() const;
  private:
  bool _internal_has_video() const;
  public:
  void clear_video();
  const ::sonet::common::VideoMetadata& video() const;
  PROTOBUF_NODISCARD ::sonet::common::VideoMetadata* release_video();
  ::sonet::common::VideoMetadata* mutable_video();
  void set_allocated_video(::sonet::common::VideoMetadata* video);
  private:
  const ::sonet::common::VideoMetadata& _internal_video() const;
  ::sonet::common::VideoMetadata* _internal_mutable_video();
  public:
  void unsafe_arena_set_allocated_video(
      ::sonet::common::VideoMetadata* video);
  ::sonet::common::VideoMetadata* unsafe_arena_release_video();

  // .sonet.common.EngagementMetrics engagement = 12;
  bool has_engagement() const;
  private:
  bool _internal_has_engagement() const;
  public:
  void clear_engagement();
  const ::sonet::common::EngagementMetrics& engagement() const;
  PROTOBUF_NODISCARD ::sonet::common::EngagementMetrics* release_engagement();
  ::sonet::common::EngagementMetrics* mutable_engagement();
  void set_allocated_engagement(::sonet::common::EngagementMetrics* engagement);
  private:
  const ::sonet::common::EngagementMetrics& _internal_engagement() const;
  ::sonet::common::EngagementMetrics* _internal_mutable_engagement();
  public:
  void unsafe_arena_set_allocated_engagement(
      ::sonet::common::EngagementMetrics* engagement);
  ::sonet::common::EngagementMetrics* unsafe_arena_release_engagement();

  // .sonet.common.VideoFeatures features = 13;
  bool has_features() const;
  private:
  bool _internal_has_features() const;
  public:
  void clear_features();
  const ::sonet::common::VideoFeatures& features() const;
  PROTOBUF_NODISCARD ::sonet::common::VideoFeatures* release_features();
  ::sonet::common::VideoFeatures* mutable_features();
  void set_allocated_features(::sonet::common::VideoFeatures* features);
  private:
  const ::sonet::common::VideoFeatures& _internal_features() const;
  ::sonet::common::VideoFeatures* _internal_mutable_features();
  public:
  void unsafe_arena_set_allocated_features(
      ::sonet::common::VideoFeatures* features);
  ::sonet::common::VideoFeatures* unsafe_arena_release_features();

  // @@protoc_insertion_point(class_scope:sonet.common.VideoCandidate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_display_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_avatar_url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_at_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updated_at_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
    ::sonet::common::VideoMetadata* video_;
    ::sonet::common::EngagementMetrics* engagement_;
    ::sonet::common::VideoFeatures* features_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fvideo_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class VideoMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.common.VideoMetadata) */ {
 public:
  inline VideoMetadata() : VideoMetadata(nullptr) {}
  ~VideoMetadata() override;
  explicit PROTOBUF_CONSTEXPR VideoMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoMetadata(const VideoMetadata& from);
  VideoMetadata(VideoMetadata&& from) noexcept
    : VideoMetadata() {
    *this = ::std::move(from);
  }

  inline VideoMetadata& operator=(const VideoMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoMetadata& operator=(VideoMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoMetadata* internal_default_instance() {
    return reinterpret_cast<const VideoMetadata*>(
               &_VideoMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VideoMetadata& a, VideoMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VideoMetadata& from) {
    VideoMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.common.VideoMetadata";
  }
  protected:
  explicit VideoMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQualityFieldNumber = 2,
    kThumbnailUrlFieldNumber = 3,
    kPlaybackUrlFieldNumber = 4,
    kResolutionFieldNumber = 5,
    kAspectRatioFieldNumber = 6,
    kEncodingFieldNumber = 8,
    kDurationMsFieldNumber = 1,
    kBitrateKbpsFieldNumber = 9,
    kFileSizeBytesFieldNumber = 7,
    kFrameRateFieldNumber = 10,
  };
  // string quality = 2;
  void clear_quality();
  const std::string& quality() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_quality(ArgT0&& arg0, ArgT... args);
  std::string* mutable_quality();
  PROTOBUF_NODISCARD std::string* release_quality();
  void set_allocated_quality(std::string* quality);
  private:
  const std::string& _internal_quality() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quality(const std::string& value);
  std::string* _internal_mutable_quality();
  public:

  // string thumbnail_url = 3;
  void clear_thumbnail_url();
  const std::string& thumbnail_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_thumbnail_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_thumbnail_url();
  PROTOBUF_NODISCARD std::string* release_thumbnail_url();
  void set_allocated_thumbnail_url(std::string* thumbnail_url);
  private:
  const std::string& _internal_thumbnail_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_thumbnail_url(const std::string& value);
  std::string* _internal_mutable_thumbnail_url();
  public:

  // string playback_url = 4;
  void clear_playback_url();
  const std::string& playback_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playback_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playback_url();
  PROTOBUF_NODISCARD std::string* release_playback_url();
  void set_allocated_playback_url(std::string* playback_url);
  private:
  const std::string& _internal_playback_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playback_url(const std::string& value);
  std::string* _internal_mutable_playback_url();
  public:

  // string resolution = 5;
  void clear_resolution();
  const std::string& resolution() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resolution(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resolution();
  PROTOBUF_NODISCARD std::string* release_resolution();
  void set_allocated_resolution(std::string* resolution);
  private:
  const std::string& _internal_resolution() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resolution(const std::string& value);
  std::string* _internal_mutable_resolution();
  public:

  // string aspect_ratio = 6;
  void clear_aspect_ratio();
  const std::string& aspect_ratio() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_aspect_ratio(ArgT0&& arg0, ArgT... args);
  std::string* mutable_aspect_ratio();
  PROTOBUF_NODISCARD std::string* release_aspect_ratio();
  void set_allocated_aspect_ratio(std::string* aspect_ratio);
  private:
  const std::string& _internal_aspect_ratio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_aspect_ratio(const std::string& value);
  std::string* _internal_mutable_aspect_ratio();
  public:

  // string encoding = 8;
  void clear_encoding();
  const std::string& encoding() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encoding(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encoding();
  PROTOBUF_NODISCARD std::string* release_encoding();
  void set_allocated_encoding(std::string* encoding);
  private:
  const std::string& _internal_encoding() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encoding(const std::string& value);
  std::string* _internal_mutable_encoding();
  public:

  // uint32 duration_ms = 1;
  void clear_duration_ms();
  uint32_t duration_ms() const;
  void set_duration_ms(uint32_t value);
  private:
  uint32_t _internal_duration_ms() const;
  void _internal_set_duration_ms(uint32_t value);
  public:

  // uint32 bitrate_kbps = 9;
  void clear_bitrate_kbps();
  uint32_t bitrate_kbps() const;
  void set_bitrate_kbps(uint32_t value);
  private:
  uint32_t _internal_bitrate_kbps() const;
  void _internal_set_bitrate_kbps(uint32_t value);
  public:

  // uint64 file_size_bytes = 7;
  void clear_file_size_bytes();
  uint64_t file_size_bytes() const;
  void set_file_size_bytes(uint64_t value);
  private:
  uint64_t _internal_file_size_bytes() const;
  void _internal_set_file_size_bytes(uint64_t value);
  public:

  // uint32 frame_rate = 10;
  void clear_frame_rate();
  uint32_t frame_rate() const;
  void set_frame_rate(uint32_t value);
  private:
  uint32_t _internal_frame_rate() const;
  void _internal_set_frame_rate(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.common.VideoMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quality_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thumbnail_url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playback_url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resolution_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aspect_ratio_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoding_;
    uint32_t duration_ms_;
    uint32_t bitrate_kbps_;
    uint64_t file_size_bytes_;
    uint32_t frame_rate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fvideo_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class VideoFeatures final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.common.VideoFeatures) */ {
 public:
  inline VideoFeatures() : VideoFeatures(nullptr) {}
  ~VideoFeatures() override;
  explicit PROTOBUF_CONSTEXPR VideoFeatures(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoFeatures(const VideoFeatures& from);
  VideoFeatures(VideoFeatures&& from) noexcept
    : VideoFeatures() {
    *this = ::std::move(from);
  }

  inline VideoFeatures& operator=(const VideoFeatures& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoFeatures& operator=(VideoFeatures&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoFeatures& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoFeatures* internal_default_instance() {
    return reinterpret_cast<const VideoFeatures*>(
               &_VideoFeatures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VideoFeatures& a, VideoFeatures& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoFeatures* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoFeatures* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoFeatures* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoFeatures>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoFeatures& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VideoFeatures& from) {
    VideoFeatures::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoFeatures* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.common.VideoFeatures";
  }
  protected:
  explicit VideoFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrightnessFieldNumber = 1,
    kContrastFieldNumber = 2,
    kSaturationFieldNumber = 3,
    kMotionIntensityFieldNumber = 4,
    kSceneComplexityFieldNumber = 5,
    kAudioQualityFieldNumber = 6,
    kSpeechClarityFieldNumber = 8,
    kColorVibrancyFieldNumber = 9,
    kVisualAppealFieldNumber = 10,
    kBackgroundMusicFieldNumber = 7,
  };
  // double brightness = 1;
  void clear_brightness();
  double brightness() const;
  void set_brightness(double value);
  private:
  double _internal_brightness() const;
  void _internal_set_brightness(double value);
  public:

  // double contrast = 2;
  void clear_contrast();
  double contrast() const;
  void set_contrast(double value);
  private:
  double _internal_contrast() const;
  void _internal_set_contrast(double value);
  public:

  // double saturation = 3;
  void clear_saturation();
  double saturation() const;
  void set_saturation(double value);
  private:
  double _internal_saturation() const;
  void _internal_set_saturation(double value);
  public:

  // double motion_intensity = 4;
  void clear_motion_intensity();
  double motion_intensity() const;
  void set_motion_intensity(double value);
  private:
  double _internal_motion_intensity() const;
  void _internal_set_motion_intensity(double value);
  public:

  // double scene_complexity = 5;
  void clear_scene_complexity();
  double scene_complexity() const;
  void set_scene_complexity(double value);
  private:
  double _internal_scene_complexity() const;
  void _internal_set_scene_complexity(double value);
  public:

  // double audio_quality = 6;
  void clear_audio_quality();
  double audio_quality() const;
  void set_audio_quality(double value);
  private:
  double _internal_audio_quality() const;
  void _internal_set_audio_quality(double value);
  public:

  // double speech_clarity = 8;
  void clear_speech_clarity();
  double speech_clarity() const;
  void set_speech_clarity(double value);
  private:
  double _internal_speech_clarity() const;
  void _internal_set_speech_clarity(double value);
  public:

  // double color_vibrancy = 9;
  void clear_color_vibrancy();
  double color_vibrancy() const;
  void set_color_vibrancy(double value);
  private:
  double _internal_color_vibrancy() const;
  void _internal_set_color_vibrancy(double value);
  public:

  // double visual_appeal = 10;
  void clear_visual_appeal();
  double visual_appeal() const;
  void set_visual_appeal(double value);
  private:
  double _internal_visual_appeal() const;
  void _internal_set_visual_appeal(double value);
  public:

  // bool background_music = 7;
  void clear_background_music();
  bool background_music() const;
  void set_background_music(bool value);
  private:
  bool _internal_background_music() const;
  void _internal_set_background_music(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.common.VideoFeatures)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double brightness_;
    double contrast_;
    double saturation_;
    double motion_intensity_;
    double scene_complexity_;
    double audio_quality_;
    double speech_clarity_;
    double color_vibrancy_;
    double visual_appeal_;
    bool background_music_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fvideo_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class EngagementMetrics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.common.EngagementMetrics) */ {
 public:
  inline EngagementMetrics() : EngagementMetrics(nullptr) {}
  ~EngagementMetrics() override;
  explicit PROTOBUF_CONSTEXPR EngagementMetrics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EngagementMetrics(const EngagementMetrics& from);
  EngagementMetrics(EngagementMetrics&& from) noexcept
    : EngagementMetrics() {
    *this = ::std::move(from);
  }

  inline EngagementMetrics& operator=(const EngagementMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline EngagementMetrics& operator=(EngagementMetrics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EngagementMetrics& default_instance() {
    return *internal_default_instance();
  }
  static inline const EngagementMetrics* internal_default_instance() {
    return reinterpret_cast<const EngagementMetrics*>(
               &_EngagementMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EngagementMetrics& a, EngagementMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(EngagementMetrics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EngagementMetrics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EngagementMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EngagementMetrics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EngagementMetrics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EngagementMetrics& from) {
    EngagementMetrics::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EngagementMetrics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.common.EngagementMetrics";
  }
  protected:
  explicit EngagementMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewCountFieldNumber = 1,
    kUniqueViewersFieldNumber = 2,
    kLikeCountFieldNumber = 3,
    kRenoteCountFieldNumber = 4,
    kReplyCountFieldNumber = 5,
    kShareCountFieldNumber = 6,
    kAverageWatchTimeMsFieldNumber = 8,
    kCompletionRateFieldNumber = 9,
    kSkipRateFieldNumber = 10,
    kEngagementScoreFieldNumber = 11,
    kViralScoreFieldNumber = 12,
    kRetentionScoreFieldNumber = 13,
    kBookmarkCountFieldNumber = 7,
  };
  // uint32 view_count = 1;
  void clear_view_count();
  uint32_t view_count() const;
  void set_view_count(uint32_t value);
  private:
  uint32_t _internal_view_count() const;
  void _internal_set_view_count(uint32_t value);
  public:

  // uint32 unique_viewers = 2;
  void clear_unique_viewers();
  uint32_t unique_viewers() const;
  void set_unique_viewers(uint32_t value);
  private:
  uint32_t _internal_unique_viewers() const;
  void _internal_set_unique_viewers(uint32_t value);
  public:

  // uint32 like_count = 3;
  void clear_like_count();
  uint32_t like_count() const;
  void set_like_count(uint32_t value);
  private:
  uint32_t _internal_like_count() const;
  void _internal_set_like_count(uint32_t value);
  public:

  // uint32 renote_count = 4;
  void clear_renote_count();
  uint32_t renote_count() const;
  void set_renote_count(uint32_t value);
  private:
  uint32_t _internal_renote_count() const;
  void _internal_set_renote_count(uint32_t value);
  public:

  // uint32 reply_count = 5;
  void clear_reply_count();
  uint32_t reply_count() const;
  void set_reply_count(uint32_t value);
  private:
  uint32_t _internal_reply_count() const;
  void _internal_set_reply_count(uint32_t value);
  public:

  // uint32 share_count = 6;
  void clear_share_count();
  uint32_t share_count() const;
  void set_share_count(uint32_t value);
  private:
  uint32_t _internal_share_count() const;
  void _internal_set_share_count(uint32_t value);
  public:

  // double average_watch_time_ms = 8;
  void clear_average_watch_time_ms();
  double average_watch_time_ms() const;
  void set_average_watch_time_ms(double value);
  private:
  double _internal_average_watch_time_ms() const;
  void _internal_set_average_watch_time_ms(double value);
  public:

  // double completion_rate = 9;
  void clear_completion_rate();
  double completion_rate() const;
  void set_completion_rate(double value);
  private:
  double _internal_completion_rate() const;
  void _internal_set_completion_rate(double value);
  public:

  // double skip_rate = 10;
  void clear_skip_rate();
  double skip_rate() const;
  void set_skip_rate(double value);
  private:
  double _internal_skip_rate() const;
  void _internal_set_skip_rate(double value);
  public:

  // double engagement_score = 11;
  void clear_engagement_score();
  double engagement_score() const;
  void set_engagement_score(double value);
  private:
  double _internal_engagement_score() const;
  void _internal_set_engagement_score(double value);
  public:

  // double viral_score = 12;
  void clear_viral_score();
  double viral_score() const;
  void set_viral_score(double value);
  private:
  double _internal_viral_score() const;
  void _internal_set_viral_score(double value);
  public:

  // double retention_score = 13;
  void clear_retention_score();
  double retention_score() const;
  void set_retention_score(double value);
  private:
  double _internal_retention_score() const;
  void _internal_set_retention_score(double value);
  public:

  // uint32 bookmark_count = 7;
  void clear_bookmark_count();
  uint32_t bookmark_count() const;
  void set_bookmark_count(uint32_t value);
  private:
  uint32_t _internal_bookmark_count() const;
  void _internal_set_bookmark_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.common.EngagementMetrics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t view_count_;
    uint32_t unique_viewers_;
    uint32_t like_count_;
    uint32_t renote_count_;
    uint32_t reply_count_;
    uint32_t share_count_;
    double average_watch_time_ms_;
    double completion_rate_;
    double skip_rate_;
    double engagement_score_;
    double viral_score_;
    double retention_score_;
    uint32_t bookmark_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fvideo_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class VideoQueryParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.common.VideoQueryParams) */ {
 public:
  inline VideoQueryParams() : VideoQueryParams(nullptr) {}
  ~VideoQueryParams() override;
  explicit PROTOBUF_CONSTEXPR VideoQueryParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoQueryParams(const VideoQueryParams& from);
  VideoQueryParams(VideoQueryParams&& from) noexcept
    : VideoQueryParams() {
    *this = ::std::move(from);
  }

  inline VideoQueryParams& operator=(const VideoQueryParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoQueryParams& operator=(VideoQueryParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoQueryParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoQueryParams* internal_default_instance() {
    return reinterpret_cast<const VideoQueryParams*>(
               &_VideoQueryParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VideoQueryParams& a, VideoQueryParams& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoQueryParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoQueryParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoQueryParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoQueryParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoQueryParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VideoQueryParams& from) {
    VideoQueryParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoQueryParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.common.VideoQueryParams";
  }
  protected:
  explicit VideoQueryParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoriesFieldNumber = 4,
    kExcludeCategoriesFieldNumber = 5,
    kTagsFieldNumber = 6,
    kExcludeTagsFieldNumber = 7,
    kCursorFieldNumber = 3,
    kQualityPreferenceFieldNumber = 10,
    kCreatorIdFieldNumber = 11,
    kTimeWindowFieldNumber = 12,
    kSortByFieldNumber = 13,
    kSortOrderFieldNumber = 14,
    kLimitFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kMinDurationMsFieldNumber = 8,
    kMaxDurationMsFieldNumber = 9,
  };
  // repeated string categories = 4;
  int categories_size() const;
  private:
  int _internal_categories_size() const;
  public:
  void clear_categories();
  const std::string& categories(int index) const;
  std::string* mutable_categories(int index);
  void set_categories(int index, const std::string& value);
  void set_categories(int index, std::string&& value);
  void set_categories(int index, const char* value);
  void set_categories(int index, const char* value, size_t size);
  std::string* add_categories();
  void add_categories(const std::string& value);
  void add_categories(std::string&& value);
  void add_categories(const char* value);
  void add_categories(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& categories() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_categories();
  private:
  const std::string& _internal_categories(int index) const;
  std::string* _internal_add_categories();
  public:

  // repeated string exclude_categories = 5;
  int exclude_categories_size() const;
  private:
  int _internal_exclude_categories_size() const;
  public:
  void clear_exclude_categories();
  const std::string& exclude_categories(int index) const;
  std::string* mutable_exclude_categories(int index);
  void set_exclude_categories(int index, const std::string& value);
  void set_exclude_categories(int index, std::string&& value);
  void set_exclude_categories(int index, const char* value);
  void set_exclude_categories(int index, const char* value, size_t size);
  std::string* add_exclude_categories();
  void add_exclude_categories(const std::string& value);
  void add_exclude_categories(std::string&& value);
  void add_exclude_categories(const char* value);
  void add_exclude_categories(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& exclude_categories() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_exclude_categories();
  private:
  const std::string& _internal_exclude_categories(int index) const;
  std::string* _internal_add_exclude_categories();
  public:

  // repeated string tags = 6;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // repeated string exclude_tags = 7;
  int exclude_tags_size() const;
  private:
  int _internal_exclude_tags_size() const;
  public:
  void clear_exclude_tags();
  const std::string& exclude_tags(int index) const;
  std::string* mutable_exclude_tags(int index);
  void set_exclude_tags(int index, const std::string& value);
  void set_exclude_tags(int index, std::string&& value);
  void set_exclude_tags(int index, const char* value);
  void set_exclude_tags(int index, const char* value, size_t size);
  std::string* add_exclude_tags();
  void add_exclude_tags(const std::string& value);
  void add_exclude_tags(std::string&& value);
  void add_exclude_tags(const char* value);
  void add_exclude_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& exclude_tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_exclude_tags();
  private:
  const std::string& _internal_exclude_tags(int index) const;
  std::string* _internal_add_exclude_tags();
  public:

  // string cursor = 3;
  void clear_cursor();
  const std::string& cursor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cursor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cursor();
  PROTOBUF_NODISCARD std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // string quality_preference = 10;
  void clear_quality_preference();
  const std::string& quality_preference() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_quality_preference(ArgT0&& arg0, ArgT... args);
  std::string* mutable_quality_preference();
  PROTOBUF_NODISCARD std::string* release_quality_preference();
  void set_allocated_quality_preference(std::string* quality_preference);
  private:
  const std::string& _internal_quality_preference() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quality_preference(const std::string& value);
  std::string* _internal_mutable_quality_preference();
  public:

  // string creator_id = 11;
  void clear_creator_id();
  const std::string& creator_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creator_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creator_id();
  PROTOBUF_NODISCARD std::string* release_creator_id();
  void set_allocated_creator_id(std::string* creator_id);
  private:
  const std::string& _internal_creator_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator_id(const std::string& value);
  std::string* _internal_mutable_creator_id();
  public:

  // string time_window = 12;
  void clear_time_window();
  const std::string& time_window() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time_window(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time_window();
  PROTOBUF_NODISCARD std::string* release_time_window();
  void set_allocated_time_window(std::string* time_window);
  private:
  const std::string& _internal_time_window() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_window(const std::string& value);
  std::string* _internal_mutable_time_window();
  public:

  // string sort_by = 13;
  void clear_sort_by();
  const std::string& sort_by() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sort_by(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sort_by();
  PROTOBUF_NODISCARD std::string* release_sort_by();
  void set_allocated_sort_by(std::string* sort_by);
  private:
  const std::string& _internal_sort_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sort_by(const std::string& value);
  std::string* _internal_mutable_sort_by();
  public:

  // string sort_order = 14;
  void clear_sort_order();
  const std::string& sort_order() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sort_order(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sort_order();
  PROTOBUF_NODISCARD std::string* release_sort_order();
  void set_allocated_sort_order(std::string* sort_order);
  private:
  const std::string& _internal_sort_order() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sort_order(const std::string& value);
  std::string* _internal_mutable_sort_order();
  public:

  // uint32 limit = 1;
  void clear_limit();
  uint32_t limit() const;
  void set_limit(uint32_t value);
  private:
  uint32_t _internal_limit() const;
  void _internal_set_limit(uint32_t value);
  public:

  // uint32 offset = 2;
  void clear_offset();
  uint32_t offset() const;
  void set_offset(uint32_t value);
  private:
  uint32_t _internal_offset() const;
  void _internal_set_offset(uint32_t value);
  public:

  // uint32 min_duration_ms = 8;
  void clear_min_duration_ms();
  uint32_t min_duration_ms() const;
  void set_min_duration_ms(uint32_t value);
  private:
  uint32_t _internal_min_duration_ms() const;
  void _internal_set_min_duration_ms(uint32_t value);
  public:

  // uint32 max_duration_ms = 9;
  void clear_max_duration_ms();
  uint32_t max_duration_ms() const;
  void set_max_duration_ms(uint32_t value);
  private:
  uint32_t _internal_max_duration_ms() const;
  void _internal_set_max_duration_ms(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.common.VideoQueryParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> categories_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> exclude_categories_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> exclude_tags_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quality_preference_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_window_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sort_by_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sort_order_;
    uint32_t limit_;
    uint32_t offset_;
    uint32_t min_duration_ms_;
    uint32_t max_duration_ms_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fvideo_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class VideoSearchResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.common.VideoSearchResult) */ {
 public:
  inline VideoSearchResult() : VideoSearchResult(nullptr) {}
  ~VideoSearchResult() override;
  explicit PROTOBUF_CONSTEXPR VideoSearchResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoSearchResult(const VideoSearchResult& from);
  VideoSearchResult(VideoSearchResult&& from) noexcept
    : VideoSearchResult() {
    *this = ::std::move(from);
  }

  inline VideoSearchResult& operator=(const VideoSearchResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoSearchResult& operator=(VideoSearchResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoSearchResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoSearchResult* internal_default_instance() {
    return reinterpret_cast<const VideoSearchResult*>(
               &_VideoSearchResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(VideoSearchResult& a, VideoSearchResult& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoSearchResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoSearchResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoSearchResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoSearchResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoSearchResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VideoSearchResult& from) {
    VideoSearchResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoSearchResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.common.VideoSearchResult";
  }
  protected:
  explicit VideoSearchResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVideosFieldNumber = 1,
    kSuggestedQueriesFieldNumber = 7,
    kNextCursorFieldNumber = 4,
    kPrevCursorFieldNumber = 5,
    kTotalCountFieldNumber = 2,
    kPageCountFieldNumber = 3,
    kSearchRelevanceFieldNumber = 6,
  };
  // repeated .sonet.common.VideoCandidate videos = 1;
  int videos_size() const;
  private:
  int _internal_videos_size() const;
  public:
  void clear_videos();
  ::sonet::common::VideoCandidate* mutable_videos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::common::VideoCandidate >*
      mutable_videos();
  private:
  const ::sonet::common::VideoCandidate& _internal_videos(int index) const;
  ::sonet::common::VideoCandidate* _internal_add_videos();
  public:
  const ::sonet::common::VideoCandidate& videos(int index) const;
  ::sonet::common::VideoCandidate* add_videos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::common::VideoCandidate >&
      videos() const;

  // repeated string suggested_queries = 7;
  int suggested_queries_size() const;
  private:
  int _internal_suggested_queries_size() const;
  public:
  void clear_suggested_queries();
  const std::string& suggested_queries(int index) const;
  std::string* mutable_suggested_queries(int index);
  void set_suggested_queries(int index, const std::string& value);
  void set_suggested_queries(int index, std::string&& value);
  void set_suggested_queries(int index, const char* value);
  void set_suggested_queries(int index, const char* value, size_t size);
  std::string* add_suggested_queries();
  void add_suggested_queries(const std::string& value);
  void add_suggested_queries(std::string&& value);
  void add_suggested_queries(const char* value);
  void add_suggested_queries(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& suggested_queries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_suggested_queries();
  private:
  const std::string& _internal_suggested_queries(int index) const;
  std::string* _internal_add_suggested_queries();
  public:

  // string next_cursor = 4;
  void clear_next_cursor();
  const std::string& next_cursor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_cursor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_cursor();
  PROTOBUF_NODISCARD std::string* release_next_cursor();
  void set_allocated_next_cursor(std::string* next_cursor);
  private:
  const std::string& _internal_next_cursor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_cursor(const std::string& value);
  std::string* _internal_mutable_next_cursor();
  public:

  // string prev_cursor = 5;
  void clear_prev_cursor();
  const std::string& prev_cursor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prev_cursor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prev_cursor();
  PROTOBUF_NODISCARD std::string* release_prev_cursor();
  void set_allocated_prev_cursor(std::string* prev_cursor);
  private:
  const std::string& _internal_prev_cursor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prev_cursor(const std::string& value);
  std::string* _internal_mutable_prev_cursor();
  public:

  // uint32 total_count = 2;
  void clear_total_count();
  uint32_t total_count() const;
  void set_total_count(uint32_t value);
  private:
  uint32_t _internal_total_count() const;
  void _internal_set_total_count(uint32_t value);
  public:

  // uint32 page_count = 3;
  void clear_page_count();
  uint32_t page_count() const;
  void set_page_count(uint32_t value);
  private:
  uint32_t _internal_page_count() const;
  void _internal_set_page_count(uint32_t value);
  public:

  // double search_relevance = 6;
  void clear_search_relevance();
  double search_relevance() const;
  void set_search_relevance(double value);
  private:
  double _internal_search_relevance() const;
  void _internal_set_search_relevance(double value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.common.VideoSearchResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::common::VideoCandidate > videos_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> suggested_queries_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_cursor_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_cursor_;
    uint32_t total_count_;
    uint32_t page_count_;
    double search_relevance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fvideo_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class VideoUploadRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.common.VideoUploadRequest) */ {
 public:
  inline VideoUploadRequest() : VideoUploadRequest(nullptr) {}
  ~VideoUploadRequest() override;
  explicit PROTOBUF_CONSTEXPR VideoUploadRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoUploadRequest(const VideoUploadRequest& from);
  VideoUploadRequest(VideoUploadRequest&& from) noexcept
    : VideoUploadRequest() {
    *this = ::std::move(from);
  }

  inline VideoUploadRequest& operator=(const VideoUploadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoUploadRequest& operator=(VideoUploadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoUploadRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoUploadRequest* internal_default_instance() {
    return reinterpret_cast<const VideoUploadRequest*>(
               &_VideoUploadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(VideoUploadRequest& a, VideoUploadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoUploadRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoUploadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoUploadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoUploadRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoUploadRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VideoUploadRequest& from) {
    VideoUploadRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoUploadRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.common.VideoUploadRequest";
  }
  protected:
  explicit VideoUploadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 4,
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kCategoryFieldNumber = 3,
    kLanguageFieldNumber = 5,
    kVideoDataFieldNumber = 7,
    kThumbnailDataFieldNumber = 8,
    kMetadataFieldNumber = 6,
  };
  // repeated string tags = 4;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // string title = 1;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string category = 3;
  void clear_category();
  const std::string& category() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_category(ArgT0&& arg0, ArgT... args);
  std::string* mutable_category();
  PROTOBUF_NODISCARD std::string* release_category();
  void set_allocated_category(std::string* category);
  private:
  const std::string& _internal_category() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_category(const std::string& value);
  std::string* _internal_mutable_category();
  public:

  // string language = 5;
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // bytes video_data = 7;
  void clear_video_data();
  const std::string& video_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_video_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_video_data();
  PROTOBUF_NODISCARD std::string* release_video_data();
  void set_allocated_video_data(std::string* video_data);
  private:
  const std::string& _internal_video_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_video_data(const std::string& value);
  std::string* _internal_mutable_video_data();
  public:

  // bytes thumbnail_data = 8;
  void clear_thumbnail_data();
  const std::string& thumbnail_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_thumbnail_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_thumbnail_data();
  PROTOBUF_NODISCARD std::string* release_thumbnail_data();
  void set_allocated_thumbnail_data(std::string* thumbnail_data);
  private:
  const std::string& _internal_thumbnail_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_thumbnail_data(const std::string& value);
  std::string* _internal_mutable_thumbnail_data();
  public:

  // .sonet.common.VideoUploadMetadata metadata = 6;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::sonet::common::VideoUploadMetadata& metadata() const;
  PROTOBUF_NODISCARD ::sonet::common::VideoUploadMetadata* release_metadata();
  ::sonet::common::VideoUploadMetadata* mutable_metadata();
  void set_allocated_metadata(::sonet::common::VideoUploadMetadata* metadata);
  private:
  const ::sonet::common::VideoUploadMetadata& _internal_metadata() const;
  ::sonet::common::VideoUploadMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::sonet::common::VideoUploadMetadata* metadata);
  ::sonet::common::VideoUploadMetadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:sonet.common.VideoUploadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr video_data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thumbnail_data_;
    ::sonet::common::VideoUploadMetadata* metadata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fvideo_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class VideoUploadMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.common.VideoUploadMetadata) */ {
 public:
  inline VideoUploadMetadata() : VideoUploadMetadata(nullptr) {}
  ~VideoUploadMetadata() override;
  explicit PROTOBUF_CONSTEXPR VideoUploadMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoUploadMetadata(const VideoUploadMetadata& from);
  VideoUploadMetadata(VideoUploadMetadata&& from) noexcept
    : VideoUploadMetadata() {
    *this = ::std::move(from);
  }

  inline VideoUploadMetadata& operator=(const VideoUploadMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoUploadMetadata& operator=(VideoUploadMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoUploadMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoUploadMetadata* internal_default_instance() {
    return reinterpret_cast<const VideoUploadMetadata*>(
               &_VideoUploadMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(VideoUploadMetadata& a, VideoUploadMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoUploadMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoUploadMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoUploadMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoUploadMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoUploadMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VideoUploadMetadata& from) {
    VideoUploadMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoUploadMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.common.VideoUploadMetadata";
  }
  protected:
  explicit VideoUploadMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResolutionFieldNumber = 2,
    kAspectRatioFieldNumber = 3,
    kEncodingFieldNumber = 4,
    kDurationMsFieldNumber = 1,
    kBitrateKbpsFieldNumber = 5,
    kFileSizeBytesFieldNumber = 7,
    kFrameRateFieldNumber = 6,
  };
  // string resolution = 2;
  void clear_resolution();
  const std::string& resolution() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resolution(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resolution();
  PROTOBUF_NODISCARD std::string* release_resolution();
  void set_allocated_resolution(std::string* resolution);
  private:
  const std::string& _internal_resolution() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resolution(const std::string& value);
  std::string* _internal_mutable_resolution();
  public:

  // string aspect_ratio = 3;
  void clear_aspect_ratio();
  const std::string& aspect_ratio() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_aspect_ratio(ArgT0&& arg0, ArgT... args);
  std::string* mutable_aspect_ratio();
  PROTOBUF_NODISCARD std::string* release_aspect_ratio();
  void set_allocated_aspect_ratio(std::string* aspect_ratio);
  private:
  const std::string& _internal_aspect_ratio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_aspect_ratio(const std::string& value);
  std::string* _internal_mutable_aspect_ratio();
  public:

  // string encoding = 4;
  void clear_encoding();
  const std::string& encoding() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encoding(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encoding();
  PROTOBUF_NODISCARD std::string* release_encoding();
  void set_allocated_encoding(std::string* encoding);
  private:
  const std::string& _internal_encoding() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encoding(const std::string& value);
  std::string* _internal_mutable_encoding();
  public:

  // uint32 duration_ms = 1;
  void clear_duration_ms();
  uint32_t duration_ms() const;
  void set_duration_ms(uint32_t value);
  private:
  uint32_t _internal_duration_ms() const;
  void _internal_set_duration_ms(uint32_t value);
  public:

  // uint32 bitrate_kbps = 5;
  void clear_bitrate_kbps();
  uint32_t bitrate_kbps() const;
  void set_bitrate_kbps(uint32_t value);
  private:
  uint32_t _internal_bitrate_kbps() const;
  void _internal_set_bitrate_kbps(uint32_t value);
  public:

  // uint64 file_size_bytes = 7;
  void clear_file_size_bytes();
  uint64_t file_size_bytes() const;
  void set_file_size_bytes(uint64_t value);
  private:
  uint64_t _internal_file_size_bytes() const;
  void _internal_set_file_size_bytes(uint64_t value);
  public:

  // uint32 frame_rate = 6;
  void clear_frame_rate();
  uint32_t frame_rate() const;
  void set_frame_rate(uint32_t value);
  private:
  uint32_t _internal_frame_rate() const;
  void _internal_set_frame_rate(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.common.VideoUploadMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resolution_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aspect_ratio_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoding_;
    uint32_t duration_ms_;
    uint32_t bitrate_kbps_;
    uint64_t file_size_bytes_;
    uint32_t frame_rate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fvideo_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class VideoUploadResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.common.VideoUploadResponse) */ {
 public:
  inline VideoUploadResponse() : VideoUploadResponse(nullptr) {}
  ~VideoUploadResponse() override;
  explicit PROTOBUF_CONSTEXPR VideoUploadResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoUploadResponse(const VideoUploadResponse& from);
  VideoUploadResponse(VideoUploadResponse&& from) noexcept
    : VideoUploadResponse() {
    *this = ::std::move(from);
  }

  inline VideoUploadResponse& operator=(const VideoUploadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoUploadResponse& operator=(VideoUploadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoUploadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoUploadResponse* internal_default_instance() {
    return reinterpret_cast<const VideoUploadResponse*>(
               &_VideoUploadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(VideoUploadResponse& a, VideoUploadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoUploadResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoUploadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoUploadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoUploadResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoUploadResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VideoUploadResponse& from) {
    VideoUploadResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoUploadResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.common.VideoUploadResponse";
  }
  protected:
  explicit VideoUploadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVideoIdFieldNumber = 2,
    kMessageFieldNumber = 3,
    kProcessingStatusFieldNumber = 4,
    kThumbnailUrlFieldNumber = 5,
    kPlaybackUrlFieldNumber = 6,
    kSuccessFieldNumber = 1,
    kProcessingTimeMsFieldNumber = 7,
  };
  // string video_id = 2;
  void clear_video_id();
  const std::string& video_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_video_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_video_id();
  PROTOBUF_NODISCARD std::string* release_video_id();
  void set_allocated_video_id(std::string* video_id);
  private:
  const std::string& _internal_video_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_video_id(const std::string& value);
  std::string* _internal_mutable_video_id();
  public:

  // string message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string processing_status = 4;
  void clear_processing_status();
  const std::string& processing_status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_processing_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_processing_status();
  PROTOBUF_NODISCARD std::string* release_processing_status();
  void set_allocated_processing_status(std::string* processing_status);
  private:
  const std::string& _internal_processing_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_processing_status(const std::string& value);
  std::string* _internal_mutable_processing_status();
  public:

  // string thumbnail_url = 5;
  void clear_thumbnail_url();
  const std::string& thumbnail_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_thumbnail_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_thumbnail_url();
  PROTOBUF_NODISCARD std::string* release_thumbnail_url();
  void set_allocated_thumbnail_url(std::string* thumbnail_url);
  private:
  const std::string& _internal_thumbnail_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_thumbnail_url(const std::string& value);
  std::string* _internal_mutable_thumbnail_url();
  public:

  // string playback_url = 6;
  void clear_playback_url();
  const std::string& playback_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playback_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playback_url();
  PROTOBUF_NODISCARD std::string* release_playback_url();
  void set_allocated_playback_url(std::string* playback_url);
  private:
  const std::string& _internal_playback_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playback_url(const std::string& value);
  std::string* _internal_mutable_playback_url();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // uint32 processing_time_ms = 7;
  void clear_processing_time_ms();
  uint32_t processing_time_ms() const;
  void set_processing_time_ms(uint32_t value);
  private:
  uint32_t _internal_processing_time_ms() const;
  void _internal_set_processing_time_ms(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.common.VideoUploadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr video_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr processing_status_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thumbnail_url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playback_url_;
    bool success_;
    uint32_t processing_time_ms_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fvideo_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class VideoProcessingStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.common.VideoProcessingStatus) */ {
 public:
  inline VideoProcessingStatus() : VideoProcessingStatus(nullptr) {}
  ~VideoProcessingStatus() override;
  explicit PROTOBUF_CONSTEXPR VideoProcessingStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoProcessingStatus(const VideoProcessingStatus& from);
  VideoProcessingStatus(VideoProcessingStatus&& from) noexcept
    : VideoProcessingStatus() {
    *this = ::std::move(from);
  }

  inline VideoProcessingStatus& operator=(const VideoProcessingStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoProcessingStatus& operator=(VideoProcessingStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoProcessingStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoProcessingStatus* internal_default_instance() {
    return reinterpret_cast<const VideoProcessingStatus*>(
               &_VideoProcessingStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(VideoProcessingStatus& a, VideoProcessingStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoProcessingStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoProcessingStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoProcessingStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoProcessingStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoProcessingStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VideoProcessingStatus& from) {
    VideoProcessingStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoProcessingStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.common.VideoProcessingStatus";
  }
  protected:
  explicit VideoProcessingStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompletedStepsFieldNumber = 5,
    kVideoIdFieldNumber = 1,
    kStatusFieldNumber = 2,
    kCurrentStepFieldNumber = 4,
    kErrorMessageFieldNumber = 6,
    kProgressFieldNumber = 3,
    kEstimatedTimeRemainingMsFieldNumber = 7,
  };
  // repeated string completed_steps = 5;
  int completed_steps_size() const;
  private:
  int _internal_completed_steps_size() const;
  public:
  void clear_completed_steps();
  const std::string& completed_steps(int index) const;
  std::string* mutable_completed_steps(int index);
  void set_completed_steps(int index, const std::string& value);
  void set_completed_steps(int index, std::string&& value);
  void set_completed_steps(int index, const char* value);
  void set_completed_steps(int index, const char* value, size_t size);
  std::string* add_completed_steps();
  void add_completed_steps(const std::string& value);
  void add_completed_steps(std::string&& value);
  void add_completed_steps(const char* value);
  void add_completed_steps(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& completed_steps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_completed_steps();
  private:
  const std::string& _internal_completed_steps(int index) const;
  std::string* _internal_add_completed_steps();
  public:

  // string video_id = 1;
  void clear_video_id();
  const std::string& video_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_video_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_video_id();
  PROTOBUF_NODISCARD std::string* release_video_id();
  void set_allocated_video_id(std::string* video_id);
  private:
  const std::string& _internal_video_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_video_id(const std::string& value);
  std::string* _internal_mutable_video_id();
  public:

  // string status = 2;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string current_step = 4;
  void clear_current_step();
  const std::string& current_step() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_current_step(ArgT0&& arg0, ArgT... args);
  std::string* mutable_current_step();
  PROTOBUF_NODISCARD std::string* release_current_step();
  void set_allocated_current_step(std::string* current_step);
  private:
  const std::string& _internal_current_step() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_current_step(const std::string& value);
  std::string* _internal_mutable_current_step();
  public:

  // string error_message = 6;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // double progress = 3;
  void clear_progress();
  double progress() const;
  void set_progress(double value);
  private:
  double _internal_progress() const;
  void _internal_set_progress(double value);
  public:

  // uint32 estimated_time_remaining_ms = 7;
  void clear_estimated_time_remaining_ms();
  uint32_t estimated_time_remaining_ms() const;
  void set_estimated_time_remaining_ms(uint32_t value);
  private:
  uint32_t _internal_estimated_time_remaining_ms() const;
  void _internal_set_estimated_time_remaining_ms(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.common.VideoProcessingStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> completed_steps_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr video_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr current_step_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    double progress_;
    uint32_t estimated_time_remaining_ms_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fvideo_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class VideoAnalytics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.common.VideoAnalytics) */ {
 public:
  inline VideoAnalytics() : VideoAnalytics(nullptr) {}
  ~VideoAnalytics() override;
  explicit PROTOBUF_CONSTEXPR VideoAnalytics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoAnalytics(const VideoAnalytics& from);
  VideoAnalytics(VideoAnalytics&& from) noexcept
    : VideoAnalytics() {
    *this = ::std::move(from);
  }

  inline VideoAnalytics& operator=(const VideoAnalytics& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoAnalytics& operator=(VideoAnalytics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoAnalytics& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoAnalytics* internal_default_instance() {
    return reinterpret_cast<const VideoAnalytics*>(
               &_VideoAnalytics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(VideoAnalytics& a, VideoAnalytics& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoAnalytics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoAnalytics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoAnalytics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoAnalytics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoAnalytics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VideoAnalytics& from) {
    VideoAnalytics::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoAnalytics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.common.VideoAnalytics";
  }
  protected:
  explicit VideoAnalytics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeographicViewsFieldNumber = 10,
    kDeviceViewsFieldNumber = 11,
    kTimeViewsFieldNumber = 12,
    kVideoIdFieldNumber = 1,
    kTotalViewsFieldNumber = 2,
    kUniqueViewersFieldNumber = 3,
    kAverageWatchTimeMsFieldNumber = 4,
    kCompletionRateFieldNumber = 5,
    kSkipRateFieldNumber = 6,
    kEngagementRateFieldNumber = 7,
    kViralCoefficientFieldNumber = 8,
    kRetentionScoreFieldNumber = 9,
  };
  // repeated .sonet.common.GeographicView geographic_views = 10;
  int geographic_views_size() const;
  private:
  int _internal_geographic_views_size() const;
  public:
  void clear_geographic_views();
  ::sonet::common::GeographicView* mutable_geographic_views(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::common::GeographicView >*
      mutable_geographic_views();
  private:
  const ::sonet::common::GeographicView& _internal_geographic_views(int index) const;
  ::sonet::common::GeographicView* _internal_add_geographic_views();
  public:
  const ::sonet::common::GeographicView& geographic_views(int index) const;
  ::sonet::common::GeographicView* add_geographic_views();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::common::GeographicView >&
      geographic_views() const;

  // repeated .sonet.common.DeviceView device_views = 11;
  int device_views_size() const;
  private:
  int _internal_device_views_size() const;
  public:
  void clear_device_views();
  ::sonet::common::DeviceView* mutable_device_views(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::common::DeviceView >*
      mutable_device_views();
  private:
  const ::sonet::common::DeviceView& _internal_device_views(int index) const;
  ::sonet::common::DeviceView* _internal_add_device_views();
  public:
  const ::sonet::common::DeviceView& device_views(int index) const;
  ::sonet::common::DeviceView* add_device_views();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::common::DeviceView >&
      device_views() const;

  // repeated .sonet.common.TimeView time_views = 12;
  int time_views_size() const;
  private:
  int _internal_time_views_size() const;
  public:
  void clear_time_views();
  ::sonet::common::TimeView* mutable_time_views(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::common::TimeView >*
      mutable_time_views();
  private:
  const ::sonet::common::TimeView& _internal_time_views(int index) const;
  ::sonet::common::TimeView* _internal_add_time_views();
  public:
  const ::sonet::common::TimeView& time_views(int index) const;
  ::sonet::common::TimeView* add_time_views();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::common::TimeView >&
      time_views() const;

  // string video_id = 1;
  void clear_video_id();
  const std::string& video_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_video_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_video_id();
  PROTOBUF_NODISCARD std::string* release_video_id();
  void set_allocated_video_id(std::string* video_id);
  private:
  const std::string& _internal_video_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_video_id(const std::string& value);
  std::string* _internal_mutable_video_id();
  public:

  // uint32 total_views = 2;
  void clear_total_views();
  uint32_t total_views() const;
  void set_total_views(uint32_t value);
  private:
  uint32_t _internal_total_views() const;
  void _internal_set_total_views(uint32_t value);
  public:

  // uint32 unique_viewers = 3;
  void clear_unique_viewers();
  uint32_t unique_viewers() const;
  void set_unique_viewers(uint32_t value);
  private:
  uint32_t _internal_unique_viewers() const;
  void _internal_set_unique_viewers(uint32_t value);
  public:

  // double average_watch_time_ms = 4;
  void clear_average_watch_time_ms();
  double average_watch_time_ms() const;
  void set_average_watch_time_ms(double value);
  private:
  double _internal_average_watch_time_ms() const;
  void _internal_set_average_watch_time_ms(double value);
  public:

  // double completion_rate = 5;
  void clear_completion_rate();
  double completion_rate() const;
  void set_completion_rate(double value);
  private:
  double _internal_completion_rate() const;
  void _internal_set_completion_rate(double value);
  public:

  // double skip_rate = 6;
  void clear_skip_rate();
  double skip_rate() const;
  void set_skip_rate(double value);
  private:
  double _internal_skip_rate() const;
  void _internal_set_skip_rate(double value);
  public:

  // double engagement_rate = 7;
  void clear_engagement_rate();
  double engagement_rate() const;
  void set_engagement_rate(double value);
  private:
  double _internal_engagement_rate() const;
  void _internal_set_engagement_rate(double value);
  public:

  // double viral_coefficient = 8;
  void clear_viral_coefficient();
  double viral_coefficient() const;
  void set_viral_coefficient(double value);
  private:
  double _internal_viral_coefficient() const;
  void _internal_set_viral_coefficient(double value);
  public:

  // double retention_score = 9;
  void clear_retention_score();
  double retention_score() const;
  void set_retention_score(double value);
  private:
  double _internal_retention_score() const;
  void _internal_set_retention_score(double value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.common.VideoAnalytics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::common::GeographicView > geographic_views_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::common::DeviceView > device_views_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::common::TimeView > time_views_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr video_id_;
    uint32_t total_views_;
    uint32_t unique_viewers_;
    double average_watch_time_ms_;
    double completion_rate_;
    double skip_rate_;
    double engagement_rate_;
    double viral_coefficient_;
    double retention_score_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fvideo_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class GeographicView final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.common.GeographicView) */ {
 public:
  inline GeographicView() : GeographicView(nullptr) {}
  ~GeographicView() override;
  explicit PROTOBUF_CONSTEXPR GeographicView(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GeographicView(const GeographicView& from);
  GeographicView(GeographicView&& from) noexcept
    : GeographicView() {
    *this = ::std::move(from);
  }

  inline GeographicView& operator=(const GeographicView& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeographicView& operator=(GeographicView&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GeographicView& default_instance() {
    return *internal_default_instance();
  }
  static inline const GeographicView* internal_default_instance() {
    return reinterpret_cast<const GeographicView*>(
               &_GeographicView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GeographicView& a, GeographicView& b) {
    a.Swap(&b);
  }
  inline void Swap(GeographicView* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeographicView* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GeographicView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GeographicView>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GeographicView& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GeographicView& from) {
    GeographicView::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeographicView* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.common.GeographicView";
  }
  protected:
  explicit GeographicView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryFieldNumber = 1,
    kRegionFieldNumber = 2,
    kCityFieldNumber = 3,
    kEngagementRateFieldNumber = 5,
    kViewCountFieldNumber = 4,
  };
  // string country = 1;
  void clear_country();
  const std::string& country() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country();
  PROTOBUF_NODISCARD std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // string region = 2;
  void clear_region();
  const std::string& region() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_region(ArgT0&& arg0, ArgT... args);
  std::string* mutable_region();
  PROTOBUF_NODISCARD std::string* release_region();
  void set_allocated_region(std::string* region);
  private:
  const std::string& _internal_region() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_region(const std::string& value);
  std::string* _internal_mutable_region();
  public:

  // string city = 3;
  void clear_city();
  const std::string& city() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_city(ArgT0&& arg0, ArgT... args);
  std::string* mutable_city();
  PROTOBUF_NODISCARD std::string* release_city();
  void set_allocated_city(std::string* city);
  private:
  const std::string& _internal_city() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // double engagement_rate = 5;
  void clear_engagement_rate();
  double engagement_rate() const;
  void set_engagement_rate(double value);
  private:
  double _internal_engagement_rate() const;
  void _internal_set_engagement_rate(double value);
  public:

  // uint32 view_count = 4;
  void clear_view_count();
  uint32_t view_count() const;
  void set_view_count(uint32_t value);
  private:
  uint32_t _internal_view_count() const;
  void _internal_set_view_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.common.GeographicView)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
    double engagement_rate_;
    uint32_t view_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fvideo_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class DeviceView final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.common.DeviceView) */ {
 public:
  inline DeviceView() : DeviceView(nullptr) {}
  ~DeviceView() override;
  explicit PROTOBUF_CONSTEXPR DeviceView(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceView(const DeviceView& from);
  DeviceView(DeviceView&& from) noexcept
    : DeviceView() {
    *this = ::std::move(from);
  }

  inline DeviceView& operator=(const DeviceView& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceView& operator=(DeviceView&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceView& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceView* internal_default_instance() {
    return reinterpret_cast<const DeviceView*>(
               &_DeviceView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DeviceView& a, DeviceView& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceView* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceView* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceView>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceView& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceView& from) {
    DeviceView::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceView* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.common.DeviceView";
  }
  protected:
  explicit DeviceView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceTypeFieldNumber = 1,
    kPlatformFieldNumber = 2,
    kBrowserFieldNumber = 3,
    kEngagementRateFieldNumber = 5,
    kViewCountFieldNumber = 4,
  };
  // string device_type = 1;
  void clear_device_type();
  const std::string& device_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_type();
  PROTOBUF_NODISCARD std::string* release_device_type();
  void set_allocated_device_type(std::string* device_type);
  private:
  const std::string& _internal_device_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_type(const std::string& value);
  std::string* _internal_mutable_device_type();
  public:

  // string platform = 2;
  void clear_platform();
  const std::string& platform() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_platform(ArgT0&& arg0, ArgT... args);
  std::string* mutable_platform();
  PROTOBUF_NODISCARD std::string* release_platform();
  void set_allocated_platform(std::string* platform);
  private:
  const std::string& _internal_platform() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_platform(const std::string& value);
  std::string* _internal_mutable_platform();
  public:

  // string browser = 3;
  void clear_browser();
  const std::string& browser() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_browser(ArgT0&& arg0, ArgT... args);
  std::string* mutable_browser();
  PROTOBUF_NODISCARD std::string* release_browser();
  void set_allocated_browser(std::string* browser);
  private:
  const std::string& _internal_browser() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_browser(const std::string& value);
  std::string* _internal_mutable_browser();
  public:

  // double engagement_rate = 5;
  void clear_engagement_rate();
  double engagement_rate() const;
  void set_engagement_rate(double value);
  private:
  double _internal_engagement_rate() const;
  void _internal_set_engagement_rate(double value);
  public:

  // uint32 view_count = 4;
  void clear_view_count();
  uint32_t view_count() const;
  void set_view_count(uint32_t value);
  private:
  uint32_t _internal_view_count() const;
  void _internal_set_view_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.common.DeviceView)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr browser_;
    double engagement_rate_;
    uint32_t view_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fvideo_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class TimeView final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.common.TimeView) */ {
 public:
  inline TimeView() : TimeView(nullptr) {}
  ~TimeView() override;
  explicit PROTOBUF_CONSTEXPR TimeView(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeView(const TimeView& from);
  TimeView(TimeView&& from) noexcept
    : TimeView() {
    *this = ::std::move(from);
  }

  inline TimeView& operator=(const TimeView& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeView& operator=(TimeView&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeView& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeView* internal_default_instance() {
    return reinterpret_cast<const TimeView*>(
               &_TimeView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TimeView& a, TimeView& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeView* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeView* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeView>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimeView& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TimeView& from) {
    TimeView::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeView* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.common.TimeView";
  }
  protected:
  explicit TimeView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHourFieldNumber = 1,
    kDayOfWeekFieldNumber = 2,
    kEngagementRateFieldNumber = 4,
    kViewCountFieldNumber = 3,
  };
  // string hour = 1;
  void clear_hour();
  const std::string& hour() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hour(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hour();
  PROTOBUF_NODISCARD std::string* release_hour();
  void set_allocated_hour(std::string* hour);
  private:
  const std::string& _internal_hour() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hour(const std::string& value);
  std::string* _internal_mutable_hour();
  public:

  // string day_of_week = 2;
  void clear_day_of_week();
  const std::string& day_of_week() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_day_of_week(ArgT0&& arg0, ArgT... args);
  std::string* mutable_day_of_week();
  PROTOBUF_NODISCARD std::string* release_day_of_week();
  void set_allocated_day_of_week(std::string* day_of_week);
  private:
  const std::string& _internal_day_of_week() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_day_of_week(const std::string& value);
  std::string* _internal_mutable_day_of_week();
  public:

  // double engagement_rate = 4;
  void clear_engagement_rate();
  double engagement_rate() const;
  void set_engagement_rate(double value);
  private:
  double _internal_engagement_rate() const;
  void _internal_set_engagement_rate(double value);
  public:

  // uint32 view_count = 3;
  void clear_view_count();
  uint32_t view_count() const;
  void set_view_count(uint32_t value);
  private:
  uint32_t _internal_view_count() const;
  void _internal_set_view_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.common.TimeView)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hour_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr day_of_week_;
    double engagement_rate_;
    uint32_t view_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fvideo_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class VideoRecommendation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.common.VideoRecommendation) */ {
 public:
  inline VideoRecommendation() : VideoRecommendation(nullptr) {}
  ~VideoRecommendation() override;
  explicit PROTOBUF_CONSTEXPR VideoRecommendation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoRecommendation(const VideoRecommendation& from);
  VideoRecommendation(VideoRecommendation&& from) noexcept
    : VideoRecommendation() {
    *this = ::std::move(from);
  }

  inline VideoRecommendation& operator=(const VideoRecommendation& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoRecommendation& operator=(VideoRecommendation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoRecommendation& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoRecommendation* internal_default_instance() {
    return reinterpret_cast<const VideoRecommendation*>(
               &_VideoRecommendation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(VideoRecommendation& a, VideoRecommendation& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoRecommendation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoRecommendation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoRecommendation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoRecommendation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoRecommendation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VideoRecommendation& from) {
    VideoRecommendation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoRecommendation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.common.VideoRecommendation";
  }
  protected:
  explicit VideoRecommendation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFactorsFieldNumber = 4,
    kVideoIdFieldNumber = 1,
    kReasonFieldNumber = 3,
    kAlgorithmFieldNumber = 5,
    kRelevanceScoreFieldNumber = 2,
    kConfidenceFieldNumber = 6,
  };
  // repeated string factors = 4;
  int factors_size() const;
  private:
  int _internal_factors_size() const;
  public:
  void clear_factors();
  const std::string& factors(int index) const;
  std::string* mutable_factors(int index);
  void set_factors(int index, const std::string& value);
  void set_factors(int index, std::string&& value);
  void set_factors(int index, const char* value);
  void set_factors(int index, const char* value, size_t size);
  std::string* add_factors();
  void add_factors(const std::string& value);
  void add_factors(std::string&& value);
  void add_factors(const char* value);
  void add_factors(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& factors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_factors();
  private:
  const std::string& _internal_factors(int index) const;
  std::string* _internal_add_factors();
  public:

  // string video_id = 1;
  void clear_video_id();
  const std::string& video_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_video_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_video_id();
  PROTOBUF_NODISCARD std::string* release_video_id();
  void set_allocated_video_id(std::string* video_id);
  private:
  const std::string& _internal_video_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_video_id(const std::string& value);
  std::string* _internal_mutable_video_id();
  public:

  // string reason = 3;
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // string algorithm = 5;
  void clear_algorithm();
  const std::string& algorithm() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_algorithm(ArgT0&& arg0, ArgT... args);
  std::string* mutable_algorithm();
  PROTOBUF_NODISCARD std::string* release_algorithm();
  void set_allocated_algorithm(std::string* algorithm);
  private:
  const std::string& _internal_algorithm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_algorithm(const std::string& value);
  std::string* _internal_mutable_algorithm();
  public:

  // double relevance_score = 2;
  void clear_relevance_score();
  double relevance_score() const;
  void set_relevance_score(double value);
  private:
  double _internal_relevance_score() const;
  void _internal_set_relevance_score(double value);
  public:

  // double confidence = 6;
  void clear_confidence();
  double confidence() const;
  void set_confidence(double value);
  private:
  double _internal_confidence() const;
  void _internal_set_confidence(double value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.common.VideoRecommendation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> factors_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr video_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr algorithm_;
    double relevance_score_;
    double confidence_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fvideo_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class VideoBatchRequest_ParametersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VideoBatchRequest_ParametersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VideoBatchRequest_ParametersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  VideoBatchRequest_ParametersEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR VideoBatchRequest_ParametersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit VideoBatchRequest_ParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const VideoBatchRequest_ParametersEntry_DoNotUse& other);
  static const VideoBatchRequest_ParametersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VideoBatchRequest_ParametersEntry_DoNotUse*>(&_VideoBatchRequest_ParametersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "sonet.common.VideoBatchRequest.ParametersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "sonet.common.VideoBatchRequest.ParametersEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2fvideo_5ftypes_2eproto;
};

// -------------------------------------------------------------------

class VideoBatchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.common.VideoBatchRequest) */ {
 public:
  inline VideoBatchRequest() : VideoBatchRequest(nullptr) {}
  ~VideoBatchRequest() override;
  explicit PROTOBUF_CONSTEXPR VideoBatchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoBatchRequest(const VideoBatchRequest& from);
  VideoBatchRequest(VideoBatchRequest&& from) noexcept
    : VideoBatchRequest() {
    *this = ::std::move(from);
  }

  inline VideoBatchRequest& operator=(const VideoBatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoBatchRequest& operator=(VideoBatchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoBatchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoBatchRequest* internal_default_instance() {
    return reinterpret_cast<const VideoBatchRequest*>(
               &_VideoBatchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(VideoBatchRequest& a, VideoBatchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoBatchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoBatchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoBatchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoBatchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoBatchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VideoBatchRequest& from) {
    VideoBatchRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoBatchRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.common.VideoBatchRequest";
  }
  protected:
  explicit VideoBatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kVideoIdsFieldNumber = 1,
    kParametersFieldNumber = 3,
    kOperationFieldNumber = 2,
  };
  // repeated string video_ids = 1;
  int video_ids_size() const;
  private:
  int _internal_video_ids_size() const;
  public:
  void clear_video_ids();
  const std::string& video_ids(int index) const;
  std::string* mutable_video_ids(int index);
  void set_video_ids(int index, const std::string& value);
  void set_video_ids(int index, std::string&& value);
  void set_video_ids(int index, const char* value);
  void set_video_ids(int index, const char* value, size_t size);
  std::string* add_video_ids();
  void add_video_ids(const std::string& value);
  void add_video_ids(std::string&& value);
  void add_video_ids(const char* value);
  void add_video_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& video_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_video_ids();
  private:
  const std::string& _internal_video_ids(int index) const;
  std::string* _internal_add_video_ids();
  public:

  // map<string, string> parameters = 3;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_parameters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_parameters();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      parameters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_parameters();

  // string operation = 2;
  void clear_operation();
  const std::string& operation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_operation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_operation();
  PROTOBUF_NODISCARD std::string* release_operation();
  void set_allocated_operation(std::string* operation);
  private:
  const std::string& _internal_operation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operation(const std::string& value);
  std::string* _internal_mutable_operation();
  public:

  // @@protoc_insertion_point(class_scope:sonet.common.VideoBatchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> video_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        VideoBatchRequest_ParametersEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> parameters_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fvideo_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class VideoBatchResponse_ResultsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VideoBatchResponse_ResultsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VideoBatchResponse_ResultsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  VideoBatchResponse_ResultsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR VideoBatchResponse_ResultsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit VideoBatchResponse_ResultsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const VideoBatchResponse_ResultsEntry_DoNotUse& other);
  static const VideoBatchResponse_ResultsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VideoBatchResponse_ResultsEntry_DoNotUse*>(&_VideoBatchResponse_ResultsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "sonet.common.VideoBatchResponse.ResultsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "sonet.common.VideoBatchResponse.ResultsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2fvideo_5ftypes_2eproto;
};

// -------------------------------------------------------------------

class VideoBatchResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.common.VideoBatchResponse) */ {
 public:
  inline VideoBatchResponse() : VideoBatchResponse(nullptr) {}
  ~VideoBatchResponse() override;
  explicit PROTOBUF_CONSTEXPR VideoBatchResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoBatchResponse(const VideoBatchResponse& from);
  VideoBatchResponse(VideoBatchResponse&& from) noexcept
    : VideoBatchResponse() {
    *this = ::std::move(from);
  }

  inline VideoBatchResponse& operator=(const VideoBatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoBatchResponse& operator=(VideoBatchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoBatchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoBatchResponse* internal_default_instance() {
    return reinterpret_cast<const VideoBatchResponse*>(
               &_VideoBatchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(VideoBatchResponse& a, VideoBatchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoBatchResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoBatchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoBatchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoBatchResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoBatchResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VideoBatchResponse& from) {
    VideoBatchResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoBatchResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.common.VideoBatchResponse";
  }
  protected:
  explicit VideoBatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFailedVideoIdsFieldNumber = 4,
    kResultsFieldNumber = 6,
    kMessageFieldNumber = 5,
    kSuccessFieldNumber = 1,
    kProcessedCountFieldNumber = 2,
    kFailedCountFieldNumber = 3,
  };
  // repeated string failed_video_ids = 4;
  int failed_video_ids_size() const;
  private:
  int _internal_failed_video_ids_size() const;
  public:
  void clear_failed_video_ids();
  const std::string& failed_video_ids(int index) const;
  std::string* mutable_failed_video_ids(int index);
  void set_failed_video_ids(int index, const std::string& value);
  void set_failed_video_ids(int index, std::string&& value);
  void set_failed_video_ids(int index, const char* value);
  void set_failed_video_ids(int index, const char* value, size_t size);
  std::string* add_failed_video_ids();
  void add_failed_video_ids(const std::string& value);
  void add_failed_video_ids(std::string&& value);
  void add_failed_video_ids(const char* value);
  void add_failed_video_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& failed_video_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_failed_video_ids();
  private:
  const std::string& _internal_failed_video_ids(int index) const;
  std::string* _internal_add_failed_video_ids();
  public:

  // map<string, string> results = 6;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_results() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_results();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      results() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_results();

  // string message = 5;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // uint32 processed_count = 2;
  void clear_processed_count();
  uint32_t processed_count() const;
  void set_processed_count(uint32_t value);
  private:
  uint32_t _internal_processed_count() const;
  void _internal_set_processed_count(uint32_t value);
  public:

  // uint32 failed_count = 3;
  void clear_failed_count();
  uint32_t failed_count() const;
  void set_failed_count(uint32_t value);
  private:
  uint32_t _internal_failed_count() const;
  void _internal_set_failed_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.common.VideoBatchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> failed_video_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        VideoBatchResponse_ResultsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> results_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    bool success_;
    uint32_t processed_count_;
    uint32_t failed_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fvideo_5ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VideoCandidate

// string id = 1;
inline void VideoCandidate::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& VideoCandidate::id() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoCandidate.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoCandidate::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoCandidate.id)
}
inline std::string* VideoCandidate::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoCandidate.id)
  return _s;
}
inline const std::string& VideoCandidate::_internal_id() const {
  return _impl_.id_.Get();
}
inline void VideoCandidate::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoCandidate::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoCandidate::release_id() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoCandidate.id)
  return _impl_.id_.Release();
}
inline void VideoCandidate::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoCandidate.id)
}

// string title = 2;
inline void VideoCandidate::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& VideoCandidate::title() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoCandidate.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoCandidate::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoCandidate.title)
}
inline std::string* VideoCandidate::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoCandidate.title)
  return _s;
}
inline const std::string& VideoCandidate::_internal_title() const {
  return _impl_.title_.Get();
}
inline void VideoCandidate::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoCandidate::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoCandidate::release_title() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoCandidate.title)
  return _impl_.title_.Release();
}
inline void VideoCandidate::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoCandidate.title)
}

// string description = 3;
inline void VideoCandidate::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& VideoCandidate::description() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoCandidate.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoCandidate::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoCandidate.description)
}
inline std::string* VideoCandidate::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoCandidate.description)
  return _s;
}
inline const std::string& VideoCandidate::_internal_description() const {
  return _impl_.description_.Get();
}
inline void VideoCandidate::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoCandidate::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoCandidate::release_description() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoCandidate.description)
  return _impl_.description_.Release();
}
inline void VideoCandidate::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoCandidate.description)
}

// string category = 4;
inline void VideoCandidate::clear_category() {
  _impl_.category_.ClearToEmpty();
}
inline const std::string& VideoCandidate::category() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoCandidate.category)
  return _internal_category();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoCandidate::set_category(ArgT0&& arg0, ArgT... args) {
 
 _impl_.category_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoCandidate.category)
}
inline std::string* VideoCandidate::mutable_category() {
  std::string* _s = _internal_mutable_category();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoCandidate.category)
  return _s;
}
inline const std::string& VideoCandidate::_internal_category() const {
  return _impl_.category_.Get();
}
inline void VideoCandidate::_internal_set_category(const std::string& value) {
  
  _impl_.category_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoCandidate::_internal_mutable_category() {
  
  return _impl_.category_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoCandidate::release_category() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoCandidate.category)
  return _impl_.category_.Release();
}
inline void VideoCandidate::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    
  } else {
    
  }
  _impl_.category_.SetAllocated(category, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.category_.IsDefault()) {
    _impl_.category_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoCandidate.category)
}

// repeated string tags = 5;
inline int VideoCandidate::_internal_tags_size() const {
  return _impl_.tags_.size();
}
inline int VideoCandidate::tags_size() const {
  return _internal_tags_size();
}
inline void VideoCandidate::clear_tags() {
  _impl_.tags_.Clear();
}
inline std::string* VideoCandidate::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:sonet.common.VideoCandidate.tags)
  return _s;
}
inline const std::string& VideoCandidate::_internal_tags(int index) const {
  return _impl_.tags_.Get(index);
}
inline const std::string& VideoCandidate::tags(int index) const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoCandidate.tags)
  return _internal_tags(index);
}
inline std::string* VideoCandidate::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoCandidate.tags)
  return _impl_.tags_.Mutable(index);
}
inline void VideoCandidate::set_tags(int index, const std::string& value) {
  _impl_.tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoCandidate.tags)
}
inline void VideoCandidate::set_tags(int index, std::string&& value) {
  _impl_.tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sonet.common.VideoCandidate.tags)
}
inline void VideoCandidate::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sonet.common.VideoCandidate.tags)
}
inline void VideoCandidate::set_tags(int index, const char* value, size_t size) {
  _impl_.tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sonet.common.VideoCandidate.tags)
}
inline std::string* VideoCandidate::_internal_add_tags() {
  return _impl_.tags_.Add();
}
inline void VideoCandidate::add_tags(const std::string& value) {
  _impl_.tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sonet.common.VideoCandidate.tags)
}
inline void VideoCandidate::add_tags(std::string&& value) {
  _impl_.tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sonet.common.VideoCandidate.tags)
}
inline void VideoCandidate::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sonet.common.VideoCandidate.tags)
}
inline void VideoCandidate::add_tags(const char* value, size_t size) {
  _impl_.tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sonet.common.VideoCandidate.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VideoCandidate::tags() const {
  // @@protoc_insertion_point(field_list:sonet.common.VideoCandidate.tags)
  return _impl_.tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VideoCandidate::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:sonet.common.VideoCandidate.tags)
  return &_impl_.tags_;
}

// string language = 6;
inline void VideoCandidate::clear_language() {
  _impl_.language_.ClearToEmpty();
}
inline const std::string& VideoCandidate::language() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoCandidate.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoCandidate::set_language(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoCandidate.language)
}
inline std::string* VideoCandidate::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoCandidate.language)
  return _s;
}
inline const std::string& VideoCandidate::_internal_language() const {
  return _impl_.language_.Get();
}
inline void VideoCandidate::_internal_set_language(const std::string& value) {
  
  _impl_.language_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoCandidate::_internal_mutable_language() {
  
  return _impl_.language_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoCandidate::release_language() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoCandidate.language)
  return _impl_.language_.Release();
}
inline void VideoCandidate::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  _impl_.language_.SetAllocated(language, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_.IsDefault()) {
    _impl_.language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoCandidate.language)
}

// .sonet.common.VideoMetadata video = 7;
inline bool VideoCandidate::_internal_has_video() const {
  return this != internal_default_instance() && _impl_.video_ != nullptr;
}
inline bool VideoCandidate::has_video() const {
  return _internal_has_video();
}
inline void VideoCandidate::clear_video() {
  if (GetArenaForAllocation() == nullptr && _impl_.video_ != nullptr) {
    delete _impl_.video_;
  }
  _impl_.video_ = nullptr;
}
inline const ::sonet::common::VideoMetadata& VideoCandidate::_internal_video() const {
  const ::sonet::common::VideoMetadata* p = _impl_.video_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::common::VideoMetadata&>(
      ::sonet::common::_VideoMetadata_default_instance_);
}
inline const ::sonet::common::VideoMetadata& VideoCandidate::video() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoCandidate.video)
  return _internal_video();
}
inline void VideoCandidate::unsafe_arena_set_allocated_video(
    ::sonet::common::VideoMetadata* video) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.video_);
  }
  _impl_.video_ = video;
  if (video) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.common.VideoCandidate.video)
}
inline ::sonet::common::VideoMetadata* VideoCandidate::release_video() {
  
  ::sonet::common::VideoMetadata* temp = _impl_.video_;
  _impl_.video_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::common::VideoMetadata* VideoCandidate::unsafe_arena_release_video() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoCandidate.video)
  
  ::sonet::common::VideoMetadata* temp = _impl_.video_;
  _impl_.video_ = nullptr;
  return temp;
}
inline ::sonet::common::VideoMetadata* VideoCandidate::_internal_mutable_video() {
  
  if (_impl_.video_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::common::VideoMetadata>(GetArenaForAllocation());
    _impl_.video_ = p;
  }
  return _impl_.video_;
}
inline ::sonet::common::VideoMetadata* VideoCandidate::mutable_video() {
  ::sonet::common::VideoMetadata* _msg = _internal_mutable_video();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoCandidate.video)
  return _msg;
}
inline void VideoCandidate::set_allocated_video(::sonet::common::VideoMetadata* video) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.video_;
  }
  if (video) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(video);
    if (message_arena != submessage_arena) {
      video = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.video_ = video;
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoCandidate.video)
}

// string creator_id = 8;
inline void VideoCandidate::clear_creator_id() {
  _impl_.creator_id_.ClearToEmpty();
}
inline const std::string& VideoCandidate::creator_id() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoCandidate.creator_id)
  return _internal_creator_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoCandidate::set_creator_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.creator_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoCandidate.creator_id)
}
inline std::string* VideoCandidate::mutable_creator_id() {
  std::string* _s = _internal_mutable_creator_id();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoCandidate.creator_id)
  return _s;
}
inline const std::string& VideoCandidate::_internal_creator_id() const {
  return _impl_.creator_id_.Get();
}
inline void VideoCandidate::_internal_set_creator_id(const std::string& value) {
  
  _impl_.creator_id_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoCandidate::_internal_mutable_creator_id() {
  
  return _impl_.creator_id_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoCandidate::release_creator_id() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoCandidate.creator_id)
  return _impl_.creator_id_.Release();
}
inline void VideoCandidate::set_allocated_creator_id(std::string* creator_id) {
  if (creator_id != nullptr) {
    
  } else {
    
  }
  _impl_.creator_id_.SetAllocated(creator_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creator_id_.IsDefault()) {
    _impl_.creator_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoCandidate.creator_id)
}

// string creator_username = 9;
inline void VideoCandidate::clear_creator_username() {
  _impl_.creator_username_.ClearToEmpty();
}
inline const std::string& VideoCandidate::creator_username() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoCandidate.creator_username)
  return _internal_creator_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoCandidate::set_creator_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.creator_username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoCandidate.creator_username)
}
inline std::string* VideoCandidate::mutable_creator_username() {
  std::string* _s = _internal_mutable_creator_username();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoCandidate.creator_username)
  return _s;
}
inline const std::string& VideoCandidate::_internal_creator_username() const {
  return _impl_.creator_username_.Get();
}
inline void VideoCandidate::_internal_set_creator_username(const std::string& value) {
  
  _impl_.creator_username_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoCandidate::_internal_mutable_creator_username() {
  
  return _impl_.creator_username_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoCandidate::release_creator_username() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoCandidate.creator_username)
  return _impl_.creator_username_.Release();
}
inline void VideoCandidate::set_allocated_creator_username(std::string* creator_username) {
  if (creator_username != nullptr) {
    
  } else {
    
  }
  _impl_.creator_username_.SetAllocated(creator_username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creator_username_.IsDefault()) {
    _impl_.creator_username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoCandidate.creator_username)
}

// string creator_display_name = 10;
inline void VideoCandidate::clear_creator_display_name() {
  _impl_.creator_display_name_.ClearToEmpty();
}
inline const std::string& VideoCandidate::creator_display_name() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoCandidate.creator_display_name)
  return _internal_creator_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoCandidate::set_creator_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.creator_display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoCandidate.creator_display_name)
}
inline std::string* VideoCandidate::mutable_creator_display_name() {
  std::string* _s = _internal_mutable_creator_display_name();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoCandidate.creator_display_name)
  return _s;
}
inline const std::string& VideoCandidate::_internal_creator_display_name() const {
  return _impl_.creator_display_name_.Get();
}
inline void VideoCandidate::_internal_set_creator_display_name(const std::string& value) {
  
  _impl_.creator_display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoCandidate::_internal_mutable_creator_display_name() {
  
  return _impl_.creator_display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoCandidate::release_creator_display_name() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoCandidate.creator_display_name)
  return _impl_.creator_display_name_.Release();
}
inline void VideoCandidate::set_allocated_creator_display_name(std::string* creator_display_name) {
  if (creator_display_name != nullptr) {
    
  } else {
    
  }
  _impl_.creator_display_name_.SetAllocated(creator_display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creator_display_name_.IsDefault()) {
    _impl_.creator_display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoCandidate.creator_display_name)
}

// string creator_avatar_url = 11;
inline void VideoCandidate::clear_creator_avatar_url() {
  _impl_.creator_avatar_url_.ClearToEmpty();
}
inline const std::string& VideoCandidate::creator_avatar_url() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoCandidate.creator_avatar_url)
  return _internal_creator_avatar_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoCandidate::set_creator_avatar_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.creator_avatar_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoCandidate.creator_avatar_url)
}
inline std::string* VideoCandidate::mutable_creator_avatar_url() {
  std::string* _s = _internal_mutable_creator_avatar_url();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoCandidate.creator_avatar_url)
  return _s;
}
inline const std::string& VideoCandidate::_internal_creator_avatar_url() const {
  return _impl_.creator_avatar_url_.Get();
}
inline void VideoCandidate::_internal_set_creator_avatar_url(const std::string& value) {
  
  _impl_.creator_avatar_url_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoCandidate::_internal_mutable_creator_avatar_url() {
  
  return _impl_.creator_avatar_url_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoCandidate::release_creator_avatar_url() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoCandidate.creator_avatar_url)
  return _impl_.creator_avatar_url_.Release();
}
inline void VideoCandidate::set_allocated_creator_avatar_url(std::string* creator_avatar_url) {
  if (creator_avatar_url != nullptr) {
    
  } else {
    
  }
  _impl_.creator_avatar_url_.SetAllocated(creator_avatar_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creator_avatar_url_.IsDefault()) {
    _impl_.creator_avatar_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoCandidate.creator_avatar_url)
}

// .sonet.common.EngagementMetrics engagement = 12;
inline bool VideoCandidate::_internal_has_engagement() const {
  return this != internal_default_instance() && _impl_.engagement_ != nullptr;
}
inline bool VideoCandidate::has_engagement() const {
  return _internal_has_engagement();
}
inline void VideoCandidate::clear_engagement() {
  if (GetArenaForAllocation() == nullptr && _impl_.engagement_ != nullptr) {
    delete _impl_.engagement_;
  }
  _impl_.engagement_ = nullptr;
}
inline const ::sonet::common::EngagementMetrics& VideoCandidate::_internal_engagement() const {
  const ::sonet::common::EngagementMetrics* p = _impl_.engagement_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::common::EngagementMetrics&>(
      ::sonet::common::_EngagementMetrics_default_instance_);
}
inline const ::sonet::common::EngagementMetrics& VideoCandidate::engagement() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoCandidate.engagement)
  return _internal_engagement();
}
inline void VideoCandidate::unsafe_arena_set_allocated_engagement(
    ::sonet::common::EngagementMetrics* engagement) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.engagement_);
  }
  _impl_.engagement_ = engagement;
  if (engagement) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.common.VideoCandidate.engagement)
}
inline ::sonet::common::EngagementMetrics* VideoCandidate::release_engagement() {
  
  ::sonet::common::EngagementMetrics* temp = _impl_.engagement_;
  _impl_.engagement_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::common::EngagementMetrics* VideoCandidate::unsafe_arena_release_engagement() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoCandidate.engagement)
  
  ::sonet::common::EngagementMetrics* temp = _impl_.engagement_;
  _impl_.engagement_ = nullptr;
  return temp;
}
inline ::sonet::common::EngagementMetrics* VideoCandidate::_internal_mutable_engagement() {
  
  if (_impl_.engagement_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::common::EngagementMetrics>(GetArenaForAllocation());
    _impl_.engagement_ = p;
  }
  return _impl_.engagement_;
}
inline ::sonet::common::EngagementMetrics* VideoCandidate::mutable_engagement() {
  ::sonet::common::EngagementMetrics* _msg = _internal_mutable_engagement();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoCandidate.engagement)
  return _msg;
}
inline void VideoCandidate::set_allocated_engagement(::sonet::common::EngagementMetrics* engagement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.engagement_;
  }
  if (engagement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(engagement);
    if (message_arena != submessage_arena) {
      engagement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, engagement, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.engagement_ = engagement;
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoCandidate.engagement)
}

// .sonet.common.VideoFeatures features = 13;
inline bool VideoCandidate::_internal_has_features() const {
  return this != internal_default_instance() && _impl_.features_ != nullptr;
}
inline bool VideoCandidate::has_features() const {
  return _internal_has_features();
}
inline void VideoCandidate::clear_features() {
  if (GetArenaForAllocation() == nullptr && _impl_.features_ != nullptr) {
    delete _impl_.features_;
  }
  _impl_.features_ = nullptr;
}
inline const ::sonet::common::VideoFeatures& VideoCandidate::_internal_features() const {
  const ::sonet::common::VideoFeatures* p = _impl_.features_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::common::VideoFeatures&>(
      ::sonet::common::_VideoFeatures_default_instance_);
}
inline const ::sonet::common::VideoFeatures& VideoCandidate::features() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoCandidate.features)
  return _internal_features();
}
inline void VideoCandidate::unsafe_arena_set_allocated_features(
    ::sonet::common::VideoFeatures* features) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.features_);
  }
  _impl_.features_ = features;
  if (features) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.common.VideoCandidate.features)
}
inline ::sonet::common::VideoFeatures* VideoCandidate::release_features() {
  
  ::sonet::common::VideoFeatures* temp = _impl_.features_;
  _impl_.features_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::common::VideoFeatures* VideoCandidate::unsafe_arena_release_features() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoCandidate.features)
  
  ::sonet::common::VideoFeatures* temp = _impl_.features_;
  _impl_.features_ = nullptr;
  return temp;
}
inline ::sonet::common::VideoFeatures* VideoCandidate::_internal_mutable_features() {
  
  if (_impl_.features_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::common::VideoFeatures>(GetArenaForAllocation());
    _impl_.features_ = p;
  }
  return _impl_.features_;
}
inline ::sonet::common::VideoFeatures* VideoCandidate::mutable_features() {
  ::sonet::common::VideoFeatures* _msg = _internal_mutable_features();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoCandidate.features)
  return _msg;
}
inline void VideoCandidate::set_allocated_features(::sonet::common::VideoFeatures* features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.features_;
  }
  if (features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(features);
    if (message_arena != submessage_arena) {
      features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, features, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.features_ = features;
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoCandidate.features)
}

// string created_at = 14;
inline void VideoCandidate::clear_created_at() {
  _impl_.created_at_.ClearToEmpty();
}
inline const std::string& VideoCandidate::created_at() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoCandidate.created_at)
  return _internal_created_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoCandidate::set_created_at(ArgT0&& arg0, ArgT... args) {
 
 _impl_.created_at_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoCandidate.created_at)
}
inline std::string* VideoCandidate::mutable_created_at() {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoCandidate.created_at)
  return _s;
}
inline const std::string& VideoCandidate::_internal_created_at() const {
  return _impl_.created_at_.Get();
}
inline void VideoCandidate::_internal_set_created_at(const std::string& value) {
  
  _impl_.created_at_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoCandidate::_internal_mutable_created_at() {
  
  return _impl_.created_at_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoCandidate::release_created_at() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoCandidate.created_at)
  return _impl_.created_at_.Release();
}
inline void VideoCandidate::set_allocated_created_at(std::string* created_at) {
  if (created_at != nullptr) {
    
  } else {
    
  }
  _impl_.created_at_.SetAllocated(created_at, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.created_at_.IsDefault()) {
    _impl_.created_at_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoCandidate.created_at)
}

// string updated_at = 15;
inline void VideoCandidate::clear_updated_at() {
  _impl_.updated_at_.ClearToEmpty();
}
inline const std::string& VideoCandidate::updated_at() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoCandidate.updated_at)
  return _internal_updated_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoCandidate::set_updated_at(ArgT0&& arg0, ArgT... args) {
 
 _impl_.updated_at_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoCandidate.updated_at)
}
inline std::string* VideoCandidate::mutable_updated_at() {
  std::string* _s = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoCandidate.updated_at)
  return _s;
}
inline const std::string& VideoCandidate::_internal_updated_at() const {
  return _impl_.updated_at_.Get();
}
inline void VideoCandidate::_internal_set_updated_at(const std::string& value) {
  
  _impl_.updated_at_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoCandidate::_internal_mutable_updated_at() {
  
  return _impl_.updated_at_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoCandidate::release_updated_at() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoCandidate.updated_at)
  return _impl_.updated_at_.Release();
}
inline void VideoCandidate::set_allocated_updated_at(std::string* updated_at) {
  if (updated_at != nullptr) {
    
  } else {
    
  }
  _impl_.updated_at_.SetAllocated(updated_at, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.updated_at_.IsDefault()) {
    _impl_.updated_at_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoCandidate.updated_at)
}

// string cursor = 16;
inline void VideoCandidate::clear_cursor() {
  _impl_.cursor_.ClearToEmpty();
}
inline const std::string& VideoCandidate::cursor() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoCandidate.cursor)
  return _internal_cursor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoCandidate::set_cursor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cursor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoCandidate.cursor)
}
inline std::string* VideoCandidate::mutable_cursor() {
  std::string* _s = _internal_mutable_cursor();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoCandidate.cursor)
  return _s;
}
inline const std::string& VideoCandidate::_internal_cursor() const {
  return _impl_.cursor_.Get();
}
inline void VideoCandidate::_internal_set_cursor(const std::string& value) {
  
  _impl_.cursor_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoCandidate::_internal_mutable_cursor() {
  
  return _impl_.cursor_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoCandidate::release_cursor() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoCandidate.cursor)
  return _impl_.cursor_.Release();
}
inline void VideoCandidate::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  _impl_.cursor_.SetAllocated(cursor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cursor_.IsDefault()) {
    _impl_.cursor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoCandidate.cursor)
}

// -------------------------------------------------------------------

// VideoMetadata

// uint32 duration_ms = 1;
inline void VideoMetadata::clear_duration_ms() {
  _impl_.duration_ms_ = 0u;
}
inline uint32_t VideoMetadata::_internal_duration_ms() const {
  return _impl_.duration_ms_;
}
inline uint32_t VideoMetadata::duration_ms() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoMetadata.duration_ms)
  return _internal_duration_ms();
}
inline void VideoMetadata::_internal_set_duration_ms(uint32_t value) {
  
  _impl_.duration_ms_ = value;
}
inline void VideoMetadata::set_duration_ms(uint32_t value) {
  _internal_set_duration_ms(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoMetadata.duration_ms)
}

// string quality = 2;
inline void VideoMetadata::clear_quality() {
  _impl_.quality_.ClearToEmpty();
}
inline const std::string& VideoMetadata::quality() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoMetadata.quality)
  return _internal_quality();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoMetadata::set_quality(ArgT0&& arg0, ArgT... args) {
 
 _impl_.quality_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoMetadata.quality)
}
inline std::string* VideoMetadata::mutable_quality() {
  std::string* _s = _internal_mutable_quality();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoMetadata.quality)
  return _s;
}
inline const std::string& VideoMetadata::_internal_quality() const {
  return _impl_.quality_.Get();
}
inline void VideoMetadata::_internal_set_quality(const std::string& value) {
  
  _impl_.quality_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoMetadata::_internal_mutable_quality() {
  
  return _impl_.quality_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoMetadata::release_quality() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoMetadata.quality)
  return _impl_.quality_.Release();
}
inline void VideoMetadata::set_allocated_quality(std::string* quality) {
  if (quality != nullptr) {
    
  } else {
    
  }
  _impl_.quality_.SetAllocated(quality, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.quality_.IsDefault()) {
    _impl_.quality_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoMetadata.quality)
}

// string thumbnail_url = 3;
inline void VideoMetadata::clear_thumbnail_url() {
  _impl_.thumbnail_url_.ClearToEmpty();
}
inline const std::string& VideoMetadata::thumbnail_url() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoMetadata.thumbnail_url)
  return _internal_thumbnail_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoMetadata::set_thumbnail_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.thumbnail_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoMetadata.thumbnail_url)
}
inline std::string* VideoMetadata::mutable_thumbnail_url() {
  std::string* _s = _internal_mutable_thumbnail_url();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoMetadata.thumbnail_url)
  return _s;
}
inline const std::string& VideoMetadata::_internal_thumbnail_url() const {
  return _impl_.thumbnail_url_.Get();
}
inline void VideoMetadata::_internal_set_thumbnail_url(const std::string& value) {
  
  _impl_.thumbnail_url_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoMetadata::_internal_mutable_thumbnail_url() {
  
  return _impl_.thumbnail_url_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoMetadata::release_thumbnail_url() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoMetadata.thumbnail_url)
  return _impl_.thumbnail_url_.Release();
}
inline void VideoMetadata::set_allocated_thumbnail_url(std::string* thumbnail_url) {
  if (thumbnail_url != nullptr) {
    
  } else {
    
  }
  _impl_.thumbnail_url_.SetAllocated(thumbnail_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.thumbnail_url_.IsDefault()) {
    _impl_.thumbnail_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoMetadata.thumbnail_url)
}

// string playback_url = 4;
inline void VideoMetadata::clear_playback_url() {
  _impl_.playback_url_.ClearToEmpty();
}
inline const std::string& VideoMetadata::playback_url() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoMetadata.playback_url)
  return _internal_playback_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoMetadata::set_playback_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.playback_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoMetadata.playback_url)
}
inline std::string* VideoMetadata::mutable_playback_url() {
  std::string* _s = _internal_mutable_playback_url();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoMetadata.playback_url)
  return _s;
}
inline const std::string& VideoMetadata::_internal_playback_url() const {
  return _impl_.playback_url_.Get();
}
inline void VideoMetadata::_internal_set_playback_url(const std::string& value) {
  
  _impl_.playback_url_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoMetadata::_internal_mutable_playback_url() {
  
  return _impl_.playback_url_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoMetadata::release_playback_url() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoMetadata.playback_url)
  return _impl_.playback_url_.Release();
}
inline void VideoMetadata::set_allocated_playback_url(std::string* playback_url) {
  if (playback_url != nullptr) {
    
  } else {
    
  }
  _impl_.playback_url_.SetAllocated(playback_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.playback_url_.IsDefault()) {
    _impl_.playback_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoMetadata.playback_url)
}

// string resolution = 5;
inline void VideoMetadata::clear_resolution() {
  _impl_.resolution_.ClearToEmpty();
}
inline const std::string& VideoMetadata::resolution() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoMetadata.resolution)
  return _internal_resolution();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoMetadata::set_resolution(ArgT0&& arg0, ArgT... args) {
 
 _impl_.resolution_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoMetadata.resolution)
}
inline std::string* VideoMetadata::mutable_resolution() {
  std::string* _s = _internal_mutable_resolution();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoMetadata.resolution)
  return _s;
}
inline const std::string& VideoMetadata::_internal_resolution() const {
  return _impl_.resolution_.Get();
}
inline void VideoMetadata::_internal_set_resolution(const std::string& value) {
  
  _impl_.resolution_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoMetadata::_internal_mutable_resolution() {
  
  return _impl_.resolution_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoMetadata::release_resolution() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoMetadata.resolution)
  return _impl_.resolution_.Release();
}
inline void VideoMetadata::set_allocated_resolution(std::string* resolution) {
  if (resolution != nullptr) {
    
  } else {
    
  }
  _impl_.resolution_.SetAllocated(resolution, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resolution_.IsDefault()) {
    _impl_.resolution_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoMetadata.resolution)
}

// string aspect_ratio = 6;
inline void VideoMetadata::clear_aspect_ratio() {
  _impl_.aspect_ratio_.ClearToEmpty();
}
inline const std::string& VideoMetadata::aspect_ratio() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoMetadata.aspect_ratio)
  return _internal_aspect_ratio();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoMetadata::set_aspect_ratio(ArgT0&& arg0, ArgT... args) {
 
 _impl_.aspect_ratio_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoMetadata.aspect_ratio)
}
inline std::string* VideoMetadata::mutable_aspect_ratio() {
  std::string* _s = _internal_mutable_aspect_ratio();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoMetadata.aspect_ratio)
  return _s;
}
inline const std::string& VideoMetadata::_internal_aspect_ratio() const {
  return _impl_.aspect_ratio_.Get();
}
inline void VideoMetadata::_internal_set_aspect_ratio(const std::string& value) {
  
  _impl_.aspect_ratio_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoMetadata::_internal_mutable_aspect_ratio() {
  
  return _impl_.aspect_ratio_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoMetadata::release_aspect_ratio() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoMetadata.aspect_ratio)
  return _impl_.aspect_ratio_.Release();
}
inline void VideoMetadata::set_allocated_aspect_ratio(std::string* aspect_ratio) {
  if (aspect_ratio != nullptr) {
    
  } else {
    
  }
  _impl_.aspect_ratio_.SetAllocated(aspect_ratio, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.aspect_ratio_.IsDefault()) {
    _impl_.aspect_ratio_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoMetadata.aspect_ratio)
}

// uint64 file_size_bytes = 7;
inline void VideoMetadata::clear_file_size_bytes() {
  _impl_.file_size_bytes_ = uint64_t{0u};
}
inline uint64_t VideoMetadata::_internal_file_size_bytes() const {
  return _impl_.file_size_bytes_;
}
inline uint64_t VideoMetadata::file_size_bytes() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoMetadata.file_size_bytes)
  return _internal_file_size_bytes();
}
inline void VideoMetadata::_internal_set_file_size_bytes(uint64_t value) {
  
  _impl_.file_size_bytes_ = value;
}
inline void VideoMetadata::set_file_size_bytes(uint64_t value) {
  _internal_set_file_size_bytes(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoMetadata.file_size_bytes)
}

// string encoding = 8;
inline void VideoMetadata::clear_encoding() {
  _impl_.encoding_.ClearToEmpty();
}
inline const std::string& VideoMetadata::encoding() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoMetadata.encoding)
  return _internal_encoding();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoMetadata::set_encoding(ArgT0&& arg0, ArgT... args) {
 
 _impl_.encoding_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoMetadata.encoding)
}
inline std::string* VideoMetadata::mutable_encoding() {
  std::string* _s = _internal_mutable_encoding();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoMetadata.encoding)
  return _s;
}
inline const std::string& VideoMetadata::_internal_encoding() const {
  return _impl_.encoding_.Get();
}
inline void VideoMetadata::_internal_set_encoding(const std::string& value) {
  
  _impl_.encoding_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoMetadata::_internal_mutable_encoding() {
  
  return _impl_.encoding_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoMetadata::release_encoding() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoMetadata.encoding)
  return _impl_.encoding_.Release();
}
inline void VideoMetadata::set_allocated_encoding(std::string* encoding) {
  if (encoding != nullptr) {
    
  } else {
    
  }
  _impl_.encoding_.SetAllocated(encoding, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.encoding_.IsDefault()) {
    _impl_.encoding_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoMetadata.encoding)
}

// uint32 bitrate_kbps = 9;
inline void VideoMetadata::clear_bitrate_kbps() {
  _impl_.bitrate_kbps_ = 0u;
}
inline uint32_t VideoMetadata::_internal_bitrate_kbps() const {
  return _impl_.bitrate_kbps_;
}
inline uint32_t VideoMetadata::bitrate_kbps() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoMetadata.bitrate_kbps)
  return _internal_bitrate_kbps();
}
inline void VideoMetadata::_internal_set_bitrate_kbps(uint32_t value) {
  
  _impl_.bitrate_kbps_ = value;
}
inline void VideoMetadata::set_bitrate_kbps(uint32_t value) {
  _internal_set_bitrate_kbps(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoMetadata.bitrate_kbps)
}

// uint32 frame_rate = 10;
inline void VideoMetadata::clear_frame_rate() {
  _impl_.frame_rate_ = 0u;
}
inline uint32_t VideoMetadata::_internal_frame_rate() const {
  return _impl_.frame_rate_;
}
inline uint32_t VideoMetadata::frame_rate() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoMetadata.frame_rate)
  return _internal_frame_rate();
}
inline void VideoMetadata::_internal_set_frame_rate(uint32_t value) {
  
  _impl_.frame_rate_ = value;
}
inline void VideoMetadata::set_frame_rate(uint32_t value) {
  _internal_set_frame_rate(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoMetadata.frame_rate)
}

// -------------------------------------------------------------------

// VideoFeatures

// double brightness = 1;
inline void VideoFeatures::clear_brightness() {
  _impl_.brightness_ = 0;
}
inline double VideoFeatures::_internal_brightness() const {
  return _impl_.brightness_;
}
inline double VideoFeatures::brightness() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoFeatures.brightness)
  return _internal_brightness();
}
inline void VideoFeatures::_internal_set_brightness(double value) {
  
  _impl_.brightness_ = value;
}
inline void VideoFeatures::set_brightness(double value) {
  _internal_set_brightness(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoFeatures.brightness)
}

// double contrast = 2;
inline void VideoFeatures::clear_contrast() {
  _impl_.contrast_ = 0;
}
inline double VideoFeatures::_internal_contrast() const {
  return _impl_.contrast_;
}
inline double VideoFeatures::contrast() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoFeatures.contrast)
  return _internal_contrast();
}
inline void VideoFeatures::_internal_set_contrast(double value) {
  
  _impl_.contrast_ = value;
}
inline void VideoFeatures::set_contrast(double value) {
  _internal_set_contrast(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoFeatures.contrast)
}

// double saturation = 3;
inline void VideoFeatures::clear_saturation() {
  _impl_.saturation_ = 0;
}
inline double VideoFeatures::_internal_saturation() const {
  return _impl_.saturation_;
}
inline double VideoFeatures::saturation() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoFeatures.saturation)
  return _internal_saturation();
}
inline void VideoFeatures::_internal_set_saturation(double value) {
  
  _impl_.saturation_ = value;
}
inline void VideoFeatures::set_saturation(double value) {
  _internal_set_saturation(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoFeatures.saturation)
}

// double motion_intensity = 4;
inline void VideoFeatures::clear_motion_intensity() {
  _impl_.motion_intensity_ = 0;
}
inline double VideoFeatures::_internal_motion_intensity() const {
  return _impl_.motion_intensity_;
}
inline double VideoFeatures::motion_intensity() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoFeatures.motion_intensity)
  return _internal_motion_intensity();
}
inline void VideoFeatures::_internal_set_motion_intensity(double value) {
  
  _impl_.motion_intensity_ = value;
}
inline void VideoFeatures::set_motion_intensity(double value) {
  _internal_set_motion_intensity(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoFeatures.motion_intensity)
}

// double scene_complexity = 5;
inline void VideoFeatures::clear_scene_complexity() {
  _impl_.scene_complexity_ = 0;
}
inline double VideoFeatures::_internal_scene_complexity() const {
  return _impl_.scene_complexity_;
}
inline double VideoFeatures::scene_complexity() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoFeatures.scene_complexity)
  return _internal_scene_complexity();
}
inline void VideoFeatures::_internal_set_scene_complexity(double value) {
  
  _impl_.scene_complexity_ = value;
}
inline void VideoFeatures::set_scene_complexity(double value) {
  _internal_set_scene_complexity(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoFeatures.scene_complexity)
}

// double audio_quality = 6;
inline void VideoFeatures::clear_audio_quality() {
  _impl_.audio_quality_ = 0;
}
inline double VideoFeatures::_internal_audio_quality() const {
  return _impl_.audio_quality_;
}
inline double VideoFeatures::audio_quality() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoFeatures.audio_quality)
  return _internal_audio_quality();
}
inline void VideoFeatures::_internal_set_audio_quality(double value) {
  
  _impl_.audio_quality_ = value;
}
inline void VideoFeatures::set_audio_quality(double value) {
  _internal_set_audio_quality(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoFeatures.audio_quality)
}

// bool background_music = 7;
inline void VideoFeatures::clear_background_music() {
  _impl_.background_music_ = false;
}
inline bool VideoFeatures::_internal_background_music() const {
  return _impl_.background_music_;
}
inline bool VideoFeatures::background_music() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoFeatures.background_music)
  return _internal_background_music();
}
inline void VideoFeatures::_internal_set_background_music(bool value) {
  
  _impl_.background_music_ = value;
}
inline void VideoFeatures::set_background_music(bool value) {
  _internal_set_background_music(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoFeatures.background_music)
}

// double speech_clarity = 8;
inline void VideoFeatures::clear_speech_clarity() {
  _impl_.speech_clarity_ = 0;
}
inline double VideoFeatures::_internal_speech_clarity() const {
  return _impl_.speech_clarity_;
}
inline double VideoFeatures::speech_clarity() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoFeatures.speech_clarity)
  return _internal_speech_clarity();
}
inline void VideoFeatures::_internal_set_speech_clarity(double value) {
  
  _impl_.speech_clarity_ = value;
}
inline void VideoFeatures::set_speech_clarity(double value) {
  _internal_set_speech_clarity(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoFeatures.speech_clarity)
}

// double color_vibrancy = 9;
inline void VideoFeatures::clear_color_vibrancy() {
  _impl_.color_vibrancy_ = 0;
}
inline double VideoFeatures::_internal_color_vibrancy() const {
  return _impl_.color_vibrancy_;
}
inline double VideoFeatures::color_vibrancy() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoFeatures.color_vibrancy)
  return _internal_color_vibrancy();
}
inline void VideoFeatures::_internal_set_color_vibrancy(double value) {
  
  _impl_.color_vibrancy_ = value;
}
inline void VideoFeatures::set_color_vibrancy(double value) {
  _internal_set_color_vibrancy(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoFeatures.color_vibrancy)
}

// double visual_appeal = 10;
inline void VideoFeatures::clear_visual_appeal() {
  _impl_.visual_appeal_ = 0;
}
inline double VideoFeatures::_internal_visual_appeal() const {
  return _impl_.visual_appeal_;
}
inline double VideoFeatures::visual_appeal() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoFeatures.visual_appeal)
  return _internal_visual_appeal();
}
inline void VideoFeatures::_internal_set_visual_appeal(double value) {
  
  _impl_.visual_appeal_ = value;
}
inline void VideoFeatures::set_visual_appeal(double value) {
  _internal_set_visual_appeal(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoFeatures.visual_appeal)
}

// -------------------------------------------------------------------

// EngagementMetrics

// uint32 view_count = 1;
inline void EngagementMetrics::clear_view_count() {
  _impl_.view_count_ = 0u;
}
inline uint32_t EngagementMetrics::_internal_view_count() const {
  return _impl_.view_count_;
}
inline uint32_t EngagementMetrics::view_count() const {
  // @@protoc_insertion_point(field_get:sonet.common.EngagementMetrics.view_count)
  return _internal_view_count();
}
inline void EngagementMetrics::_internal_set_view_count(uint32_t value) {
  
  _impl_.view_count_ = value;
}
inline void EngagementMetrics::set_view_count(uint32_t value) {
  _internal_set_view_count(value);
  // @@protoc_insertion_point(field_set:sonet.common.EngagementMetrics.view_count)
}

// uint32 unique_viewers = 2;
inline void EngagementMetrics::clear_unique_viewers() {
  _impl_.unique_viewers_ = 0u;
}
inline uint32_t EngagementMetrics::_internal_unique_viewers() const {
  return _impl_.unique_viewers_;
}
inline uint32_t EngagementMetrics::unique_viewers() const {
  // @@protoc_insertion_point(field_get:sonet.common.EngagementMetrics.unique_viewers)
  return _internal_unique_viewers();
}
inline void EngagementMetrics::_internal_set_unique_viewers(uint32_t value) {
  
  _impl_.unique_viewers_ = value;
}
inline void EngagementMetrics::set_unique_viewers(uint32_t value) {
  _internal_set_unique_viewers(value);
  // @@protoc_insertion_point(field_set:sonet.common.EngagementMetrics.unique_viewers)
}

// uint32 like_count = 3;
inline void EngagementMetrics::clear_like_count() {
  _impl_.like_count_ = 0u;
}
inline uint32_t EngagementMetrics::_internal_like_count() const {
  return _impl_.like_count_;
}
inline uint32_t EngagementMetrics::like_count() const {
  // @@protoc_insertion_point(field_get:sonet.common.EngagementMetrics.like_count)
  return _internal_like_count();
}
inline void EngagementMetrics::_internal_set_like_count(uint32_t value) {
  
  _impl_.like_count_ = value;
}
inline void EngagementMetrics::set_like_count(uint32_t value) {
  _internal_set_like_count(value);
  // @@protoc_insertion_point(field_set:sonet.common.EngagementMetrics.like_count)
}

// uint32 renote_count = 4;
inline void EngagementMetrics::clear_renote_count() {
  _impl_.renote_count_ = 0u;
}
inline uint32_t EngagementMetrics::_internal_renote_count() const {
  return _impl_.renote_count_;
}
inline uint32_t EngagementMetrics::renote_count() const {
  // @@protoc_insertion_point(field_get:sonet.common.EngagementMetrics.renote_count)
  return _internal_renote_count();
}
inline void EngagementMetrics::_internal_set_renote_count(uint32_t value) {
  
  _impl_.renote_count_ = value;
}
inline void EngagementMetrics::set_renote_count(uint32_t value) {
  _internal_set_renote_count(value);
  // @@protoc_insertion_point(field_set:sonet.common.EngagementMetrics.renote_count)
}

// uint32 reply_count = 5;
inline void EngagementMetrics::clear_reply_count() {
  _impl_.reply_count_ = 0u;
}
inline uint32_t EngagementMetrics::_internal_reply_count() const {
  return _impl_.reply_count_;
}
inline uint32_t EngagementMetrics::reply_count() const {
  // @@protoc_insertion_point(field_get:sonet.common.EngagementMetrics.reply_count)
  return _internal_reply_count();
}
inline void EngagementMetrics::_internal_set_reply_count(uint32_t value) {
  
  _impl_.reply_count_ = value;
}
inline void EngagementMetrics::set_reply_count(uint32_t value) {
  _internal_set_reply_count(value);
  // @@protoc_insertion_point(field_set:sonet.common.EngagementMetrics.reply_count)
}

// uint32 share_count = 6;
inline void EngagementMetrics::clear_share_count() {
  _impl_.share_count_ = 0u;
}
inline uint32_t EngagementMetrics::_internal_share_count() const {
  return _impl_.share_count_;
}
inline uint32_t EngagementMetrics::share_count() const {
  // @@protoc_insertion_point(field_get:sonet.common.EngagementMetrics.share_count)
  return _internal_share_count();
}
inline void EngagementMetrics::_internal_set_share_count(uint32_t value) {
  
  _impl_.share_count_ = value;
}
inline void EngagementMetrics::set_share_count(uint32_t value) {
  _internal_set_share_count(value);
  // @@protoc_insertion_point(field_set:sonet.common.EngagementMetrics.share_count)
}

// uint32 bookmark_count = 7;
inline void EngagementMetrics::clear_bookmark_count() {
  _impl_.bookmark_count_ = 0u;
}
inline uint32_t EngagementMetrics::_internal_bookmark_count() const {
  return _impl_.bookmark_count_;
}
inline uint32_t EngagementMetrics::bookmark_count() const {
  // @@protoc_insertion_point(field_get:sonet.common.EngagementMetrics.bookmark_count)
  return _internal_bookmark_count();
}
inline void EngagementMetrics::_internal_set_bookmark_count(uint32_t value) {
  
  _impl_.bookmark_count_ = value;
}
inline void EngagementMetrics::set_bookmark_count(uint32_t value) {
  _internal_set_bookmark_count(value);
  // @@protoc_insertion_point(field_set:sonet.common.EngagementMetrics.bookmark_count)
}

// double average_watch_time_ms = 8;
inline void EngagementMetrics::clear_average_watch_time_ms() {
  _impl_.average_watch_time_ms_ = 0;
}
inline double EngagementMetrics::_internal_average_watch_time_ms() const {
  return _impl_.average_watch_time_ms_;
}
inline double EngagementMetrics::average_watch_time_ms() const {
  // @@protoc_insertion_point(field_get:sonet.common.EngagementMetrics.average_watch_time_ms)
  return _internal_average_watch_time_ms();
}
inline void EngagementMetrics::_internal_set_average_watch_time_ms(double value) {
  
  _impl_.average_watch_time_ms_ = value;
}
inline void EngagementMetrics::set_average_watch_time_ms(double value) {
  _internal_set_average_watch_time_ms(value);
  // @@protoc_insertion_point(field_set:sonet.common.EngagementMetrics.average_watch_time_ms)
}

// double completion_rate = 9;
inline void EngagementMetrics::clear_completion_rate() {
  _impl_.completion_rate_ = 0;
}
inline double EngagementMetrics::_internal_completion_rate() const {
  return _impl_.completion_rate_;
}
inline double EngagementMetrics::completion_rate() const {
  // @@protoc_insertion_point(field_get:sonet.common.EngagementMetrics.completion_rate)
  return _internal_completion_rate();
}
inline void EngagementMetrics::_internal_set_completion_rate(double value) {
  
  _impl_.completion_rate_ = value;
}
inline void EngagementMetrics::set_completion_rate(double value) {
  _internal_set_completion_rate(value);
  // @@protoc_insertion_point(field_set:sonet.common.EngagementMetrics.completion_rate)
}

// double skip_rate = 10;
inline void EngagementMetrics::clear_skip_rate() {
  _impl_.skip_rate_ = 0;
}
inline double EngagementMetrics::_internal_skip_rate() const {
  return _impl_.skip_rate_;
}
inline double EngagementMetrics::skip_rate() const {
  // @@protoc_insertion_point(field_get:sonet.common.EngagementMetrics.skip_rate)
  return _internal_skip_rate();
}
inline void EngagementMetrics::_internal_set_skip_rate(double value) {
  
  _impl_.skip_rate_ = value;
}
inline void EngagementMetrics::set_skip_rate(double value) {
  _internal_set_skip_rate(value);
  // @@protoc_insertion_point(field_set:sonet.common.EngagementMetrics.skip_rate)
}

// double engagement_score = 11;
inline void EngagementMetrics::clear_engagement_score() {
  _impl_.engagement_score_ = 0;
}
inline double EngagementMetrics::_internal_engagement_score() const {
  return _impl_.engagement_score_;
}
inline double EngagementMetrics::engagement_score() const {
  // @@protoc_insertion_point(field_get:sonet.common.EngagementMetrics.engagement_score)
  return _internal_engagement_score();
}
inline void EngagementMetrics::_internal_set_engagement_score(double value) {
  
  _impl_.engagement_score_ = value;
}
inline void EngagementMetrics::set_engagement_score(double value) {
  _internal_set_engagement_score(value);
  // @@protoc_insertion_point(field_set:sonet.common.EngagementMetrics.engagement_score)
}

// double viral_score = 12;
inline void EngagementMetrics::clear_viral_score() {
  _impl_.viral_score_ = 0;
}
inline double EngagementMetrics::_internal_viral_score() const {
  return _impl_.viral_score_;
}
inline double EngagementMetrics::viral_score() const {
  // @@protoc_insertion_point(field_get:sonet.common.EngagementMetrics.viral_score)
  return _internal_viral_score();
}
inline void EngagementMetrics::_internal_set_viral_score(double value) {
  
  _impl_.viral_score_ = value;
}
inline void EngagementMetrics::set_viral_score(double value) {
  _internal_set_viral_score(value);
  // @@protoc_insertion_point(field_set:sonet.common.EngagementMetrics.viral_score)
}

// double retention_score = 13;
inline void EngagementMetrics::clear_retention_score() {
  _impl_.retention_score_ = 0;
}
inline double EngagementMetrics::_internal_retention_score() const {
  return _impl_.retention_score_;
}
inline double EngagementMetrics::retention_score() const {
  // @@protoc_insertion_point(field_get:sonet.common.EngagementMetrics.retention_score)
  return _internal_retention_score();
}
inline void EngagementMetrics::_internal_set_retention_score(double value) {
  
  _impl_.retention_score_ = value;
}
inline void EngagementMetrics::set_retention_score(double value) {
  _internal_set_retention_score(value);
  // @@protoc_insertion_point(field_set:sonet.common.EngagementMetrics.retention_score)
}

// -------------------------------------------------------------------

// VideoQueryParams

// uint32 limit = 1;
inline void VideoQueryParams::clear_limit() {
  _impl_.limit_ = 0u;
}
inline uint32_t VideoQueryParams::_internal_limit() const {
  return _impl_.limit_;
}
inline uint32_t VideoQueryParams::limit() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoQueryParams.limit)
  return _internal_limit();
}
inline void VideoQueryParams::_internal_set_limit(uint32_t value) {
  
  _impl_.limit_ = value;
}
inline void VideoQueryParams::set_limit(uint32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoQueryParams.limit)
}

// uint32 offset = 2;
inline void VideoQueryParams::clear_offset() {
  _impl_.offset_ = 0u;
}
inline uint32_t VideoQueryParams::_internal_offset() const {
  return _impl_.offset_;
}
inline uint32_t VideoQueryParams::offset() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoQueryParams.offset)
  return _internal_offset();
}
inline void VideoQueryParams::_internal_set_offset(uint32_t value) {
  
  _impl_.offset_ = value;
}
inline void VideoQueryParams::set_offset(uint32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoQueryParams.offset)
}

// string cursor = 3;
inline void VideoQueryParams::clear_cursor() {
  _impl_.cursor_.ClearToEmpty();
}
inline const std::string& VideoQueryParams::cursor() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoQueryParams.cursor)
  return _internal_cursor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoQueryParams::set_cursor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cursor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoQueryParams.cursor)
}
inline std::string* VideoQueryParams::mutable_cursor() {
  std::string* _s = _internal_mutable_cursor();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoQueryParams.cursor)
  return _s;
}
inline const std::string& VideoQueryParams::_internal_cursor() const {
  return _impl_.cursor_.Get();
}
inline void VideoQueryParams::_internal_set_cursor(const std::string& value) {
  
  _impl_.cursor_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoQueryParams::_internal_mutable_cursor() {
  
  return _impl_.cursor_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoQueryParams::release_cursor() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoQueryParams.cursor)
  return _impl_.cursor_.Release();
}
inline void VideoQueryParams::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  _impl_.cursor_.SetAllocated(cursor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cursor_.IsDefault()) {
    _impl_.cursor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoQueryParams.cursor)
}

// repeated string categories = 4;
inline int VideoQueryParams::_internal_categories_size() const {
  return _impl_.categories_.size();
}
inline int VideoQueryParams::categories_size() const {
  return _internal_categories_size();
}
inline void VideoQueryParams::clear_categories() {
  _impl_.categories_.Clear();
}
inline std::string* VideoQueryParams::add_categories() {
  std::string* _s = _internal_add_categories();
  // @@protoc_insertion_point(field_add_mutable:sonet.common.VideoQueryParams.categories)
  return _s;
}
inline const std::string& VideoQueryParams::_internal_categories(int index) const {
  return _impl_.categories_.Get(index);
}
inline const std::string& VideoQueryParams::categories(int index) const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoQueryParams.categories)
  return _internal_categories(index);
}
inline std::string* VideoQueryParams::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoQueryParams.categories)
  return _impl_.categories_.Mutable(index);
}
inline void VideoQueryParams::set_categories(int index, const std::string& value) {
  _impl_.categories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoQueryParams.categories)
}
inline void VideoQueryParams::set_categories(int index, std::string&& value) {
  _impl_.categories_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sonet.common.VideoQueryParams.categories)
}
inline void VideoQueryParams::set_categories(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.categories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sonet.common.VideoQueryParams.categories)
}
inline void VideoQueryParams::set_categories(int index, const char* value, size_t size) {
  _impl_.categories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sonet.common.VideoQueryParams.categories)
}
inline std::string* VideoQueryParams::_internal_add_categories() {
  return _impl_.categories_.Add();
}
inline void VideoQueryParams::add_categories(const std::string& value) {
  _impl_.categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sonet.common.VideoQueryParams.categories)
}
inline void VideoQueryParams::add_categories(std::string&& value) {
  _impl_.categories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sonet.common.VideoQueryParams.categories)
}
inline void VideoQueryParams::add_categories(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sonet.common.VideoQueryParams.categories)
}
inline void VideoQueryParams::add_categories(const char* value, size_t size) {
  _impl_.categories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sonet.common.VideoQueryParams.categories)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VideoQueryParams::categories() const {
  // @@protoc_insertion_point(field_list:sonet.common.VideoQueryParams.categories)
  return _impl_.categories_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VideoQueryParams::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:sonet.common.VideoQueryParams.categories)
  return &_impl_.categories_;
}

// repeated string exclude_categories = 5;
inline int VideoQueryParams::_internal_exclude_categories_size() const {
  return _impl_.exclude_categories_.size();
}
inline int VideoQueryParams::exclude_categories_size() const {
  return _internal_exclude_categories_size();
}
inline void VideoQueryParams::clear_exclude_categories() {
  _impl_.exclude_categories_.Clear();
}
inline std::string* VideoQueryParams::add_exclude_categories() {
  std::string* _s = _internal_add_exclude_categories();
  // @@protoc_insertion_point(field_add_mutable:sonet.common.VideoQueryParams.exclude_categories)
  return _s;
}
inline const std::string& VideoQueryParams::_internal_exclude_categories(int index) const {
  return _impl_.exclude_categories_.Get(index);
}
inline const std::string& VideoQueryParams::exclude_categories(int index) const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoQueryParams.exclude_categories)
  return _internal_exclude_categories(index);
}
inline std::string* VideoQueryParams::mutable_exclude_categories(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoQueryParams.exclude_categories)
  return _impl_.exclude_categories_.Mutable(index);
}
inline void VideoQueryParams::set_exclude_categories(int index, const std::string& value) {
  _impl_.exclude_categories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoQueryParams.exclude_categories)
}
inline void VideoQueryParams::set_exclude_categories(int index, std::string&& value) {
  _impl_.exclude_categories_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sonet.common.VideoQueryParams.exclude_categories)
}
inline void VideoQueryParams::set_exclude_categories(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.exclude_categories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sonet.common.VideoQueryParams.exclude_categories)
}
inline void VideoQueryParams::set_exclude_categories(int index, const char* value, size_t size) {
  _impl_.exclude_categories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sonet.common.VideoQueryParams.exclude_categories)
}
inline std::string* VideoQueryParams::_internal_add_exclude_categories() {
  return _impl_.exclude_categories_.Add();
}
inline void VideoQueryParams::add_exclude_categories(const std::string& value) {
  _impl_.exclude_categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sonet.common.VideoQueryParams.exclude_categories)
}
inline void VideoQueryParams::add_exclude_categories(std::string&& value) {
  _impl_.exclude_categories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sonet.common.VideoQueryParams.exclude_categories)
}
inline void VideoQueryParams::add_exclude_categories(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.exclude_categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sonet.common.VideoQueryParams.exclude_categories)
}
inline void VideoQueryParams::add_exclude_categories(const char* value, size_t size) {
  _impl_.exclude_categories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sonet.common.VideoQueryParams.exclude_categories)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VideoQueryParams::exclude_categories() const {
  // @@protoc_insertion_point(field_list:sonet.common.VideoQueryParams.exclude_categories)
  return _impl_.exclude_categories_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VideoQueryParams::mutable_exclude_categories() {
  // @@protoc_insertion_point(field_mutable_list:sonet.common.VideoQueryParams.exclude_categories)
  return &_impl_.exclude_categories_;
}

// repeated string tags = 6;
inline int VideoQueryParams::_internal_tags_size() const {
  return _impl_.tags_.size();
}
inline int VideoQueryParams::tags_size() const {
  return _internal_tags_size();
}
inline void VideoQueryParams::clear_tags() {
  _impl_.tags_.Clear();
}
inline std::string* VideoQueryParams::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:sonet.common.VideoQueryParams.tags)
  return _s;
}
inline const std::string& VideoQueryParams::_internal_tags(int index) const {
  return _impl_.tags_.Get(index);
}
inline const std::string& VideoQueryParams::tags(int index) const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoQueryParams.tags)
  return _internal_tags(index);
}
inline std::string* VideoQueryParams::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoQueryParams.tags)
  return _impl_.tags_.Mutable(index);
}
inline void VideoQueryParams::set_tags(int index, const std::string& value) {
  _impl_.tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoQueryParams.tags)
}
inline void VideoQueryParams::set_tags(int index, std::string&& value) {
  _impl_.tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sonet.common.VideoQueryParams.tags)
}
inline void VideoQueryParams::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sonet.common.VideoQueryParams.tags)
}
inline void VideoQueryParams::set_tags(int index, const char* value, size_t size) {
  _impl_.tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sonet.common.VideoQueryParams.tags)
}
inline std::string* VideoQueryParams::_internal_add_tags() {
  return _impl_.tags_.Add();
}
inline void VideoQueryParams::add_tags(const std::string& value) {
  _impl_.tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sonet.common.VideoQueryParams.tags)
}
inline void VideoQueryParams::add_tags(std::string&& value) {
  _impl_.tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sonet.common.VideoQueryParams.tags)
}
inline void VideoQueryParams::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sonet.common.VideoQueryParams.tags)
}
inline void VideoQueryParams::add_tags(const char* value, size_t size) {
  _impl_.tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sonet.common.VideoQueryParams.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VideoQueryParams::tags() const {
  // @@protoc_insertion_point(field_list:sonet.common.VideoQueryParams.tags)
  return _impl_.tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VideoQueryParams::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:sonet.common.VideoQueryParams.tags)
  return &_impl_.tags_;
}

// repeated string exclude_tags = 7;
inline int VideoQueryParams::_internal_exclude_tags_size() const {
  return _impl_.exclude_tags_.size();
}
inline int VideoQueryParams::exclude_tags_size() const {
  return _internal_exclude_tags_size();
}
inline void VideoQueryParams::clear_exclude_tags() {
  _impl_.exclude_tags_.Clear();
}
inline std::string* VideoQueryParams::add_exclude_tags() {
  std::string* _s = _internal_add_exclude_tags();
  // @@protoc_insertion_point(field_add_mutable:sonet.common.VideoQueryParams.exclude_tags)
  return _s;
}
inline const std::string& VideoQueryParams::_internal_exclude_tags(int index) const {
  return _impl_.exclude_tags_.Get(index);
}
inline const std::string& VideoQueryParams::exclude_tags(int index) const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoQueryParams.exclude_tags)
  return _internal_exclude_tags(index);
}
inline std::string* VideoQueryParams::mutable_exclude_tags(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoQueryParams.exclude_tags)
  return _impl_.exclude_tags_.Mutable(index);
}
inline void VideoQueryParams::set_exclude_tags(int index, const std::string& value) {
  _impl_.exclude_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoQueryParams.exclude_tags)
}
inline void VideoQueryParams::set_exclude_tags(int index, std::string&& value) {
  _impl_.exclude_tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sonet.common.VideoQueryParams.exclude_tags)
}
inline void VideoQueryParams::set_exclude_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.exclude_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sonet.common.VideoQueryParams.exclude_tags)
}
inline void VideoQueryParams::set_exclude_tags(int index, const char* value, size_t size) {
  _impl_.exclude_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sonet.common.VideoQueryParams.exclude_tags)
}
inline std::string* VideoQueryParams::_internal_add_exclude_tags() {
  return _impl_.exclude_tags_.Add();
}
inline void VideoQueryParams::add_exclude_tags(const std::string& value) {
  _impl_.exclude_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sonet.common.VideoQueryParams.exclude_tags)
}
inline void VideoQueryParams::add_exclude_tags(std::string&& value) {
  _impl_.exclude_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sonet.common.VideoQueryParams.exclude_tags)
}
inline void VideoQueryParams::add_exclude_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.exclude_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sonet.common.VideoQueryParams.exclude_tags)
}
inline void VideoQueryParams::add_exclude_tags(const char* value, size_t size) {
  _impl_.exclude_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sonet.common.VideoQueryParams.exclude_tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VideoQueryParams::exclude_tags() const {
  // @@protoc_insertion_point(field_list:sonet.common.VideoQueryParams.exclude_tags)
  return _impl_.exclude_tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VideoQueryParams::mutable_exclude_tags() {
  // @@protoc_insertion_point(field_mutable_list:sonet.common.VideoQueryParams.exclude_tags)
  return &_impl_.exclude_tags_;
}

// uint32 min_duration_ms = 8;
inline void VideoQueryParams::clear_min_duration_ms() {
  _impl_.min_duration_ms_ = 0u;
}
inline uint32_t VideoQueryParams::_internal_min_duration_ms() const {
  return _impl_.min_duration_ms_;
}
inline uint32_t VideoQueryParams::min_duration_ms() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoQueryParams.min_duration_ms)
  return _internal_min_duration_ms();
}
inline void VideoQueryParams::_internal_set_min_duration_ms(uint32_t value) {
  
  _impl_.min_duration_ms_ = value;
}
inline void VideoQueryParams::set_min_duration_ms(uint32_t value) {
  _internal_set_min_duration_ms(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoQueryParams.min_duration_ms)
}

// uint32 max_duration_ms = 9;
inline void VideoQueryParams::clear_max_duration_ms() {
  _impl_.max_duration_ms_ = 0u;
}
inline uint32_t VideoQueryParams::_internal_max_duration_ms() const {
  return _impl_.max_duration_ms_;
}
inline uint32_t VideoQueryParams::max_duration_ms() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoQueryParams.max_duration_ms)
  return _internal_max_duration_ms();
}
inline void VideoQueryParams::_internal_set_max_duration_ms(uint32_t value) {
  
  _impl_.max_duration_ms_ = value;
}
inline void VideoQueryParams::set_max_duration_ms(uint32_t value) {
  _internal_set_max_duration_ms(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoQueryParams.max_duration_ms)
}

// string quality_preference = 10;
inline void VideoQueryParams::clear_quality_preference() {
  _impl_.quality_preference_.ClearToEmpty();
}
inline const std::string& VideoQueryParams::quality_preference() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoQueryParams.quality_preference)
  return _internal_quality_preference();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoQueryParams::set_quality_preference(ArgT0&& arg0, ArgT... args) {
 
 _impl_.quality_preference_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoQueryParams.quality_preference)
}
inline std::string* VideoQueryParams::mutable_quality_preference() {
  std::string* _s = _internal_mutable_quality_preference();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoQueryParams.quality_preference)
  return _s;
}
inline const std::string& VideoQueryParams::_internal_quality_preference() const {
  return _impl_.quality_preference_.Get();
}
inline void VideoQueryParams::_internal_set_quality_preference(const std::string& value) {
  
  _impl_.quality_preference_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoQueryParams::_internal_mutable_quality_preference() {
  
  return _impl_.quality_preference_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoQueryParams::release_quality_preference() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoQueryParams.quality_preference)
  return _impl_.quality_preference_.Release();
}
inline void VideoQueryParams::set_allocated_quality_preference(std::string* quality_preference) {
  if (quality_preference != nullptr) {
    
  } else {
    
  }
  _impl_.quality_preference_.SetAllocated(quality_preference, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.quality_preference_.IsDefault()) {
    _impl_.quality_preference_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoQueryParams.quality_preference)
}

// string creator_id = 11;
inline void VideoQueryParams::clear_creator_id() {
  _impl_.creator_id_.ClearToEmpty();
}
inline const std::string& VideoQueryParams::creator_id() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoQueryParams.creator_id)
  return _internal_creator_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoQueryParams::set_creator_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.creator_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoQueryParams.creator_id)
}
inline std::string* VideoQueryParams::mutable_creator_id() {
  std::string* _s = _internal_mutable_creator_id();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoQueryParams.creator_id)
  return _s;
}
inline const std::string& VideoQueryParams::_internal_creator_id() const {
  return _impl_.creator_id_.Get();
}
inline void VideoQueryParams::_internal_set_creator_id(const std::string& value) {
  
  _impl_.creator_id_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoQueryParams::_internal_mutable_creator_id() {
  
  return _impl_.creator_id_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoQueryParams::release_creator_id() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoQueryParams.creator_id)
  return _impl_.creator_id_.Release();
}
inline void VideoQueryParams::set_allocated_creator_id(std::string* creator_id) {
  if (creator_id != nullptr) {
    
  } else {
    
  }
  _impl_.creator_id_.SetAllocated(creator_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creator_id_.IsDefault()) {
    _impl_.creator_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoQueryParams.creator_id)
}

// string time_window = 12;
inline void VideoQueryParams::clear_time_window() {
  _impl_.time_window_.ClearToEmpty();
}
inline const std::string& VideoQueryParams::time_window() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoQueryParams.time_window)
  return _internal_time_window();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoQueryParams::set_time_window(ArgT0&& arg0, ArgT... args) {
 
 _impl_.time_window_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoQueryParams.time_window)
}
inline std::string* VideoQueryParams::mutable_time_window() {
  std::string* _s = _internal_mutable_time_window();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoQueryParams.time_window)
  return _s;
}
inline const std::string& VideoQueryParams::_internal_time_window() const {
  return _impl_.time_window_.Get();
}
inline void VideoQueryParams::_internal_set_time_window(const std::string& value) {
  
  _impl_.time_window_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoQueryParams::_internal_mutable_time_window() {
  
  return _impl_.time_window_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoQueryParams::release_time_window() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoQueryParams.time_window)
  return _impl_.time_window_.Release();
}
inline void VideoQueryParams::set_allocated_time_window(std::string* time_window) {
  if (time_window != nullptr) {
    
  } else {
    
  }
  _impl_.time_window_.SetAllocated(time_window, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.time_window_.IsDefault()) {
    _impl_.time_window_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoQueryParams.time_window)
}

// string sort_by = 13;
inline void VideoQueryParams::clear_sort_by() {
  _impl_.sort_by_.ClearToEmpty();
}
inline const std::string& VideoQueryParams::sort_by() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoQueryParams.sort_by)
  return _internal_sort_by();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoQueryParams::set_sort_by(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sort_by_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoQueryParams.sort_by)
}
inline std::string* VideoQueryParams::mutable_sort_by() {
  std::string* _s = _internal_mutable_sort_by();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoQueryParams.sort_by)
  return _s;
}
inline const std::string& VideoQueryParams::_internal_sort_by() const {
  return _impl_.sort_by_.Get();
}
inline void VideoQueryParams::_internal_set_sort_by(const std::string& value) {
  
  _impl_.sort_by_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoQueryParams::_internal_mutable_sort_by() {
  
  return _impl_.sort_by_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoQueryParams::release_sort_by() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoQueryParams.sort_by)
  return _impl_.sort_by_.Release();
}
inline void VideoQueryParams::set_allocated_sort_by(std::string* sort_by) {
  if (sort_by != nullptr) {
    
  } else {
    
  }
  _impl_.sort_by_.SetAllocated(sort_by, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sort_by_.IsDefault()) {
    _impl_.sort_by_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoQueryParams.sort_by)
}

// string sort_order = 14;
inline void VideoQueryParams::clear_sort_order() {
  _impl_.sort_order_.ClearToEmpty();
}
inline const std::string& VideoQueryParams::sort_order() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoQueryParams.sort_order)
  return _internal_sort_order();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoQueryParams::set_sort_order(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sort_order_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoQueryParams.sort_order)
}
inline std::string* VideoQueryParams::mutable_sort_order() {
  std::string* _s = _internal_mutable_sort_order();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoQueryParams.sort_order)
  return _s;
}
inline const std::string& VideoQueryParams::_internal_sort_order() const {
  return _impl_.sort_order_.Get();
}
inline void VideoQueryParams::_internal_set_sort_order(const std::string& value) {
  
  _impl_.sort_order_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoQueryParams::_internal_mutable_sort_order() {
  
  return _impl_.sort_order_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoQueryParams::release_sort_order() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoQueryParams.sort_order)
  return _impl_.sort_order_.Release();
}
inline void VideoQueryParams::set_allocated_sort_order(std::string* sort_order) {
  if (sort_order != nullptr) {
    
  } else {
    
  }
  _impl_.sort_order_.SetAllocated(sort_order, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sort_order_.IsDefault()) {
    _impl_.sort_order_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoQueryParams.sort_order)
}

// -------------------------------------------------------------------

// VideoSearchResult

// repeated .sonet.common.VideoCandidate videos = 1;
inline int VideoSearchResult::_internal_videos_size() const {
  return _impl_.videos_.size();
}
inline int VideoSearchResult::videos_size() const {
  return _internal_videos_size();
}
inline void VideoSearchResult::clear_videos() {
  _impl_.videos_.Clear();
}
inline ::sonet::common::VideoCandidate* VideoSearchResult::mutable_videos(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoSearchResult.videos)
  return _impl_.videos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::common::VideoCandidate >*
VideoSearchResult::mutable_videos() {
  // @@protoc_insertion_point(field_mutable_list:sonet.common.VideoSearchResult.videos)
  return &_impl_.videos_;
}
inline const ::sonet::common::VideoCandidate& VideoSearchResult::_internal_videos(int index) const {
  return _impl_.videos_.Get(index);
}
inline const ::sonet::common::VideoCandidate& VideoSearchResult::videos(int index) const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoSearchResult.videos)
  return _internal_videos(index);
}
inline ::sonet::common::VideoCandidate* VideoSearchResult::_internal_add_videos() {
  return _impl_.videos_.Add();
}
inline ::sonet::common::VideoCandidate* VideoSearchResult::add_videos() {
  ::sonet::common::VideoCandidate* _add = _internal_add_videos();
  // @@protoc_insertion_point(field_add:sonet.common.VideoSearchResult.videos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::common::VideoCandidate >&
VideoSearchResult::videos() const {
  // @@protoc_insertion_point(field_list:sonet.common.VideoSearchResult.videos)
  return _impl_.videos_;
}

// uint32 total_count = 2;
inline void VideoSearchResult::clear_total_count() {
  _impl_.total_count_ = 0u;
}
inline uint32_t VideoSearchResult::_internal_total_count() const {
  return _impl_.total_count_;
}
inline uint32_t VideoSearchResult::total_count() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoSearchResult.total_count)
  return _internal_total_count();
}
inline void VideoSearchResult::_internal_set_total_count(uint32_t value) {
  
  _impl_.total_count_ = value;
}
inline void VideoSearchResult::set_total_count(uint32_t value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoSearchResult.total_count)
}

// uint32 page_count = 3;
inline void VideoSearchResult::clear_page_count() {
  _impl_.page_count_ = 0u;
}
inline uint32_t VideoSearchResult::_internal_page_count() const {
  return _impl_.page_count_;
}
inline uint32_t VideoSearchResult::page_count() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoSearchResult.page_count)
  return _internal_page_count();
}
inline void VideoSearchResult::_internal_set_page_count(uint32_t value) {
  
  _impl_.page_count_ = value;
}
inline void VideoSearchResult::set_page_count(uint32_t value) {
  _internal_set_page_count(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoSearchResult.page_count)
}

// string next_cursor = 4;
inline void VideoSearchResult::clear_next_cursor() {
  _impl_.next_cursor_.ClearToEmpty();
}
inline const std::string& VideoSearchResult::next_cursor() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoSearchResult.next_cursor)
  return _internal_next_cursor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoSearchResult::set_next_cursor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_cursor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoSearchResult.next_cursor)
}
inline std::string* VideoSearchResult::mutable_next_cursor() {
  std::string* _s = _internal_mutable_next_cursor();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoSearchResult.next_cursor)
  return _s;
}
inline const std::string& VideoSearchResult::_internal_next_cursor() const {
  return _impl_.next_cursor_.Get();
}
inline void VideoSearchResult::_internal_set_next_cursor(const std::string& value) {
  
  _impl_.next_cursor_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoSearchResult::_internal_mutable_next_cursor() {
  
  return _impl_.next_cursor_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoSearchResult::release_next_cursor() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoSearchResult.next_cursor)
  return _impl_.next_cursor_.Release();
}
inline void VideoSearchResult::set_allocated_next_cursor(std::string* next_cursor) {
  if (next_cursor != nullptr) {
    
  } else {
    
  }
  _impl_.next_cursor_.SetAllocated(next_cursor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_cursor_.IsDefault()) {
    _impl_.next_cursor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoSearchResult.next_cursor)
}

// string prev_cursor = 5;
inline void VideoSearchResult::clear_prev_cursor() {
  _impl_.prev_cursor_.ClearToEmpty();
}
inline const std::string& VideoSearchResult::prev_cursor() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoSearchResult.prev_cursor)
  return _internal_prev_cursor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoSearchResult::set_prev_cursor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.prev_cursor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoSearchResult.prev_cursor)
}
inline std::string* VideoSearchResult::mutable_prev_cursor() {
  std::string* _s = _internal_mutable_prev_cursor();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoSearchResult.prev_cursor)
  return _s;
}
inline const std::string& VideoSearchResult::_internal_prev_cursor() const {
  return _impl_.prev_cursor_.Get();
}
inline void VideoSearchResult::_internal_set_prev_cursor(const std::string& value) {
  
  _impl_.prev_cursor_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoSearchResult::_internal_mutable_prev_cursor() {
  
  return _impl_.prev_cursor_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoSearchResult::release_prev_cursor() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoSearchResult.prev_cursor)
  return _impl_.prev_cursor_.Release();
}
inline void VideoSearchResult::set_allocated_prev_cursor(std::string* prev_cursor) {
  if (prev_cursor != nullptr) {
    
  } else {
    
  }
  _impl_.prev_cursor_.SetAllocated(prev_cursor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prev_cursor_.IsDefault()) {
    _impl_.prev_cursor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoSearchResult.prev_cursor)
}

// double search_relevance = 6;
inline void VideoSearchResult::clear_search_relevance() {
  _impl_.search_relevance_ = 0;
}
inline double VideoSearchResult::_internal_search_relevance() const {
  return _impl_.search_relevance_;
}
inline double VideoSearchResult::search_relevance() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoSearchResult.search_relevance)
  return _internal_search_relevance();
}
inline void VideoSearchResult::_internal_set_search_relevance(double value) {
  
  _impl_.search_relevance_ = value;
}
inline void VideoSearchResult::set_search_relevance(double value) {
  _internal_set_search_relevance(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoSearchResult.search_relevance)
}

// repeated string suggested_queries = 7;
inline int VideoSearchResult::_internal_suggested_queries_size() const {
  return _impl_.suggested_queries_.size();
}
inline int VideoSearchResult::suggested_queries_size() const {
  return _internal_suggested_queries_size();
}
inline void VideoSearchResult::clear_suggested_queries() {
  _impl_.suggested_queries_.Clear();
}
inline std::string* VideoSearchResult::add_suggested_queries() {
  std::string* _s = _internal_add_suggested_queries();
  // @@protoc_insertion_point(field_add_mutable:sonet.common.VideoSearchResult.suggested_queries)
  return _s;
}
inline const std::string& VideoSearchResult::_internal_suggested_queries(int index) const {
  return _impl_.suggested_queries_.Get(index);
}
inline const std::string& VideoSearchResult::suggested_queries(int index) const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoSearchResult.suggested_queries)
  return _internal_suggested_queries(index);
}
inline std::string* VideoSearchResult::mutable_suggested_queries(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoSearchResult.suggested_queries)
  return _impl_.suggested_queries_.Mutable(index);
}
inline void VideoSearchResult::set_suggested_queries(int index, const std::string& value) {
  _impl_.suggested_queries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoSearchResult.suggested_queries)
}
inline void VideoSearchResult::set_suggested_queries(int index, std::string&& value) {
  _impl_.suggested_queries_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sonet.common.VideoSearchResult.suggested_queries)
}
inline void VideoSearchResult::set_suggested_queries(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.suggested_queries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sonet.common.VideoSearchResult.suggested_queries)
}
inline void VideoSearchResult::set_suggested_queries(int index, const char* value, size_t size) {
  _impl_.suggested_queries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sonet.common.VideoSearchResult.suggested_queries)
}
inline std::string* VideoSearchResult::_internal_add_suggested_queries() {
  return _impl_.suggested_queries_.Add();
}
inline void VideoSearchResult::add_suggested_queries(const std::string& value) {
  _impl_.suggested_queries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sonet.common.VideoSearchResult.suggested_queries)
}
inline void VideoSearchResult::add_suggested_queries(std::string&& value) {
  _impl_.suggested_queries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sonet.common.VideoSearchResult.suggested_queries)
}
inline void VideoSearchResult::add_suggested_queries(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.suggested_queries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sonet.common.VideoSearchResult.suggested_queries)
}
inline void VideoSearchResult::add_suggested_queries(const char* value, size_t size) {
  _impl_.suggested_queries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sonet.common.VideoSearchResult.suggested_queries)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VideoSearchResult::suggested_queries() const {
  // @@protoc_insertion_point(field_list:sonet.common.VideoSearchResult.suggested_queries)
  return _impl_.suggested_queries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VideoSearchResult::mutable_suggested_queries() {
  // @@protoc_insertion_point(field_mutable_list:sonet.common.VideoSearchResult.suggested_queries)
  return &_impl_.suggested_queries_;
}

// -------------------------------------------------------------------

// VideoUploadRequest

// string title = 1;
inline void VideoUploadRequest::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& VideoUploadRequest::title() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoUploadRequest.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoUploadRequest::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoUploadRequest.title)
}
inline std::string* VideoUploadRequest::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoUploadRequest.title)
  return _s;
}
inline const std::string& VideoUploadRequest::_internal_title() const {
  return _impl_.title_.Get();
}
inline void VideoUploadRequest::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoUploadRequest::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoUploadRequest::release_title() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoUploadRequest.title)
  return _impl_.title_.Release();
}
inline void VideoUploadRequest::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoUploadRequest.title)
}

// string description = 2;
inline void VideoUploadRequest::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& VideoUploadRequest::description() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoUploadRequest.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoUploadRequest::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoUploadRequest.description)
}
inline std::string* VideoUploadRequest::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoUploadRequest.description)
  return _s;
}
inline const std::string& VideoUploadRequest::_internal_description() const {
  return _impl_.description_.Get();
}
inline void VideoUploadRequest::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoUploadRequest::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoUploadRequest::release_description() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoUploadRequest.description)
  return _impl_.description_.Release();
}
inline void VideoUploadRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoUploadRequest.description)
}

// string category = 3;
inline void VideoUploadRequest::clear_category() {
  _impl_.category_.ClearToEmpty();
}
inline const std::string& VideoUploadRequest::category() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoUploadRequest.category)
  return _internal_category();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoUploadRequest::set_category(ArgT0&& arg0, ArgT... args) {
 
 _impl_.category_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoUploadRequest.category)
}
inline std::string* VideoUploadRequest::mutable_category() {
  std::string* _s = _internal_mutable_category();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoUploadRequest.category)
  return _s;
}
inline const std::string& VideoUploadRequest::_internal_category() const {
  return _impl_.category_.Get();
}
inline void VideoUploadRequest::_internal_set_category(const std::string& value) {
  
  _impl_.category_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoUploadRequest::_internal_mutable_category() {
  
  return _impl_.category_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoUploadRequest::release_category() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoUploadRequest.category)
  return _impl_.category_.Release();
}
inline void VideoUploadRequest::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    
  } else {
    
  }
  _impl_.category_.SetAllocated(category, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.category_.IsDefault()) {
    _impl_.category_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoUploadRequest.category)
}

// repeated string tags = 4;
inline int VideoUploadRequest::_internal_tags_size() const {
  return _impl_.tags_.size();
}
inline int VideoUploadRequest::tags_size() const {
  return _internal_tags_size();
}
inline void VideoUploadRequest::clear_tags() {
  _impl_.tags_.Clear();
}
inline std::string* VideoUploadRequest::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:sonet.common.VideoUploadRequest.tags)
  return _s;
}
inline const std::string& VideoUploadRequest::_internal_tags(int index) const {
  return _impl_.tags_.Get(index);
}
inline const std::string& VideoUploadRequest::tags(int index) const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoUploadRequest.tags)
  return _internal_tags(index);
}
inline std::string* VideoUploadRequest::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoUploadRequest.tags)
  return _impl_.tags_.Mutable(index);
}
inline void VideoUploadRequest::set_tags(int index, const std::string& value) {
  _impl_.tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoUploadRequest.tags)
}
inline void VideoUploadRequest::set_tags(int index, std::string&& value) {
  _impl_.tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sonet.common.VideoUploadRequest.tags)
}
inline void VideoUploadRequest::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sonet.common.VideoUploadRequest.tags)
}
inline void VideoUploadRequest::set_tags(int index, const char* value, size_t size) {
  _impl_.tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sonet.common.VideoUploadRequest.tags)
}
inline std::string* VideoUploadRequest::_internal_add_tags() {
  return _impl_.tags_.Add();
}
inline void VideoUploadRequest::add_tags(const std::string& value) {
  _impl_.tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sonet.common.VideoUploadRequest.tags)
}
inline void VideoUploadRequest::add_tags(std::string&& value) {
  _impl_.tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sonet.common.VideoUploadRequest.tags)
}
inline void VideoUploadRequest::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sonet.common.VideoUploadRequest.tags)
}
inline void VideoUploadRequest::add_tags(const char* value, size_t size) {
  _impl_.tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sonet.common.VideoUploadRequest.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VideoUploadRequest::tags() const {
  // @@protoc_insertion_point(field_list:sonet.common.VideoUploadRequest.tags)
  return _impl_.tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VideoUploadRequest::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:sonet.common.VideoUploadRequest.tags)
  return &_impl_.tags_;
}

// string language = 5;
inline void VideoUploadRequest::clear_language() {
  _impl_.language_.ClearToEmpty();
}
inline const std::string& VideoUploadRequest::language() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoUploadRequest.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoUploadRequest::set_language(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoUploadRequest.language)
}
inline std::string* VideoUploadRequest::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoUploadRequest.language)
  return _s;
}
inline const std::string& VideoUploadRequest::_internal_language() const {
  return _impl_.language_.Get();
}
inline void VideoUploadRequest::_internal_set_language(const std::string& value) {
  
  _impl_.language_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoUploadRequest::_internal_mutable_language() {
  
  return _impl_.language_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoUploadRequest::release_language() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoUploadRequest.language)
  return _impl_.language_.Release();
}
inline void VideoUploadRequest::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  _impl_.language_.SetAllocated(language, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_.IsDefault()) {
    _impl_.language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoUploadRequest.language)
}

// .sonet.common.VideoUploadMetadata metadata = 6;
inline bool VideoUploadRequest::_internal_has_metadata() const {
  return this != internal_default_instance() && _impl_.metadata_ != nullptr;
}
inline bool VideoUploadRequest::has_metadata() const {
  return _internal_has_metadata();
}
inline void VideoUploadRequest::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
inline const ::sonet::common::VideoUploadMetadata& VideoUploadRequest::_internal_metadata() const {
  const ::sonet::common::VideoUploadMetadata* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::common::VideoUploadMetadata&>(
      ::sonet::common::_VideoUploadMetadata_default_instance_);
}
inline const ::sonet::common::VideoUploadMetadata& VideoUploadRequest::metadata() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoUploadRequest.metadata)
  return _internal_metadata();
}
inline void VideoUploadRequest::unsafe_arena_set_allocated_metadata(
    ::sonet::common::VideoUploadMetadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.common.VideoUploadRequest.metadata)
}
inline ::sonet::common::VideoUploadMetadata* VideoUploadRequest::release_metadata() {
  
  ::sonet::common::VideoUploadMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::common::VideoUploadMetadata* VideoUploadRequest::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoUploadRequest.metadata)
  
  ::sonet::common::VideoUploadMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::sonet::common::VideoUploadMetadata* VideoUploadRequest::_internal_mutable_metadata() {
  
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::common::VideoUploadMetadata>(GetArenaForAllocation());
    _impl_.metadata_ = p;
  }
  return _impl_.metadata_;
}
inline ::sonet::common::VideoUploadMetadata* VideoUploadRequest::mutable_metadata() {
  ::sonet::common::VideoUploadMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoUploadRequest.metadata)
  return _msg;
}
inline void VideoUploadRequest::set_allocated_metadata(::sonet::common::VideoUploadMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoUploadRequest.metadata)
}

// bytes video_data = 7;
inline void VideoUploadRequest::clear_video_data() {
  _impl_.video_data_.ClearToEmpty();
}
inline const std::string& VideoUploadRequest::video_data() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoUploadRequest.video_data)
  return _internal_video_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoUploadRequest::set_video_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.video_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoUploadRequest.video_data)
}
inline std::string* VideoUploadRequest::mutable_video_data() {
  std::string* _s = _internal_mutable_video_data();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoUploadRequest.video_data)
  return _s;
}
inline const std::string& VideoUploadRequest::_internal_video_data() const {
  return _impl_.video_data_.Get();
}
inline void VideoUploadRequest::_internal_set_video_data(const std::string& value) {
  
  _impl_.video_data_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoUploadRequest::_internal_mutable_video_data() {
  
  return _impl_.video_data_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoUploadRequest::release_video_data() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoUploadRequest.video_data)
  return _impl_.video_data_.Release();
}
inline void VideoUploadRequest::set_allocated_video_data(std::string* video_data) {
  if (video_data != nullptr) {
    
  } else {
    
  }
  _impl_.video_data_.SetAllocated(video_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.video_data_.IsDefault()) {
    _impl_.video_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoUploadRequest.video_data)
}

// bytes thumbnail_data = 8;
inline void VideoUploadRequest::clear_thumbnail_data() {
  _impl_.thumbnail_data_.ClearToEmpty();
}
inline const std::string& VideoUploadRequest::thumbnail_data() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoUploadRequest.thumbnail_data)
  return _internal_thumbnail_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoUploadRequest::set_thumbnail_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.thumbnail_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoUploadRequest.thumbnail_data)
}
inline std::string* VideoUploadRequest::mutable_thumbnail_data() {
  std::string* _s = _internal_mutable_thumbnail_data();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoUploadRequest.thumbnail_data)
  return _s;
}
inline const std::string& VideoUploadRequest::_internal_thumbnail_data() const {
  return _impl_.thumbnail_data_.Get();
}
inline void VideoUploadRequest::_internal_set_thumbnail_data(const std::string& value) {
  
  _impl_.thumbnail_data_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoUploadRequest::_internal_mutable_thumbnail_data() {
  
  return _impl_.thumbnail_data_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoUploadRequest::release_thumbnail_data() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoUploadRequest.thumbnail_data)
  return _impl_.thumbnail_data_.Release();
}
inline void VideoUploadRequest::set_allocated_thumbnail_data(std::string* thumbnail_data) {
  if (thumbnail_data != nullptr) {
    
  } else {
    
  }
  _impl_.thumbnail_data_.SetAllocated(thumbnail_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.thumbnail_data_.IsDefault()) {
    _impl_.thumbnail_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoUploadRequest.thumbnail_data)
}

// -------------------------------------------------------------------

// VideoUploadMetadata

// uint32 duration_ms = 1;
inline void VideoUploadMetadata::clear_duration_ms() {
  _impl_.duration_ms_ = 0u;
}
inline uint32_t VideoUploadMetadata::_internal_duration_ms() const {
  return _impl_.duration_ms_;
}
inline uint32_t VideoUploadMetadata::duration_ms() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoUploadMetadata.duration_ms)
  return _internal_duration_ms();
}
inline void VideoUploadMetadata::_internal_set_duration_ms(uint32_t value) {
  
  _impl_.duration_ms_ = value;
}
inline void VideoUploadMetadata::set_duration_ms(uint32_t value) {
  _internal_set_duration_ms(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoUploadMetadata.duration_ms)
}

// string resolution = 2;
inline void VideoUploadMetadata::clear_resolution() {
  _impl_.resolution_.ClearToEmpty();
}
inline const std::string& VideoUploadMetadata::resolution() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoUploadMetadata.resolution)
  return _internal_resolution();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoUploadMetadata::set_resolution(ArgT0&& arg0, ArgT... args) {
 
 _impl_.resolution_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoUploadMetadata.resolution)
}
inline std::string* VideoUploadMetadata::mutable_resolution() {
  std::string* _s = _internal_mutable_resolution();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoUploadMetadata.resolution)
  return _s;
}
inline const std::string& VideoUploadMetadata::_internal_resolution() const {
  return _impl_.resolution_.Get();
}
inline void VideoUploadMetadata::_internal_set_resolution(const std::string& value) {
  
  _impl_.resolution_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoUploadMetadata::_internal_mutable_resolution() {
  
  return _impl_.resolution_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoUploadMetadata::release_resolution() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoUploadMetadata.resolution)
  return _impl_.resolution_.Release();
}
inline void VideoUploadMetadata::set_allocated_resolution(std::string* resolution) {
  if (resolution != nullptr) {
    
  } else {
    
  }
  _impl_.resolution_.SetAllocated(resolution, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resolution_.IsDefault()) {
    _impl_.resolution_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoUploadMetadata.resolution)
}

// string aspect_ratio = 3;
inline void VideoUploadMetadata::clear_aspect_ratio() {
  _impl_.aspect_ratio_.ClearToEmpty();
}
inline const std::string& VideoUploadMetadata::aspect_ratio() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoUploadMetadata.aspect_ratio)
  return _internal_aspect_ratio();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoUploadMetadata::set_aspect_ratio(ArgT0&& arg0, ArgT... args) {
 
 _impl_.aspect_ratio_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoUploadMetadata.aspect_ratio)
}
inline std::string* VideoUploadMetadata::mutable_aspect_ratio() {
  std::string* _s = _internal_mutable_aspect_ratio();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoUploadMetadata.aspect_ratio)
  return _s;
}
inline const std::string& VideoUploadMetadata::_internal_aspect_ratio() const {
  return _impl_.aspect_ratio_.Get();
}
inline void VideoUploadMetadata::_internal_set_aspect_ratio(const std::string& value) {
  
  _impl_.aspect_ratio_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoUploadMetadata::_internal_mutable_aspect_ratio() {
  
  return _impl_.aspect_ratio_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoUploadMetadata::release_aspect_ratio() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoUploadMetadata.aspect_ratio)
  return _impl_.aspect_ratio_.Release();
}
inline void VideoUploadMetadata::set_allocated_aspect_ratio(std::string* aspect_ratio) {
  if (aspect_ratio != nullptr) {
    
  } else {
    
  }
  _impl_.aspect_ratio_.SetAllocated(aspect_ratio, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.aspect_ratio_.IsDefault()) {
    _impl_.aspect_ratio_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoUploadMetadata.aspect_ratio)
}

// string encoding = 4;
inline void VideoUploadMetadata::clear_encoding() {
  _impl_.encoding_.ClearToEmpty();
}
inline const std::string& VideoUploadMetadata::encoding() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoUploadMetadata.encoding)
  return _internal_encoding();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoUploadMetadata::set_encoding(ArgT0&& arg0, ArgT... args) {
 
 _impl_.encoding_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoUploadMetadata.encoding)
}
inline std::string* VideoUploadMetadata::mutable_encoding() {
  std::string* _s = _internal_mutable_encoding();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoUploadMetadata.encoding)
  return _s;
}
inline const std::string& VideoUploadMetadata::_internal_encoding() const {
  return _impl_.encoding_.Get();
}
inline void VideoUploadMetadata::_internal_set_encoding(const std::string& value) {
  
  _impl_.encoding_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoUploadMetadata::_internal_mutable_encoding() {
  
  return _impl_.encoding_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoUploadMetadata::release_encoding() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoUploadMetadata.encoding)
  return _impl_.encoding_.Release();
}
inline void VideoUploadMetadata::set_allocated_encoding(std::string* encoding) {
  if (encoding != nullptr) {
    
  } else {
    
  }
  _impl_.encoding_.SetAllocated(encoding, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.encoding_.IsDefault()) {
    _impl_.encoding_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoUploadMetadata.encoding)
}

// uint32 bitrate_kbps = 5;
inline void VideoUploadMetadata::clear_bitrate_kbps() {
  _impl_.bitrate_kbps_ = 0u;
}
inline uint32_t VideoUploadMetadata::_internal_bitrate_kbps() const {
  return _impl_.bitrate_kbps_;
}
inline uint32_t VideoUploadMetadata::bitrate_kbps() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoUploadMetadata.bitrate_kbps)
  return _internal_bitrate_kbps();
}
inline void VideoUploadMetadata::_internal_set_bitrate_kbps(uint32_t value) {
  
  _impl_.bitrate_kbps_ = value;
}
inline void VideoUploadMetadata::set_bitrate_kbps(uint32_t value) {
  _internal_set_bitrate_kbps(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoUploadMetadata.bitrate_kbps)
}

// uint32 frame_rate = 6;
inline void VideoUploadMetadata::clear_frame_rate() {
  _impl_.frame_rate_ = 0u;
}
inline uint32_t VideoUploadMetadata::_internal_frame_rate() const {
  return _impl_.frame_rate_;
}
inline uint32_t VideoUploadMetadata::frame_rate() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoUploadMetadata.frame_rate)
  return _internal_frame_rate();
}
inline void VideoUploadMetadata::_internal_set_frame_rate(uint32_t value) {
  
  _impl_.frame_rate_ = value;
}
inline void VideoUploadMetadata::set_frame_rate(uint32_t value) {
  _internal_set_frame_rate(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoUploadMetadata.frame_rate)
}

// uint64 file_size_bytes = 7;
inline void VideoUploadMetadata::clear_file_size_bytes() {
  _impl_.file_size_bytes_ = uint64_t{0u};
}
inline uint64_t VideoUploadMetadata::_internal_file_size_bytes() const {
  return _impl_.file_size_bytes_;
}
inline uint64_t VideoUploadMetadata::file_size_bytes() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoUploadMetadata.file_size_bytes)
  return _internal_file_size_bytes();
}
inline void VideoUploadMetadata::_internal_set_file_size_bytes(uint64_t value) {
  
  _impl_.file_size_bytes_ = value;
}
inline void VideoUploadMetadata::set_file_size_bytes(uint64_t value) {
  _internal_set_file_size_bytes(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoUploadMetadata.file_size_bytes)
}

// -------------------------------------------------------------------

// VideoUploadResponse

// bool success = 1;
inline void VideoUploadResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool VideoUploadResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool VideoUploadResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoUploadResponse.success)
  return _internal_success();
}
inline void VideoUploadResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void VideoUploadResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoUploadResponse.success)
}

// string video_id = 2;
inline void VideoUploadResponse::clear_video_id() {
  _impl_.video_id_.ClearToEmpty();
}
inline const std::string& VideoUploadResponse::video_id() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoUploadResponse.video_id)
  return _internal_video_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoUploadResponse::set_video_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.video_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoUploadResponse.video_id)
}
inline std::string* VideoUploadResponse::mutable_video_id() {
  std::string* _s = _internal_mutable_video_id();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoUploadResponse.video_id)
  return _s;
}
inline const std::string& VideoUploadResponse::_internal_video_id() const {
  return _impl_.video_id_.Get();
}
inline void VideoUploadResponse::_internal_set_video_id(const std::string& value) {
  
  _impl_.video_id_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoUploadResponse::_internal_mutable_video_id() {
  
  return _impl_.video_id_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoUploadResponse::release_video_id() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoUploadResponse.video_id)
  return _impl_.video_id_.Release();
}
inline void VideoUploadResponse::set_allocated_video_id(std::string* video_id) {
  if (video_id != nullptr) {
    
  } else {
    
  }
  _impl_.video_id_.SetAllocated(video_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.video_id_.IsDefault()) {
    _impl_.video_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoUploadResponse.video_id)
}

// string message = 3;
inline void VideoUploadResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& VideoUploadResponse::message() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoUploadResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoUploadResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoUploadResponse.message)
}
inline std::string* VideoUploadResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoUploadResponse.message)
  return _s;
}
inline const std::string& VideoUploadResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void VideoUploadResponse::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoUploadResponse::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoUploadResponse::release_message() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoUploadResponse.message)
  return _impl_.message_.Release();
}
inline void VideoUploadResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoUploadResponse.message)
}

// string processing_status = 4;
inline void VideoUploadResponse::clear_processing_status() {
  _impl_.processing_status_.ClearToEmpty();
}
inline const std::string& VideoUploadResponse::processing_status() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoUploadResponse.processing_status)
  return _internal_processing_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoUploadResponse::set_processing_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.processing_status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoUploadResponse.processing_status)
}
inline std::string* VideoUploadResponse::mutable_processing_status() {
  std::string* _s = _internal_mutable_processing_status();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoUploadResponse.processing_status)
  return _s;
}
inline const std::string& VideoUploadResponse::_internal_processing_status() const {
  return _impl_.processing_status_.Get();
}
inline void VideoUploadResponse::_internal_set_processing_status(const std::string& value) {
  
  _impl_.processing_status_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoUploadResponse::_internal_mutable_processing_status() {
  
  return _impl_.processing_status_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoUploadResponse::release_processing_status() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoUploadResponse.processing_status)
  return _impl_.processing_status_.Release();
}
inline void VideoUploadResponse::set_allocated_processing_status(std::string* processing_status) {
  if (processing_status != nullptr) {
    
  } else {
    
  }
  _impl_.processing_status_.SetAllocated(processing_status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.processing_status_.IsDefault()) {
    _impl_.processing_status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoUploadResponse.processing_status)
}

// string thumbnail_url = 5;
inline void VideoUploadResponse::clear_thumbnail_url() {
  _impl_.thumbnail_url_.ClearToEmpty();
}
inline const std::string& VideoUploadResponse::thumbnail_url() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoUploadResponse.thumbnail_url)
  return _internal_thumbnail_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoUploadResponse::set_thumbnail_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.thumbnail_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoUploadResponse.thumbnail_url)
}
inline std::string* VideoUploadResponse::mutable_thumbnail_url() {
  std::string* _s = _internal_mutable_thumbnail_url();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoUploadResponse.thumbnail_url)
  return _s;
}
inline const std::string& VideoUploadResponse::_internal_thumbnail_url() const {
  return _impl_.thumbnail_url_.Get();
}
inline void VideoUploadResponse::_internal_set_thumbnail_url(const std::string& value) {
  
  _impl_.thumbnail_url_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoUploadResponse::_internal_mutable_thumbnail_url() {
  
  return _impl_.thumbnail_url_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoUploadResponse::release_thumbnail_url() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoUploadResponse.thumbnail_url)
  return _impl_.thumbnail_url_.Release();
}
inline void VideoUploadResponse::set_allocated_thumbnail_url(std::string* thumbnail_url) {
  if (thumbnail_url != nullptr) {
    
  } else {
    
  }
  _impl_.thumbnail_url_.SetAllocated(thumbnail_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.thumbnail_url_.IsDefault()) {
    _impl_.thumbnail_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoUploadResponse.thumbnail_url)
}

// string playback_url = 6;
inline void VideoUploadResponse::clear_playback_url() {
  _impl_.playback_url_.ClearToEmpty();
}
inline const std::string& VideoUploadResponse::playback_url() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoUploadResponse.playback_url)
  return _internal_playback_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoUploadResponse::set_playback_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.playback_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoUploadResponse.playback_url)
}
inline std::string* VideoUploadResponse::mutable_playback_url() {
  std::string* _s = _internal_mutable_playback_url();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoUploadResponse.playback_url)
  return _s;
}
inline const std::string& VideoUploadResponse::_internal_playback_url() const {
  return _impl_.playback_url_.Get();
}
inline void VideoUploadResponse::_internal_set_playback_url(const std::string& value) {
  
  _impl_.playback_url_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoUploadResponse::_internal_mutable_playback_url() {
  
  return _impl_.playback_url_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoUploadResponse::release_playback_url() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoUploadResponse.playback_url)
  return _impl_.playback_url_.Release();
}
inline void VideoUploadResponse::set_allocated_playback_url(std::string* playback_url) {
  if (playback_url != nullptr) {
    
  } else {
    
  }
  _impl_.playback_url_.SetAllocated(playback_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.playback_url_.IsDefault()) {
    _impl_.playback_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoUploadResponse.playback_url)
}

// uint32 processing_time_ms = 7;
inline void VideoUploadResponse::clear_processing_time_ms() {
  _impl_.processing_time_ms_ = 0u;
}
inline uint32_t VideoUploadResponse::_internal_processing_time_ms() const {
  return _impl_.processing_time_ms_;
}
inline uint32_t VideoUploadResponse::processing_time_ms() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoUploadResponse.processing_time_ms)
  return _internal_processing_time_ms();
}
inline void VideoUploadResponse::_internal_set_processing_time_ms(uint32_t value) {
  
  _impl_.processing_time_ms_ = value;
}
inline void VideoUploadResponse::set_processing_time_ms(uint32_t value) {
  _internal_set_processing_time_ms(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoUploadResponse.processing_time_ms)
}

// -------------------------------------------------------------------

// VideoProcessingStatus

// string video_id = 1;
inline void VideoProcessingStatus::clear_video_id() {
  _impl_.video_id_.ClearToEmpty();
}
inline const std::string& VideoProcessingStatus::video_id() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoProcessingStatus.video_id)
  return _internal_video_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoProcessingStatus::set_video_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.video_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoProcessingStatus.video_id)
}
inline std::string* VideoProcessingStatus::mutable_video_id() {
  std::string* _s = _internal_mutable_video_id();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoProcessingStatus.video_id)
  return _s;
}
inline const std::string& VideoProcessingStatus::_internal_video_id() const {
  return _impl_.video_id_.Get();
}
inline void VideoProcessingStatus::_internal_set_video_id(const std::string& value) {
  
  _impl_.video_id_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoProcessingStatus::_internal_mutable_video_id() {
  
  return _impl_.video_id_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoProcessingStatus::release_video_id() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoProcessingStatus.video_id)
  return _impl_.video_id_.Release();
}
inline void VideoProcessingStatus::set_allocated_video_id(std::string* video_id) {
  if (video_id != nullptr) {
    
  } else {
    
  }
  _impl_.video_id_.SetAllocated(video_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.video_id_.IsDefault()) {
    _impl_.video_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoProcessingStatus.video_id)
}

// string status = 2;
inline void VideoProcessingStatus::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& VideoProcessingStatus::status() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoProcessingStatus.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoProcessingStatus::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoProcessingStatus.status)
}
inline std::string* VideoProcessingStatus::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoProcessingStatus.status)
  return _s;
}
inline const std::string& VideoProcessingStatus::_internal_status() const {
  return _impl_.status_.Get();
}
inline void VideoProcessingStatus::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoProcessingStatus::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoProcessingStatus::release_status() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoProcessingStatus.status)
  return _impl_.status_.Release();
}
inline void VideoProcessingStatus::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoProcessingStatus.status)
}

// double progress = 3;
inline void VideoProcessingStatus::clear_progress() {
  _impl_.progress_ = 0;
}
inline double VideoProcessingStatus::_internal_progress() const {
  return _impl_.progress_;
}
inline double VideoProcessingStatus::progress() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoProcessingStatus.progress)
  return _internal_progress();
}
inline void VideoProcessingStatus::_internal_set_progress(double value) {
  
  _impl_.progress_ = value;
}
inline void VideoProcessingStatus::set_progress(double value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoProcessingStatus.progress)
}

// string current_step = 4;
inline void VideoProcessingStatus::clear_current_step() {
  _impl_.current_step_.ClearToEmpty();
}
inline const std::string& VideoProcessingStatus::current_step() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoProcessingStatus.current_step)
  return _internal_current_step();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoProcessingStatus::set_current_step(ArgT0&& arg0, ArgT... args) {
 
 _impl_.current_step_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoProcessingStatus.current_step)
}
inline std::string* VideoProcessingStatus::mutable_current_step() {
  std::string* _s = _internal_mutable_current_step();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoProcessingStatus.current_step)
  return _s;
}
inline const std::string& VideoProcessingStatus::_internal_current_step() const {
  return _impl_.current_step_.Get();
}
inline void VideoProcessingStatus::_internal_set_current_step(const std::string& value) {
  
  _impl_.current_step_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoProcessingStatus::_internal_mutable_current_step() {
  
  return _impl_.current_step_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoProcessingStatus::release_current_step() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoProcessingStatus.current_step)
  return _impl_.current_step_.Release();
}
inline void VideoProcessingStatus::set_allocated_current_step(std::string* current_step) {
  if (current_step != nullptr) {
    
  } else {
    
  }
  _impl_.current_step_.SetAllocated(current_step, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.current_step_.IsDefault()) {
    _impl_.current_step_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoProcessingStatus.current_step)
}

// repeated string completed_steps = 5;
inline int VideoProcessingStatus::_internal_completed_steps_size() const {
  return _impl_.completed_steps_.size();
}
inline int VideoProcessingStatus::completed_steps_size() const {
  return _internal_completed_steps_size();
}
inline void VideoProcessingStatus::clear_completed_steps() {
  _impl_.completed_steps_.Clear();
}
inline std::string* VideoProcessingStatus::add_completed_steps() {
  std::string* _s = _internal_add_completed_steps();
  // @@protoc_insertion_point(field_add_mutable:sonet.common.VideoProcessingStatus.completed_steps)
  return _s;
}
inline const std::string& VideoProcessingStatus::_internal_completed_steps(int index) const {
  return _impl_.completed_steps_.Get(index);
}
inline const std::string& VideoProcessingStatus::completed_steps(int index) const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoProcessingStatus.completed_steps)
  return _internal_completed_steps(index);
}
inline std::string* VideoProcessingStatus::mutable_completed_steps(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoProcessingStatus.completed_steps)
  return _impl_.completed_steps_.Mutable(index);
}
inline void VideoProcessingStatus::set_completed_steps(int index, const std::string& value) {
  _impl_.completed_steps_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoProcessingStatus.completed_steps)
}
inline void VideoProcessingStatus::set_completed_steps(int index, std::string&& value) {
  _impl_.completed_steps_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sonet.common.VideoProcessingStatus.completed_steps)
}
inline void VideoProcessingStatus::set_completed_steps(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.completed_steps_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sonet.common.VideoProcessingStatus.completed_steps)
}
inline void VideoProcessingStatus::set_completed_steps(int index, const char* value, size_t size) {
  _impl_.completed_steps_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sonet.common.VideoProcessingStatus.completed_steps)
}
inline std::string* VideoProcessingStatus::_internal_add_completed_steps() {
  return _impl_.completed_steps_.Add();
}
inline void VideoProcessingStatus::add_completed_steps(const std::string& value) {
  _impl_.completed_steps_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sonet.common.VideoProcessingStatus.completed_steps)
}
inline void VideoProcessingStatus::add_completed_steps(std::string&& value) {
  _impl_.completed_steps_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sonet.common.VideoProcessingStatus.completed_steps)
}
inline void VideoProcessingStatus::add_completed_steps(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.completed_steps_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sonet.common.VideoProcessingStatus.completed_steps)
}
inline void VideoProcessingStatus::add_completed_steps(const char* value, size_t size) {
  _impl_.completed_steps_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sonet.common.VideoProcessingStatus.completed_steps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VideoProcessingStatus::completed_steps() const {
  // @@protoc_insertion_point(field_list:sonet.common.VideoProcessingStatus.completed_steps)
  return _impl_.completed_steps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VideoProcessingStatus::mutable_completed_steps() {
  // @@protoc_insertion_point(field_mutable_list:sonet.common.VideoProcessingStatus.completed_steps)
  return &_impl_.completed_steps_;
}

// string error_message = 6;
inline void VideoProcessingStatus::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& VideoProcessingStatus::error_message() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoProcessingStatus.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoProcessingStatus::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoProcessingStatus.error_message)
}
inline std::string* VideoProcessingStatus::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoProcessingStatus.error_message)
  return _s;
}
inline const std::string& VideoProcessingStatus::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void VideoProcessingStatus::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoProcessingStatus::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoProcessingStatus::release_error_message() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoProcessingStatus.error_message)
  return _impl_.error_message_.Release();
}
inline void VideoProcessingStatus::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoProcessingStatus.error_message)
}

// uint32 estimated_time_remaining_ms = 7;
inline void VideoProcessingStatus::clear_estimated_time_remaining_ms() {
  _impl_.estimated_time_remaining_ms_ = 0u;
}
inline uint32_t VideoProcessingStatus::_internal_estimated_time_remaining_ms() const {
  return _impl_.estimated_time_remaining_ms_;
}
inline uint32_t VideoProcessingStatus::estimated_time_remaining_ms() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoProcessingStatus.estimated_time_remaining_ms)
  return _internal_estimated_time_remaining_ms();
}
inline void VideoProcessingStatus::_internal_set_estimated_time_remaining_ms(uint32_t value) {
  
  _impl_.estimated_time_remaining_ms_ = value;
}
inline void VideoProcessingStatus::set_estimated_time_remaining_ms(uint32_t value) {
  _internal_set_estimated_time_remaining_ms(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoProcessingStatus.estimated_time_remaining_ms)
}

// -------------------------------------------------------------------

// VideoAnalytics

// string video_id = 1;
inline void VideoAnalytics::clear_video_id() {
  _impl_.video_id_.ClearToEmpty();
}
inline const std::string& VideoAnalytics::video_id() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoAnalytics.video_id)
  return _internal_video_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoAnalytics::set_video_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.video_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoAnalytics.video_id)
}
inline std::string* VideoAnalytics::mutable_video_id() {
  std::string* _s = _internal_mutable_video_id();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoAnalytics.video_id)
  return _s;
}
inline const std::string& VideoAnalytics::_internal_video_id() const {
  return _impl_.video_id_.Get();
}
inline void VideoAnalytics::_internal_set_video_id(const std::string& value) {
  
  _impl_.video_id_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoAnalytics::_internal_mutable_video_id() {
  
  return _impl_.video_id_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoAnalytics::release_video_id() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoAnalytics.video_id)
  return _impl_.video_id_.Release();
}
inline void VideoAnalytics::set_allocated_video_id(std::string* video_id) {
  if (video_id != nullptr) {
    
  } else {
    
  }
  _impl_.video_id_.SetAllocated(video_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.video_id_.IsDefault()) {
    _impl_.video_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoAnalytics.video_id)
}

// uint32 total_views = 2;
inline void VideoAnalytics::clear_total_views() {
  _impl_.total_views_ = 0u;
}
inline uint32_t VideoAnalytics::_internal_total_views() const {
  return _impl_.total_views_;
}
inline uint32_t VideoAnalytics::total_views() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoAnalytics.total_views)
  return _internal_total_views();
}
inline void VideoAnalytics::_internal_set_total_views(uint32_t value) {
  
  _impl_.total_views_ = value;
}
inline void VideoAnalytics::set_total_views(uint32_t value) {
  _internal_set_total_views(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoAnalytics.total_views)
}

// uint32 unique_viewers = 3;
inline void VideoAnalytics::clear_unique_viewers() {
  _impl_.unique_viewers_ = 0u;
}
inline uint32_t VideoAnalytics::_internal_unique_viewers() const {
  return _impl_.unique_viewers_;
}
inline uint32_t VideoAnalytics::unique_viewers() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoAnalytics.unique_viewers)
  return _internal_unique_viewers();
}
inline void VideoAnalytics::_internal_set_unique_viewers(uint32_t value) {
  
  _impl_.unique_viewers_ = value;
}
inline void VideoAnalytics::set_unique_viewers(uint32_t value) {
  _internal_set_unique_viewers(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoAnalytics.unique_viewers)
}

// double average_watch_time_ms = 4;
inline void VideoAnalytics::clear_average_watch_time_ms() {
  _impl_.average_watch_time_ms_ = 0;
}
inline double VideoAnalytics::_internal_average_watch_time_ms() const {
  return _impl_.average_watch_time_ms_;
}
inline double VideoAnalytics::average_watch_time_ms() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoAnalytics.average_watch_time_ms)
  return _internal_average_watch_time_ms();
}
inline void VideoAnalytics::_internal_set_average_watch_time_ms(double value) {
  
  _impl_.average_watch_time_ms_ = value;
}
inline void VideoAnalytics::set_average_watch_time_ms(double value) {
  _internal_set_average_watch_time_ms(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoAnalytics.average_watch_time_ms)
}

// double completion_rate = 5;
inline void VideoAnalytics::clear_completion_rate() {
  _impl_.completion_rate_ = 0;
}
inline double VideoAnalytics::_internal_completion_rate() const {
  return _impl_.completion_rate_;
}
inline double VideoAnalytics::completion_rate() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoAnalytics.completion_rate)
  return _internal_completion_rate();
}
inline void VideoAnalytics::_internal_set_completion_rate(double value) {
  
  _impl_.completion_rate_ = value;
}
inline void VideoAnalytics::set_completion_rate(double value) {
  _internal_set_completion_rate(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoAnalytics.completion_rate)
}

// double skip_rate = 6;
inline void VideoAnalytics::clear_skip_rate() {
  _impl_.skip_rate_ = 0;
}
inline double VideoAnalytics::_internal_skip_rate() const {
  return _impl_.skip_rate_;
}
inline double VideoAnalytics::skip_rate() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoAnalytics.skip_rate)
  return _internal_skip_rate();
}
inline void VideoAnalytics::_internal_set_skip_rate(double value) {
  
  _impl_.skip_rate_ = value;
}
inline void VideoAnalytics::set_skip_rate(double value) {
  _internal_set_skip_rate(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoAnalytics.skip_rate)
}

// double engagement_rate = 7;
inline void VideoAnalytics::clear_engagement_rate() {
  _impl_.engagement_rate_ = 0;
}
inline double VideoAnalytics::_internal_engagement_rate() const {
  return _impl_.engagement_rate_;
}
inline double VideoAnalytics::engagement_rate() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoAnalytics.engagement_rate)
  return _internal_engagement_rate();
}
inline void VideoAnalytics::_internal_set_engagement_rate(double value) {
  
  _impl_.engagement_rate_ = value;
}
inline void VideoAnalytics::set_engagement_rate(double value) {
  _internal_set_engagement_rate(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoAnalytics.engagement_rate)
}

// double viral_coefficient = 8;
inline void VideoAnalytics::clear_viral_coefficient() {
  _impl_.viral_coefficient_ = 0;
}
inline double VideoAnalytics::_internal_viral_coefficient() const {
  return _impl_.viral_coefficient_;
}
inline double VideoAnalytics::viral_coefficient() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoAnalytics.viral_coefficient)
  return _internal_viral_coefficient();
}
inline void VideoAnalytics::_internal_set_viral_coefficient(double value) {
  
  _impl_.viral_coefficient_ = value;
}
inline void VideoAnalytics::set_viral_coefficient(double value) {
  _internal_set_viral_coefficient(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoAnalytics.viral_coefficient)
}

// double retention_score = 9;
inline void VideoAnalytics::clear_retention_score() {
  _impl_.retention_score_ = 0;
}
inline double VideoAnalytics::_internal_retention_score() const {
  return _impl_.retention_score_;
}
inline double VideoAnalytics::retention_score() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoAnalytics.retention_score)
  return _internal_retention_score();
}
inline void VideoAnalytics::_internal_set_retention_score(double value) {
  
  _impl_.retention_score_ = value;
}
inline void VideoAnalytics::set_retention_score(double value) {
  _internal_set_retention_score(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoAnalytics.retention_score)
}

// repeated .sonet.common.GeographicView geographic_views = 10;
inline int VideoAnalytics::_internal_geographic_views_size() const {
  return _impl_.geographic_views_.size();
}
inline int VideoAnalytics::geographic_views_size() const {
  return _internal_geographic_views_size();
}
inline void VideoAnalytics::clear_geographic_views() {
  _impl_.geographic_views_.Clear();
}
inline ::sonet::common::GeographicView* VideoAnalytics::mutable_geographic_views(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoAnalytics.geographic_views)
  return _impl_.geographic_views_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::common::GeographicView >*
VideoAnalytics::mutable_geographic_views() {
  // @@protoc_insertion_point(field_mutable_list:sonet.common.VideoAnalytics.geographic_views)
  return &_impl_.geographic_views_;
}
inline const ::sonet::common::GeographicView& VideoAnalytics::_internal_geographic_views(int index) const {
  return _impl_.geographic_views_.Get(index);
}
inline const ::sonet::common::GeographicView& VideoAnalytics::geographic_views(int index) const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoAnalytics.geographic_views)
  return _internal_geographic_views(index);
}
inline ::sonet::common::GeographicView* VideoAnalytics::_internal_add_geographic_views() {
  return _impl_.geographic_views_.Add();
}
inline ::sonet::common::GeographicView* VideoAnalytics::add_geographic_views() {
  ::sonet::common::GeographicView* _add = _internal_add_geographic_views();
  // @@protoc_insertion_point(field_add:sonet.common.VideoAnalytics.geographic_views)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::common::GeographicView >&
VideoAnalytics::geographic_views() const {
  // @@protoc_insertion_point(field_list:sonet.common.VideoAnalytics.geographic_views)
  return _impl_.geographic_views_;
}

// repeated .sonet.common.DeviceView device_views = 11;
inline int VideoAnalytics::_internal_device_views_size() const {
  return _impl_.device_views_.size();
}
inline int VideoAnalytics::device_views_size() const {
  return _internal_device_views_size();
}
inline void VideoAnalytics::clear_device_views() {
  _impl_.device_views_.Clear();
}
inline ::sonet::common::DeviceView* VideoAnalytics::mutable_device_views(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoAnalytics.device_views)
  return _impl_.device_views_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::common::DeviceView >*
VideoAnalytics::mutable_device_views() {
  // @@protoc_insertion_point(field_mutable_list:sonet.common.VideoAnalytics.device_views)
  return &_impl_.device_views_;
}
inline const ::sonet::common::DeviceView& VideoAnalytics::_internal_device_views(int index) const {
  return _impl_.device_views_.Get(index);
}
inline const ::sonet::common::DeviceView& VideoAnalytics::device_views(int index) const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoAnalytics.device_views)
  return _internal_device_views(index);
}
inline ::sonet::common::DeviceView* VideoAnalytics::_internal_add_device_views() {
  return _impl_.device_views_.Add();
}
inline ::sonet::common::DeviceView* VideoAnalytics::add_device_views() {
  ::sonet::common::DeviceView* _add = _internal_add_device_views();
  // @@protoc_insertion_point(field_add:sonet.common.VideoAnalytics.device_views)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::common::DeviceView >&
VideoAnalytics::device_views() const {
  // @@protoc_insertion_point(field_list:sonet.common.VideoAnalytics.device_views)
  return _impl_.device_views_;
}

// repeated .sonet.common.TimeView time_views = 12;
inline int VideoAnalytics::_internal_time_views_size() const {
  return _impl_.time_views_.size();
}
inline int VideoAnalytics::time_views_size() const {
  return _internal_time_views_size();
}
inline void VideoAnalytics::clear_time_views() {
  _impl_.time_views_.Clear();
}
inline ::sonet::common::TimeView* VideoAnalytics::mutable_time_views(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoAnalytics.time_views)
  return _impl_.time_views_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::common::TimeView >*
VideoAnalytics::mutable_time_views() {
  // @@protoc_insertion_point(field_mutable_list:sonet.common.VideoAnalytics.time_views)
  return &_impl_.time_views_;
}
inline const ::sonet::common::TimeView& VideoAnalytics::_internal_time_views(int index) const {
  return _impl_.time_views_.Get(index);
}
inline const ::sonet::common::TimeView& VideoAnalytics::time_views(int index) const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoAnalytics.time_views)
  return _internal_time_views(index);
}
inline ::sonet::common::TimeView* VideoAnalytics::_internal_add_time_views() {
  return _impl_.time_views_.Add();
}
inline ::sonet::common::TimeView* VideoAnalytics::add_time_views() {
  ::sonet::common::TimeView* _add = _internal_add_time_views();
  // @@protoc_insertion_point(field_add:sonet.common.VideoAnalytics.time_views)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::common::TimeView >&
VideoAnalytics::time_views() const {
  // @@protoc_insertion_point(field_list:sonet.common.VideoAnalytics.time_views)
  return _impl_.time_views_;
}

// -------------------------------------------------------------------

// GeographicView

// string country = 1;
inline void GeographicView::clear_country() {
  _impl_.country_.ClearToEmpty();
}
inline const std::string& GeographicView::country() const {
  // @@protoc_insertion_point(field_get:sonet.common.GeographicView.country)
  return _internal_country();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GeographicView::set_country(ArgT0&& arg0, ArgT... args) {
 
 _impl_.country_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.GeographicView.country)
}
inline std::string* GeographicView::mutable_country() {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:sonet.common.GeographicView.country)
  return _s;
}
inline const std::string& GeographicView::_internal_country() const {
  return _impl_.country_.Get();
}
inline void GeographicView::_internal_set_country(const std::string& value) {
  
  _impl_.country_.Set(value, GetArenaForAllocation());
}
inline std::string* GeographicView::_internal_mutable_country() {
  
  return _impl_.country_.Mutable(GetArenaForAllocation());
}
inline std::string* GeographicView::release_country() {
  // @@protoc_insertion_point(field_release:sonet.common.GeographicView.country)
  return _impl_.country_.Release();
}
inline void GeographicView::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  _impl_.country_.SetAllocated(country, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_.IsDefault()) {
    _impl_.country_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.GeographicView.country)
}

// string region = 2;
inline void GeographicView::clear_region() {
  _impl_.region_.ClearToEmpty();
}
inline const std::string& GeographicView::region() const {
  // @@protoc_insertion_point(field_get:sonet.common.GeographicView.region)
  return _internal_region();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GeographicView::set_region(ArgT0&& arg0, ArgT... args) {
 
 _impl_.region_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.GeographicView.region)
}
inline std::string* GeographicView::mutable_region() {
  std::string* _s = _internal_mutable_region();
  // @@protoc_insertion_point(field_mutable:sonet.common.GeographicView.region)
  return _s;
}
inline const std::string& GeographicView::_internal_region() const {
  return _impl_.region_.Get();
}
inline void GeographicView::_internal_set_region(const std::string& value) {
  
  _impl_.region_.Set(value, GetArenaForAllocation());
}
inline std::string* GeographicView::_internal_mutable_region() {
  
  return _impl_.region_.Mutable(GetArenaForAllocation());
}
inline std::string* GeographicView::release_region() {
  // @@protoc_insertion_point(field_release:sonet.common.GeographicView.region)
  return _impl_.region_.Release();
}
inline void GeographicView::set_allocated_region(std::string* region) {
  if (region != nullptr) {
    
  } else {
    
  }
  _impl_.region_.SetAllocated(region, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.region_.IsDefault()) {
    _impl_.region_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.GeographicView.region)
}

// string city = 3;
inline void GeographicView::clear_city() {
  _impl_.city_.ClearToEmpty();
}
inline const std::string& GeographicView::city() const {
  // @@protoc_insertion_point(field_get:sonet.common.GeographicView.city)
  return _internal_city();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GeographicView::set_city(ArgT0&& arg0, ArgT... args) {
 
 _impl_.city_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.GeographicView.city)
}
inline std::string* GeographicView::mutable_city() {
  std::string* _s = _internal_mutable_city();
  // @@protoc_insertion_point(field_mutable:sonet.common.GeographicView.city)
  return _s;
}
inline const std::string& GeographicView::_internal_city() const {
  return _impl_.city_.Get();
}
inline void GeographicView::_internal_set_city(const std::string& value) {
  
  _impl_.city_.Set(value, GetArenaForAllocation());
}
inline std::string* GeographicView::_internal_mutable_city() {
  
  return _impl_.city_.Mutable(GetArenaForAllocation());
}
inline std::string* GeographicView::release_city() {
  // @@protoc_insertion_point(field_release:sonet.common.GeographicView.city)
  return _impl_.city_.Release();
}
inline void GeographicView::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    
  } else {
    
  }
  _impl_.city_.SetAllocated(city, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.city_.IsDefault()) {
    _impl_.city_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.GeographicView.city)
}

// uint32 view_count = 4;
inline void GeographicView::clear_view_count() {
  _impl_.view_count_ = 0u;
}
inline uint32_t GeographicView::_internal_view_count() const {
  return _impl_.view_count_;
}
inline uint32_t GeographicView::view_count() const {
  // @@protoc_insertion_point(field_get:sonet.common.GeographicView.view_count)
  return _internal_view_count();
}
inline void GeographicView::_internal_set_view_count(uint32_t value) {
  
  _impl_.view_count_ = value;
}
inline void GeographicView::set_view_count(uint32_t value) {
  _internal_set_view_count(value);
  // @@protoc_insertion_point(field_set:sonet.common.GeographicView.view_count)
}

// double engagement_rate = 5;
inline void GeographicView::clear_engagement_rate() {
  _impl_.engagement_rate_ = 0;
}
inline double GeographicView::_internal_engagement_rate() const {
  return _impl_.engagement_rate_;
}
inline double GeographicView::engagement_rate() const {
  // @@protoc_insertion_point(field_get:sonet.common.GeographicView.engagement_rate)
  return _internal_engagement_rate();
}
inline void GeographicView::_internal_set_engagement_rate(double value) {
  
  _impl_.engagement_rate_ = value;
}
inline void GeographicView::set_engagement_rate(double value) {
  _internal_set_engagement_rate(value);
  // @@protoc_insertion_point(field_set:sonet.common.GeographicView.engagement_rate)
}

// -------------------------------------------------------------------

// DeviceView

// string device_type = 1;
inline void DeviceView::clear_device_type() {
  _impl_.device_type_.ClearToEmpty();
}
inline const std::string& DeviceView::device_type() const {
  // @@protoc_insertion_point(field_get:sonet.common.DeviceView.device_type)
  return _internal_device_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceView::set_device_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.device_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.DeviceView.device_type)
}
inline std::string* DeviceView::mutable_device_type() {
  std::string* _s = _internal_mutable_device_type();
  // @@protoc_insertion_point(field_mutable:sonet.common.DeviceView.device_type)
  return _s;
}
inline const std::string& DeviceView::_internal_device_type() const {
  return _impl_.device_type_.Get();
}
inline void DeviceView::_internal_set_device_type(const std::string& value) {
  
  _impl_.device_type_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceView::_internal_mutable_device_type() {
  
  return _impl_.device_type_.Mutable(GetArenaForAllocation());
}
inline std::string* DeviceView::release_device_type() {
  // @@protoc_insertion_point(field_release:sonet.common.DeviceView.device_type)
  return _impl_.device_type_.Release();
}
inline void DeviceView::set_allocated_device_type(std::string* device_type) {
  if (device_type != nullptr) {
    
  } else {
    
  }
  _impl_.device_type_.SetAllocated(device_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.device_type_.IsDefault()) {
    _impl_.device_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.DeviceView.device_type)
}

// string platform = 2;
inline void DeviceView::clear_platform() {
  _impl_.platform_.ClearToEmpty();
}
inline const std::string& DeviceView::platform() const {
  // @@protoc_insertion_point(field_get:sonet.common.DeviceView.platform)
  return _internal_platform();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceView::set_platform(ArgT0&& arg0, ArgT... args) {
 
 _impl_.platform_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.DeviceView.platform)
}
inline std::string* DeviceView::mutable_platform() {
  std::string* _s = _internal_mutable_platform();
  // @@protoc_insertion_point(field_mutable:sonet.common.DeviceView.platform)
  return _s;
}
inline const std::string& DeviceView::_internal_platform() const {
  return _impl_.platform_.Get();
}
inline void DeviceView::_internal_set_platform(const std::string& value) {
  
  _impl_.platform_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceView::_internal_mutable_platform() {
  
  return _impl_.platform_.Mutable(GetArenaForAllocation());
}
inline std::string* DeviceView::release_platform() {
  // @@protoc_insertion_point(field_release:sonet.common.DeviceView.platform)
  return _impl_.platform_.Release();
}
inline void DeviceView::set_allocated_platform(std::string* platform) {
  if (platform != nullptr) {
    
  } else {
    
  }
  _impl_.platform_.SetAllocated(platform, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.platform_.IsDefault()) {
    _impl_.platform_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.DeviceView.platform)
}

// string browser = 3;
inline void DeviceView::clear_browser() {
  _impl_.browser_.ClearToEmpty();
}
inline const std::string& DeviceView::browser() const {
  // @@protoc_insertion_point(field_get:sonet.common.DeviceView.browser)
  return _internal_browser();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceView::set_browser(ArgT0&& arg0, ArgT... args) {
 
 _impl_.browser_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.DeviceView.browser)
}
inline std::string* DeviceView::mutable_browser() {
  std::string* _s = _internal_mutable_browser();
  // @@protoc_insertion_point(field_mutable:sonet.common.DeviceView.browser)
  return _s;
}
inline const std::string& DeviceView::_internal_browser() const {
  return _impl_.browser_.Get();
}
inline void DeviceView::_internal_set_browser(const std::string& value) {
  
  _impl_.browser_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceView::_internal_mutable_browser() {
  
  return _impl_.browser_.Mutable(GetArenaForAllocation());
}
inline std::string* DeviceView::release_browser() {
  // @@protoc_insertion_point(field_release:sonet.common.DeviceView.browser)
  return _impl_.browser_.Release();
}
inline void DeviceView::set_allocated_browser(std::string* browser) {
  if (browser != nullptr) {
    
  } else {
    
  }
  _impl_.browser_.SetAllocated(browser, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.browser_.IsDefault()) {
    _impl_.browser_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.DeviceView.browser)
}

// uint32 view_count = 4;
inline void DeviceView::clear_view_count() {
  _impl_.view_count_ = 0u;
}
inline uint32_t DeviceView::_internal_view_count() const {
  return _impl_.view_count_;
}
inline uint32_t DeviceView::view_count() const {
  // @@protoc_insertion_point(field_get:sonet.common.DeviceView.view_count)
  return _internal_view_count();
}
inline void DeviceView::_internal_set_view_count(uint32_t value) {
  
  _impl_.view_count_ = value;
}
inline void DeviceView::set_view_count(uint32_t value) {
  _internal_set_view_count(value);
  // @@protoc_insertion_point(field_set:sonet.common.DeviceView.view_count)
}

// double engagement_rate = 5;
inline void DeviceView::clear_engagement_rate() {
  _impl_.engagement_rate_ = 0;
}
inline double DeviceView::_internal_engagement_rate() const {
  return _impl_.engagement_rate_;
}
inline double DeviceView::engagement_rate() const {
  // @@protoc_insertion_point(field_get:sonet.common.DeviceView.engagement_rate)
  return _internal_engagement_rate();
}
inline void DeviceView::_internal_set_engagement_rate(double value) {
  
  _impl_.engagement_rate_ = value;
}
inline void DeviceView::set_engagement_rate(double value) {
  _internal_set_engagement_rate(value);
  // @@protoc_insertion_point(field_set:sonet.common.DeviceView.engagement_rate)
}

// -------------------------------------------------------------------

// TimeView

// string hour = 1;
inline void TimeView::clear_hour() {
  _impl_.hour_.ClearToEmpty();
}
inline const std::string& TimeView::hour() const {
  // @@protoc_insertion_point(field_get:sonet.common.TimeView.hour)
  return _internal_hour();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TimeView::set_hour(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hour_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.TimeView.hour)
}
inline std::string* TimeView::mutable_hour() {
  std::string* _s = _internal_mutable_hour();
  // @@protoc_insertion_point(field_mutable:sonet.common.TimeView.hour)
  return _s;
}
inline const std::string& TimeView::_internal_hour() const {
  return _impl_.hour_.Get();
}
inline void TimeView::_internal_set_hour(const std::string& value) {
  
  _impl_.hour_.Set(value, GetArenaForAllocation());
}
inline std::string* TimeView::_internal_mutable_hour() {
  
  return _impl_.hour_.Mutable(GetArenaForAllocation());
}
inline std::string* TimeView::release_hour() {
  // @@protoc_insertion_point(field_release:sonet.common.TimeView.hour)
  return _impl_.hour_.Release();
}
inline void TimeView::set_allocated_hour(std::string* hour) {
  if (hour != nullptr) {
    
  } else {
    
  }
  _impl_.hour_.SetAllocated(hour, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hour_.IsDefault()) {
    _impl_.hour_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.TimeView.hour)
}

// string day_of_week = 2;
inline void TimeView::clear_day_of_week() {
  _impl_.day_of_week_.ClearToEmpty();
}
inline const std::string& TimeView::day_of_week() const {
  // @@protoc_insertion_point(field_get:sonet.common.TimeView.day_of_week)
  return _internal_day_of_week();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TimeView::set_day_of_week(ArgT0&& arg0, ArgT... args) {
 
 _impl_.day_of_week_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.TimeView.day_of_week)
}
inline std::string* TimeView::mutable_day_of_week() {
  std::string* _s = _internal_mutable_day_of_week();
  // @@protoc_insertion_point(field_mutable:sonet.common.TimeView.day_of_week)
  return _s;
}
inline const std::string& TimeView::_internal_day_of_week() const {
  return _impl_.day_of_week_.Get();
}
inline void TimeView::_internal_set_day_of_week(const std::string& value) {
  
  _impl_.day_of_week_.Set(value, GetArenaForAllocation());
}
inline std::string* TimeView::_internal_mutable_day_of_week() {
  
  return _impl_.day_of_week_.Mutable(GetArenaForAllocation());
}
inline std::string* TimeView::release_day_of_week() {
  // @@protoc_insertion_point(field_release:sonet.common.TimeView.day_of_week)
  return _impl_.day_of_week_.Release();
}
inline void TimeView::set_allocated_day_of_week(std::string* day_of_week) {
  if (day_of_week != nullptr) {
    
  } else {
    
  }
  _impl_.day_of_week_.SetAllocated(day_of_week, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.day_of_week_.IsDefault()) {
    _impl_.day_of_week_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.TimeView.day_of_week)
}

// uint32 view_count = 3;
inline void TimeView::clear_view_count() {
  _impl_.view_count_ = 0u;
}
inline uint32_t TimeView::_internal_view_count() const {
  return _impl_.view_count_;
}
inline uint32_t TimeView::view_count() const {
  // @@protoc_insertion_point(field_get:sonet.common.TimeView.view_count)
  return _internal_view_count();
}
inline void TimeView::_internal_set_view_count(uint32_t value) {
  
  _impl_.view_count_ = value;
}
inline void TimeView::set_view_count(uint32_t value) {
  _internal_set_view_count(value);
  // @@protoc_insertion_point(field_set:sonet.common.TimeView.view_count)
}

// double engagement_rate = 4;
inline void TimeView::clear_engagement_rate() {
  _impl_.engagement_rate_ = 0;
}
inline double TimeView::_internal_engagement_rate() const {
  return _impl_.engagement_rate_;
}
inline double TimeView::engagement_rate() const {
  // @@protoc_insertion_point(field_get:sonet.common.TimeView.engagement_rate)
  return _internal_engagement_rate();
}
inline void TimeView::_internal_set_engagement_rate(double value) {
  
  _impl_.engagement_rate_ = value;
}
inline void TimeView::set_engagement_rate(double value) {
  _internal_set_engagement_rate(value);
  // @@protoc_insertion_point(field_set:sonet.common.TimeView.engagement_rate)
}

// -------------------------------------------------------------------

// VideoRecommendation

// string video_id = 1;
inline void VideoRecommendation::clear_video_id() {
  _impl_.video_id_.ClearToEmpty();
}
inline const std::string& VideoRecommendation::video_id() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoRecommendation.video_id)
  return _internal_video_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoRecommendation::set_video_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.video_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoRecommendation.video_id)
}
inline std::string* VideoRecommendation::mutable_video_id() {
  std::string* _s = _internal_mutable_video_id();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoRecommendation.video_id)
  return _s;
}
inline const std::string& VideoRecommendation::_internal_video_id() const {
  return _impl_.video_id_.Get();
}
inline void VideoRecommendation::_internal_set_video_id(const std::string& value) {
  
  _impl_.video_id_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoRecommendation::_internal_mutable_video_id() {
  
  return _impl_.video_id_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoRecommendation::release_video_id() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoRecommendation.video_id)
  return _impl_.video_id_.Release();
}
inline void VideoRecommendation::set_allocated_video_id(std::string* video_id) {
  if (video_id != nullptr) {
    
  } else {
    
  }
  _impl_.video_id_.SetAllocated(video_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.video_id_.IsDefault()) {
    _impl_.video_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoRecommendation.video_id)
}

// double relevance_score = 2;
inline void VideoRecommendation::clear_relevance_score() {
  _impl_.relevance_score_ = 0;
}
inline double VideoRecommendation::_internal_relevance_score() const {
  return _impl_.relevance_score_;
}
inline double VideoRecommendation::relevance_score() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoRecommendation.relevance_score)
  return _internal_relevance_score();
}
inline void VideoRecommendation::_internal_set_relevance_score(double value) {
  
  _impl_.relevance_score_ = value;
}
inline void VideoRecommendation::set_relevance_score(double value) {
  _internal_set_relevance_score(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoRecommendation.relevance_score)
}

// string reason = 3;
inline void VideoRecommendation::clear_reason() {
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& VideoRecommendation::reason() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoRecommendation.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoRecommendation::set_reason(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoRecommendation.reason)
}
inline std::string* VideoRecommendation::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoRecommendation.reason)
  return _s;
}
inline const std::string& VideoRecommendation::_internal_reason() const {
  return _impl_.reason_.Get();
}
inline void VideoRecommendation::_internal_set_reason(const std::string& value) {
  
  _impl_.reason_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoRecommendation::_internal_mutable_reason() {
  
  return _impl_.reason_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoRecommendation::release_reason() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoRecommendation.reason)
  return _impl_.reason_.Release();
}
inline void VideoRecommendation::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  _impl_.reason_.SetAllocated(reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoRecommendation.reason)
}

// repeated string factors = 4;
inline int VideoRecommendation::_internal_factors_size() const {
  return _impl_.factors_.size();
}
inline int VideoRecommendation::factors_size() const {
  return _internal_factors_size();
}
inline void VideoRecommendation::clear_factors() {
  _impl_.factors_.Clear();
}
inline std::string* VideoRecommendation::add_factors() {
  std::string* _s = _internal_add_factors();
  // @@protoc_insertion_point(field_add_mutable:sonet.common.VideoRecommendation.factors)
  return _s;
}
inline const std::string& VideoRecommendation::_internal_factors(int index) const {
  return _impl_.factors_.Get(index);
}
inline const std::string& VideoRecommendation::factors(int index) const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoRecommendation.factors)
  return _internal_factors(index);
}
inline std::string* VideoRecommendation::mutable_factors(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoRecommendation.factors)
  return _impl_.factors_.Mutable(index);
}
inline void VideoRecommendation::set_factors(int index, const std::string& value) {
  _impl_.factors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoRecommendation.factors)
}
inline void VideoRecommendation::set_factors(int index, std::string&& value) {
  _impl_.factors_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sonet.common.VideoRecommendation.factors)
}
inline void VideoRecommendation::set_factors(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.factors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sonet.common.VideoRecommendation.factors)
}
inline void VideoRecommendation::set_factors(int index, const char* value, size_t size) {
  _impl_.factors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sonet.common.VideoRecommendation.factors)
}
inline std::string* VideoRecommendation::_internal_add_factors() {
  return _impl_.factors_.Add();
}
inline void VideoRecommendation::add_factors(const std::string& value) {
  _impl_.factors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sonet.common.VideoRecommendation.factors)
}
inline void VideoRecommendation::add_factors(std::string&& value) {
  _impl_.factors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sonet.common.VideoRecommendation.factors)
}
inline void VideoRecommendation::add_factors(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.factors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sonet.common.VideoRecommendation.factors)
}
inline void VideoRecommendation::add_factors(const char* value, size_t size) {
  _impl_.factors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sonet.common.VideoRecommendation.factors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VideoRecommendation::factors() const {
  // @@protoc_insertion_point(field_list:sonet.common.VideoRecommendation.factors)
  return _impl_.factors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VideoRecommendation::mutable_factors() {
  // @@protoc_insertion_point(field_mutable_list:sonet.common.VideoRecommendation.factors)
  return &_impl_.factors_;
}

// string algorithm = 5;
inline void VideoRecommendation::clear_algorithm() {
  _impl_.algorithm_.ClearToEmpty();
}
inline const std::string& VideoRecommendation::algorithm() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoRecommendation.algorithm)
  return _internal_algorithm();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoRecommendation::set_algorithm(ArgT0&& arg0, ArgT... args) {
 
 _impl_.algorithm_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoRecommendation.algorithm)
}
inline std::string* VideoRecommendation::mutable_algorithm() {
  std::string* _s = _internal_mutable_algorithm();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoRecommendation.algorithm)
  return _s;
}
inline const std::string& VideoRecommendation::_internal_algorithm() const {
  return _impl_.algorithm_.Get();
}
inline void VideoRecommendation::_internal_set_algorithm(const std::string& value) {
  
  _impl_.algorithm_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoRecommendation::_internal_mutable_algorithm() {
  
  return _impl_.algorithm_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoRecommendation::release_algorithm() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoRecommendation.algorithm)
  return _impl_.algorithm_.Release();
}
inline void VideoRecommendation::set_allocated_algorithm(std::string* algorithm) {
  if (algorithm != nullptr) {
    
  } else {
    
  }
  _impl_.algorithm_.SetAllocated(algorithm, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.algorithm_.IsDefault()) {
    _impl_.algorithm_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoRecommendation.algorithm)
}

// double confidence = 6;
inline void VideoRecommendation::clear_confidence() {
  _impl_.confidence_ = 0;
}
inline double VideoRecommendation::_internal_confidence() const {
  return _impl_.confidence_;
}
inline double VideoRecommendation::confidence() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoRecommendation.confidence)
  return _internal_confidence();
}
inline void VideoRecommendation::_internal_set_confidence(double value) {
  
  _impl_.confidence_ = value;
}
inline void VideoRecommendation::set_confidence(double value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoRecommendation.confidence)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// VideoBatchRequest

// repeated string video_ids = 1;
inline int VideoBatchRequest::_internal_video_ids_size() const {
  return _impl_.video_ids_.size();
}
inline int VideoBatchRequest::video_ids_size() const {
  return _internal_video_ids_size();
}
inline void VideoBatchRequest::clear_video_ids() {
  _impl_.video_ids_.Clear();
}
inline std::string* VideoBatchRequest::add_video_ids() {
  std::string* _s = _internal_add_video_ids();
  // @@protoc_insertion_point(field_add_mutable:sonet.common.VideoBatchRequest.video_ids)
  return _s;
}
inline const std::string& VideoBatchRequest::_internal_video_ids(int index) const {
  return _impl_.video_ids_.Get(index);
}
inline const std::string& VideoBatchRequest::video_ids(int index) const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoBatchRequest.video_ids)
  return _internal_video_ids(index);
}
inline std::string* VideoBatchRequest::mutable_video_ids(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoBatchRequest.video_ids)
  return _impl_.video_ids_.Mutable(index);
}
inline void VideoBatchRequest::set_video_ids(int index, const std::string& value) {
  _impl_.video_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoBatchRequest.video_ids)
}
inline void VideoBatchRequest::set_video_ids(int index, std::string&& value) {
  _impl_.video_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sonet.common.VideoBatchRequest.video_ids)
}
inline void VideoBatchRequest::set_video_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.video_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sonet.common.VideoBatchRequest.video_ids)
}
inline void VideoBatchRequest::set_video_ids(int index, const char* value, size_t size) {
  _impl_.video_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sonet.common.VideoBatchRequest.video_ids)
}
inline std::string* VideoBatchRequest::_internal_add_video_ids() {
  return _impl_.video_ids_.Add();
}
inline void VideoBatchRequest::add_video_ids(const std::string& value) {
  _impl_.video_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sonet.common.VideoBatchRequest.video_ids)
}
inline void VideoBatchRequest::add_video_ids(std::string&& value) {
  _impl_.video_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sonet.common.VideoBatchRequest.video_ids)
}
inline void VideoBatchRequest::add_video_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.video_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sonet.common.VideoBatchRequest.video_ids)
}
inline void VideoBatchRequest::add_video_ids(const char* value, size_t size) {
  _impl_.video_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sonet.common.VideoBatchRequest.video_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VideoBatchRequest::video_ids() const {
  // @@protoc_insertion_point(field_list:sonet.common.VideoBatchRequest.video_ids)
  return _impl_.video_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VideoBatchRequest::mutable_video_ids() {
  // @@protoc_insertion_point(field_mutable_list:sonet.common.VideoBatchRequest.video_ids)
  return &_impl_.video_ids_;
}

// string operation = 2;
inline void VideoBatchRequest::clear_operation() {
  _impl_.operation_.ClearToEmpty();
}
inline const std::string& VideoBatchRequest::operation() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoBatchRequest.operation)
  return _internal_operation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoBatchRequest::set_operation(ArgT0&& arg0, ArgT... args) {
 
 _impl_.operation_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoBatchRequest.operation)
}
inline std::string* VideoBatchRequest::mutable_operation() {
  std::string* _s = _internal_mutable_operation();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoBatchRequest.operation)
  return _s;
}
inline const std::string& VideoBatchRequest::_internal_operation() const {
  return _impl_.operation_.Get();
}
inline void VideoBatchRequest::_internal_set_operation(const std::string& value) {
  
  _impl_.operation_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoBatchRequest::_internal_mutable_operation() {
  
  return _impl_.operation_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoBatchRequest::release_operation() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoBatchRequest.operation)
  return _impl_.operation_.Release();
}
inline void VideoBatchRequest::set_allocated_operation(std::string* operation) {
  if (operation != nullptr) {
    
  } else {
    
  }
  _impl_.operation_.SetAllocated(operation, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.operation_.IsDefault()) {
    _impl_.operation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoBatchRequest.operation)
}

// map<string, string> parameters = 3;
inline int VideoBatchRequest::_internal_parameters_size() const {
  return _impl_.parameters_.size();
}
inline int VideoBatchRequest::parameters_size() const {
  return _internal_parameters_size();
}
inline void VideoBatchRequest::clear_parameters() {
  _impl_.parameters_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
VideoBatchRequest::_internal_parameters() const {
  return _impl_.parameters_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
VideoBatchRequest::parameters() const {
  // @@protoc_insertion_point(field_map:sonet.common.VideoBatchRequest.parameters)
  return _internal_parameters();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
VideoBatchRequest::_internal_mutable_parameters() {
  return _impl_.parameters_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
VideoBatchRequest::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_map:sonet.common.VideoBatchRequest.parameters)
  return _internal_mutable_parameters();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// VideoBatchResponse

// bool success = 1;
inline void VideoBatchResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool VideoBatchResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool VideoBatchResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoBatchResponse.success)
  return _internal_success();
}
inline void VideoBatchResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void VideoBatchResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoBatchResponse.success)
}

// uint32 processed_count = 2;
inline void VideoBatchResponse::clear_processed_count() {
  _impl_.processed_count_ = 0u;
}
inline uint32_t VideoBatchResponse::_internal_processed_count() const {
  return _impl_.processed_count_;
}
inline uint32_t VideoBatchResponse::processed_count() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoBatchResponse.processed_count)
  return _internal_processed_count();
}
inline void VideoBatchResponse::_internal_set_processed_count(uint32_t value) {
  
  _impl_.processed_count_ = value;
}
inline void VideoBatchResponse::set_processed_count(uint32_t value) {
  _internal_set_processed_count(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoBatchResponse.processed_count)
}

// uint32 failed_count = 3;
inline void VideoBatchResponse::clear_failed_count() {
  _impl_.failed_count_ = 0u;
}
inline uint32_t VideoBatchResponse::_internal_failed_count() const {
  return _impl_.failed_count_;
}
inline uint32_t VideoBatchResponse::failed_count() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoBatchResponse.failed_count)
  return _internal_failed_count();
}
inline void VideoBatchResponse::_internal_set_failed_count(uint32_t value) {
  
  _impl_.failed_count_ = value;
}
inline void VideoBatchResponse::set_failed_count(uint32_t value) {
  _internal_set_failed_count(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoBatchResponse.failed_count)
}

// repeated string failed_video_ids = 4;
inline int VideoBatchResponse::_internal_failed_video_ids_size() const {
  return _impl_.failed_video_ids_.size();
}
inline int VideoBatchResponse::failed_video_ids_size() const {
  return _internal_failed_video_ids_size();
}
inline void VideoBatchResponse::clear_failed_video_ids() {
  _impl_.failed_video_ids_.Clear();
}
inline std::string* VideoBatchResponse::add_failed_video_ids() {
  std::string* _s = _internal_add_failed_video_ids();
  // @@protoc_insertion_point(field_add_mutable:sonet.common.VideoBatchResponse.failed_video_ids)
  return _s;
}
inline const std::string& VideoBatchResponse::_internal_failed_video_ids(int index) const {
  return _impl_.failed_video_ids_.Get(index);
}
inline const std::string& VideoBatchResponse::failed_video_ids(int index) const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoBatchResponse.failed_video_ids)
  return _internal_failed_video_ids(index);
}
inline std::string* VideoBatchResponse::mutable_failed_video_ids(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoBatchResponse.failed_video_ids)
  return _impl_.failed_video_ids_.Mutable(index);
}
inline void VideoBatchResponse::set_failed_video_ids(int index, const std::string& value) {
  _impl_.failed_video_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sonet.common.VideoBatchResponse.failed_video_ids)
}
inline void VideoBatchResponse::set_failed_video_ids(int index, std::string&& value) {
  _impl_.failed_video_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sonet.common.VideoBatchResponse.failed_video_ids)
}
inline void VideoBatchResponse::set_failed_video_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.failed_video_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sonet.common.VideoBatchResponse.failed_video_ids)
}
inline void VideoBatchResponse::set_failed_video_ids(int index, const char* value, size_t size) {
  _impl_.failed_video_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sonet.common.VideoBatchResponse.failed_video_ids)
}
inline std::string* VideoBatchResponse::_internal_add_failed_video_ids() {
  return _impl_.failed_video_ids_.Add();
}
inline void VideoBatchResponse::add_failed_video_ids(const std::string& value) {
  _impl_.failed_video_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sonet.common.VideoBatchResponse.failed_video_ids)
}
inline void VideoBatchResponse::add_failed_video_ids(std::string&& value) {
  _impl_.failed_video_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sonet.common.VideoBatchResponse.failed_video_ids)
}
inline void VideoBatchResponse::add_failed_video_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.failed_video_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sonet.common.VideoBatchResponse.failed_video_ids)
}
inline void VideoBatchResponse::add_failed_video_ids(const char* value, size_t size) {
  _impl_.failed_video_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sonet.common.VideoBatchResponse.failed_video_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VideoBatchResponse::failed_video_ids() const {
  // @@protoc_insertion_point(field_list:sonet.common.VideoBatchResponse.failed_video_ids)
  return _impl_.failed_video_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VideoBatchResponse::mutable_failed_video_ids() {
  // @@protoc_insertion_point(field_mutable_list:sonet.common.VideoBatchResponse.failed_video_ids)
  return &_impl_.failed_video_ids_;
}

// string message = 5;
inline void VideoBatchResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& VideoBatchResponse::message() const {
  // @@protoc_insertion_point(field_get:sonet.common.VideoBatchResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoBatchResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.VideoBatchResponse.message)
}
inline std::string* VideoBatchResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:sonet.common.VideoBatchResponse.message)
  return _s;
}
inline const std::string& VideoBatchResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void VideoBatchResponse::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoBatchResponse::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoBatchResponse::release_message() {
  // @@protoc_insertion_point(field_release:sonet.common.VideoBatchResponse.message)
  return _impl_.message_.Release();
}
inline void VideoBatchResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.VideoBatchResponse.message)
}

// map<string, string> results = 6;
inline int VideoBatchResponse::_internal_results_size() const {
  return _impl_.results_.size();
}
inline int VideoBatchResponse::results_size() const {
  return _internal_results_size();
}
inline void VideoBatchResponse::clear_results() {
  _impl_.results_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
VideoBatchResponse::_internal_results() const {
  return _impl_.results_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
VideoBatchResponse::results() const {
  // @@protoc_insertion_point(field_map:sonet.common.VideoBatchResponse.results)
  return _internal_results();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
VideoBatchResponse::_internal_mutable_results() {
  return _impl_.results_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
VideoBatchResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_map:sonet.common.VideoBatchResponse.results)
  return _internal_mutable_results();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace sonet

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2fvideo_5ftypes_2eproto
