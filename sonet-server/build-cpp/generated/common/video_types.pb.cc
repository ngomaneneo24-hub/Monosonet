// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/video_types.proto

#include "common/video_types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sonet {
namespace common {
PROTOBUF_CONSTEXPR VideoCandidate::VideoCandidate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.creator_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.creator_username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.creator_display_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.creator_avatar_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.updated_at_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cursor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.video_)*/nullptr
  , /*decltype(_impl_.engagement_)*/nullptr
  , /*decltype(_impl_.features_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VideoCandidateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoCandidateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoCandidateDefaultTypeInternal() {}
  union {
    VideoCandidate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoCandidateDefaultTypeInternal _VideoCandidate_default_instance_;
PROTOBUF_CONSTEXPR VideoMetadata::VideoMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.quality_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnail_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.playback_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resolution_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.aspect_ratio_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.encoding_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.duration_ms_)*/0u
  , /*decltype(_impl_.bitrate_kbps_)*/0u
  , /*decltype(_impl_.file_size_bytes_)*/uint64_t{0u}
  , /*decltype(_impl_.frame_rate_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VideoMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoMetadataDefaultTypeInternal() {}
  union {
    VideoMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoMetadataDefaultTypeInternal _VideoMetadata_default_instance_;
PROTOBUF_CONSTEXPR VideoFeatures::VideoFeatures(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.brightness_)*/0
  , /*decltype(_impl_.contrast_)*/0
  , /*decltype(_impl_.saturation_)*/0
  , /*decltype(_impl_.motion_intensity_)*/0
  , /*decltype(_impl_.scene_complexity_)*/0
  , /*decltype(_impl_.audio_quality_)*/0
  , /*decltype(_impl_.speech_clarity_)*/0
  , /*decltype(_impl_.color_vibrancy_)*/0
  , /*decltype(_impl_.visual_appeal_)*/0
  , /*decltype(_impl_.background_music_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VideoFeaturesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoFeaturesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoFeaturesDefaultTypeInternal() {}
  union {
    VideoFeatures _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoFeaturesDefaultTypeInternal _VideoFeatures_default_instance_;
PROTOBUF_CONSTEXPR EngagementMetrics::EngagementMetrics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.view_count_)*/0u
  , /*decltype(_impl_.unique_viewers_)*/0u
  , /*decltype(_impl_.like_count_)*/0u
  , /*decltype(_impl_.renote_count_)*/0u
  , /*decltype(_impl_.reply_count_)*/0u
  , /*decltype(_impl_.share_count_)*/0u
  , /*decltype(_impl_.average_watch_time_ms_)*/0
  , /*decltype(_impl_.completion_rate_)*/0
  , /*decltype(_impl_.skip_rate_)*/0
  , /*decltype(_impl_.engagement_score_)*/0
  , /*decltype(_impl_.viral_score_)*/0
  , /*decltype(_impl_.retention_score_)*/0
  , /*decltype(_impl_.bookmark_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EngagementMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EngagementMetricsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EngagementMetricsDefaultTypeInternal() {}
  union {
    EngagementMetrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EngagementMetricsDefaultTypeInternal _EngagementMetrics_default_instance_;
PROTOBUF_CONSTEXPR VideoQueryParams::VideoQueryParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.categories_)*/{}
  , /*decltype(_impl_.exclude_categories_)*/{}
  , /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.exclude_tags_)*/{}
  , /*decltype(_impl_.cursor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.quality_preference_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.creator_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_window_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sort_by_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sort_order_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.limit_)*/0u
  , /*decltype(_impl_.offset_)*/0u
  , /*decltype(_impl_.min_duration_ms_)*/0u
  , /*decltype(_impl_.max_duration_ms_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VideoQueryParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoQueryParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoQueryParamsDefaultTypeInternal() {}
  union {
    VideoQueryParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoQueryParamsDefaultTypeInternal _VideoQueryParams_default_instance_;
PROTOBUF_CONSTEXPR VideoSearchResult::VideoSearchResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.videos_)*/{}
  , /*decltype(_impl_.suggested_queries_)*/{}
  , /*decltype(_impl_.next_cursor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.prev_cursor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.total_count_)*/0u
  , /*decltype(_impl_.page_count_)*/0u
  , /*decltype(_impl_.search_relevance_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VideoSearchResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoSearchResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoSearchResultDefaultTypeInternal() {}
  union {
    VideoSearchResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoSearchResultDefaultTypeInternal _VideoSearchResult_default_instance_;
PROTOBUF_CONSTEXPR VideoUploadRequest::VideoUploadRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.video_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnail_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VideoUploadRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoUploadRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoUploadRequestDefaultTypeInternal() {}
  union {
    VideoUploadRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoUploadRequestDefaultTypeInternal _VideoUploadRequest_default_instance_;
PROTOBUF_CONSTEXPR VideoUploadMetadata::VideoUploadMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.resolution_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.aspect_ratio_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.encoding_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.duration_ms_)*/0u
  , /*decltype(_impl_.bitrate_kbps_)*/0u
  , /*decltype(_impl_.file_size_bytes_)*/uint64_t{0u}
  , /*decltype(_impl_.frame_rate_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VideoUploadMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoUploadMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoUploadMetadataDefaultTypeInternal() {}
  union {
    VideoUploadMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoUploadMetadataDefaultTypeInternal _VideoUploadMetadata_default_instance_;
PROTOBUF_CONSTEXPR VideoUploadResponse::VideoUploadResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.video_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.processing_status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnail_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.playback_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.processing_time_ms_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VideoUploadResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoUploadResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoUploadResponseDefaultTypeInternal() {}
  union {
    VideoUploadResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoUploadResponseDefaultTypeInternal _VideoUploadResponse_default_instance_;
PROTOBUF_CONSTEXPR VideoProcessingStatus::VideoProcessingStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.completed_steps_)*/{}
  , /*decltype(_impl_.video_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.current_step_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.progress_)*/0
  , /*decltype(_impl_.estimated_time_remaining_ms_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VideoProcessingStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoProcessingStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoProcessingStatusDefaultTypeInternal() {}
  union {
    VideoProcessingStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoProcessingStatusDefaultTypeInternal _VideoProcessingStatus_default_instance_;
PROTOBUF_CONSTEXPR VideoAnalytics::VideoAnalytics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.geographic_views_)*/{}
  , /*decltype(_impl_.device_views_)*/{}
  , /*decltype(_impl_.time_views_)*/{}
  , /*decltype(_impl_.video_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.total_views_)*/0u
  , /*decltype(_impl_.unique_viewers_)*/0u
  , /*decltype(_impl_.average_watch_time_ms_)*/0
  , /*decltype(_impl_.completion_rate_)*/0
  , /*decltype(_impl_.skip_rate_)*/0
  , /*decltype(_impl_.engagement_rate_)*/0
  , /*decltype(_impl_.viral_coefficient_)*/0
  , /*decltype(_impl_.retention_score_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VideoAnalyticsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoAnalyticsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoAnalyticsDefaultTypeInternal() {}
  union {
    VideoAnalytics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoAnalyticsDefaultTypeInternal _VideoAnalytics_default_instance_;
PROTOBUF_CONSTEXPR GeographicView::GeographicView(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.country_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.region_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.city_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.engagement_rate_)*/0
  , /*decltype(_impl_.view_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GeographicViewDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GeographicViewDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GeographicViewDefaultTypeInternal() {}
  union {
    GeographicView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GeographicViewDefaultTypeInternal _GeographicView_default_instance_;
PROTOBUF_CONSTEXPR DeviceView::DeviceView(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.platform_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.browser_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.engagement_rate_)*/0
  , /*decltype(_impl_.view_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceViewDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceViewDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceViewDefaultTypeInternal() {}
  union {
    DeviceView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceViewDefaultTypeInternal _DeviceView_default_instance_;
PROTOBUF_CONSTEXPR TimeView::TimeView(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hour_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.day_of_week_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.engagement_rate_)*/0
  , /*decltype(_impl_.view_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimeViewDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeViewDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeViewDefaultTypeInternal() {}
  union {
    TimeView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeViewDefaultTypeInternal _TimeView_default_instance_;
PROTOBUF_CONSTEXPR VideoRecommendation::VideoRecommendation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.factors_)*/{}
  , /*decltype(_impl_.video_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.algorithm_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.relevance_score_)*/0
  , /*decltype(_impl_.confidence_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VideoRecommendationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoRecommendationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoRecommendationDefaultTypeInternal() {}
  union {
    VideoRecommendation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoRecommendationDefaultTypeInternal _VideoRecommendation_default_instance_;
PROTOBUF_CONSTEXPR VideoBatchRequest_ParametersEntry_DoNotUse::VideoBatchRequest_ParametersEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct VideoBatchRequest_ParametersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoBatchRequest_ParametersEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoBatchRequest_ParametersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    VideoBatchRequest_ParametersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoBatchRequest_ParametersEntry_DoNotUseDefaultTypeInternal _VideoBatchRequest_ParametersEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR VideoBatchRequest::VideoBatchRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.video_ids_)*/{}
  , /*decltype(_impl_.parameters_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.operation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VideoBatchRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoBatchRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoBatchRequestDefaultTypeInternal() {}
  union {
    VideoBatchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoBatchRequestDefaultTypeInternal _VideoBatchRequest_default_instance_;
PROTOBUF_CONSTEXPR VideoBatchResponse_ResultsEntry_DoNotUse::VideoBatchResponse_ResultsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct VideoBatchResponse_ResultsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoBatchResponse_ResultsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoBatchResponse_ResultsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    VideoBatchResponse_ResultsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoBatchResponse_ResultsEntry_DoNotUseDefaultTypeInternal _VideoBatchResponse_ResultsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR VideoBatchResponse::VideoBatchResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.failed_video_ids_)*/{}
  , /*decltype(_impl_.results_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.processed_count_)*/0u
  , /*decltype(_impl_.failed_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VideoBatchResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoBatchResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoBatchResponseDefaultTypeInternal() {}
  union {
    VideoBatchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoBatchResponseDefaultTypeInternal _VideoBatchResponse_default_instance_;
}  // namespace common
}  // namespace sonet
static ::_pb::Metadata file_level_metadata_common_2fvideo_5ftypes_2eproto[19];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_common_2fvideo_5ftypes_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_common_2fvideo_5ftypes_2eproto = nullptr;

const uint32_t TableStruct_common_2fvideo_5ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoCandidate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoCandidate, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoCandidate, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoCandidate, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoCandidate, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoCandidate, _impl_.tags_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoCandidate, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoCandidate, _impl_.video_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoCandidate, _impl_.creator_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoCandidate, _impl_.creator_username_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoCandidate, _impl_.creator_display_name_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoCandidate, _impl_.creator_avatar_url_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoCandidate, _impl_.engagement_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoCandidate, _impl_.features_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoCandidate, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoCandidate, _impl_.updated_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoCandidate, _impl_.cursor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoMetadata, _impl_.duration_ms_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoMetadata, _impl_.quality_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoMetadata, _impl_.thumbnail_url_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoMetadata, _impl_.playback_url_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoMetadata, _impl_.resolution_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoMetadata, _impl_.aspect_ratio_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoMetadata, _impl_.file_size_bytes_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoMetadata, _impl_.encoding_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoMetadata, _impl_.bitrate_kbps_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoMetadata, _impl_.frame_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoFeatures, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoFeatures, _impl_.brightness_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoFeatures, _impl_.contrast_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoFeatures, _impl_.saturation_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoFeatures, _impl_.motion_intensity_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoFeatures, _impl_.scene_complexity_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoFeatures, _impl_.audio_quality_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoFeatures, _impl_.background_music_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoFeatures, _impl_.speech_clarity_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoFeatures, _impl_.color_vibrancy_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoFeatures, _impl_.visual_appeal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::common::EngagementMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::common::EngagementMetrics, _impl_.view_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::EngagementMetrics, _impl_.unique_viewers_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::EngagementMetrics, _impl_.like_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::EngagementMetrics, _impl_.renote_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::EngagementMetrics, _impl_.reply_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::EngagementMetrics, _impl_.share_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::EngagementMetrics, _impl_.bookmark_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::EngagementMetrics, _impl_.average_watch_time_ms_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::EngagementMetrics, _impl_.completion_rate_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::EngagementMetrics, _impl_.skip_rate_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::EngagementMetrics, _impl_.engagement_score_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::EngagementMetrics, _impl_.viral_score_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::EngagementMetrics, _impl_.retention_score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoQueryParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoQueryParams, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoQueryParams, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoQueryParams, _impl_.cursor_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoQueryParams, _impl_.categories_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoQueryParams, _impl_.exclude_categories_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoQueryParams, _impl_.tags_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoQueryParams, _impl_.exclude_tags_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoQueryParams, _impl_.min_duration_ms_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoQueryParams, _impl_.max_duration_ms_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoQueryParams, _impl_.quality_preference_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoQueryParams, _impl_.creator_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoQueryParams, _impl_.time_window_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoQueryParams, _impl_.sort_by_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoQueryParams, _impl_.sort_order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoSearchResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoSearchResult, _impl_.videos_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoSearchResult, _impl_.total_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoSearchResult, _impl_.page_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoSearchResult, _impl_.next_cursor_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoSearchResult, _impl_.prev_cursor_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoSearchResult, _impl_.search_relevance_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoSearchResult, _impl_.suggested_queries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoUploadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoUploadRequest, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoUploadRequest, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoUploadRequest, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoUploadRequest, _impl_.tags_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoUploadRequest, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoUploadRequest, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoUploadRequest, _impl_.video_data_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoUploadRequest, _impl_.thumbnail_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoUploadMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoUploadMetadata, _impl_.duration_ms_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoUploadMetadata, _impl_.resolution_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoUploadMetadata, _impl_.aspect_ratio_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoUploadMetadata, _impl_.encoding_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoUploadMetadata, _impl_.bitrate_kbps_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoUploadMetadata, _impl_.frame_rate_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoUploadMetadata, _impl_.file_size_bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoUploadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoUploadResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoUploadResponse, _impl_.video_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoUploadResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoUploadResponse, _impl_.processing_status_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoUploadResponse, _impl_.thumbnail_url_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoUploadResponse, _impl_.playback_url_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoUploadResponse, _impl_.processing_time_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoProcessingStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoProcessingStatus, _impl_.video_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoProcessingStatus, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoProcessingStatus, _impl_.progress_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoProcessingStatus, _impl_.current_step_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoProcessingStatus, _impl_.completed_steps_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoProcessingStatus, _impl_.error_message_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoProcessingStatus, _impl_.estimated_time_remaining_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoAnalytics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoAnalytics, _impl_.video_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoAnalytics, _impl_.total_views_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoAnalytics, _impl_.unique_viewers_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoAnalytics, _impl_.average_watch_time_ms_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoAnalytics, _impl_.completion_rate_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoAnalytics, _impl_.skip_rate_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoAnalytics, _impl_.engagement_rate_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoAnalytics, _impl_.viral_coefficient_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoAnalytics, _impl_.retention_score_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoAnalytics, _impl_.geographic_views_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoAnalytics, _impl_.device_views_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoAnalytics, _impl_.time_views_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::common::GeographicView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::common::GeographicView, _impl_.country_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::GeographicView, _impl_.region_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::GeographicView, _impl_.city_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::GeographicView, _impl_.view_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::GeographicView, _impl_.engagement_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::common::DeviceView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::common::DeviceView, _impl_.device_type_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::DeviceView, _impl_.platform_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::DeviceView, _impl_.browser_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::DeviceView, _impl_.view_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::DeviceView, _impl_.engagement_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::common::TimeView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::common::TimeView, _impl_.hour_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::TimeView, _impl_.day_of_week_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::TimeView, _impl_.view_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::TimeView, _impl_.engagement_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoRecommendation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoRecommendation, _impl_.video_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoRecommendation, _impl_.relevance_score_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoRecommendation, _impl_.reason_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoRecommendation, _impl_.factors_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoRecommendation, _impl_.algorithm_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoRecommendation, _impl_.confidence_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoBatchRequest_ParametersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoBatchRequest_ParametersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoBatchRequest_ParametersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoBatchRequest_ParametersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoBatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoBatchRequest, _impl_.video_ids_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoBatchRequest, _impl_.operation_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoBatchRequest, _impl_.parameters_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoBatchResponse_ResultsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoBatchResponse_ResultsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoBatchResponse_ResultsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoBatchResponse_ResultsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoBatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoBatchResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoBatchResponse, _impl_.processed_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoBatchResponse, _impl_.failed_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoBatchResponse, _impl_.failed_video_ids_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoBatchResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::sonet::common::VideoBatchResponse, _impl_.results_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::sonet::common::VideoCandidate)},
  { 22, -1, -1, sizeof(::sonet::common::VideoMetadata)},
  { 38, -1, -1, sizeof(::sonet::common::VideoFeatures)},
  { 54, -1, -1, sizeof(::sonet::common::EngagementMetrics)},
  { 73, -1, -1, sizeof(::sonet::common::VideoQueryParams)},
  { 93, -1, -1, sizeof(::sonet::common::VideoSearchResult)},
  { 106, -1, -1, sizeof(::sonet::common::VideoUploadRequest)},
  { 120, -1, -1, sizeof(::sonet::common::VideoUploadMetadata)},
  { 133, -1, -1, sizeof(::sonet::common::VideoUploadResponse)},
  { 146, -1, -1, sizeof(::sonet::common::VideoProcessingStatus)},
  { 159, -1, -1, sizeof(::sonet::common::VideoAnalytics)},
  { 177, -1, -1, sizeof(::sonet::common::GeographicView)},
  { 188, -1, -1, sizeof(::sonet::common::DeviceView)},
  { 199, -1, -1, sizeof(::sonet::common::TimeView)},
  { 209, -1, -1, sizeof(::sonet::common::VideoRecommendation)},
  { 221, 229, -1, sizeof(::sonet::common::VideoBatchRequest_ParametersEntry_DoNotUse)},
  { 231, -1, -1, sizeof(::sonet::common::VideoBatchRequest)},
  { 240, 248, -1, sizeof(::sonet::common::VideoBatchResponse_ResultsEntry_DoNotUse)},
  { 250, -1, -1, sizeof(::sonet::common::VideoBatchResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::sonet::common::_VideoCandidate_default_instance_._instance,
  &::sonet::common::_VideoMetadata_default_instance_._instance,
  &::sonet::common::_VideoFeatures_default_instance_._instance,
  &::sonet::common::_EngagementMetrics_default_instance_._instance,
  &::sonet::common::_VideoQueryParams_default_instance_._instance,
  &::sonet::common::_VideoSearchResult_default_instance_._instance,
  &::sonet::common::_VideoUploadRequest_default_instance_._instance,
  &::sonet::common::_VideoUploadMetadata_default_instance_._instance,
  &::sonet::common::_VideoUploadResponse_default_instance_._instance,
  &::sonet::common::_VideoProcessingStatus_default_instance_._instance,
  &::sonet::common::_VideoAnalytics_default_instance_._instance,
  &::sonet::common::_GeographicView_default_instance_._instance,
  &::sonet::common::_DeviceView_default_instance_._instance,
  &::sonet::common::_TimeView_default_instance_._instance,
  &::sonet::common::_VideoRecommendation_default_instance_._instance,
  &::sonet::common::_VideoBatchRequest_ParametersEntry_DoNotUse_default_instance_._instance,
  &::sonet::common::_VideoBatchRequest_default_instance_._instance,
  &::sonet::common::_VideoBatchResponse_ResultsEntry_DoNotUse_default_instance_._instance,
  &::sonet::common::_VideoBatchResponse_default_instance_._instance,
};

const char descriptor_table_protodef_common_2fvideo_5ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030common/video_types.proto\022\014sonet.common"
  "\"\242\003\n\016VideoCandidate\022\n\n\002id\030\001 \001(\t\022\r\n\005title"
  "\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\022\020\n\010category\030"
  "\004 \001(\t\022\014\n\004tags\030\005 \003(\t\022\020\n\010language\030\006 \001(\t\022*\n"
  "\005video\030\007 \001(\0132\033.sonet.common.VideoMetadat"
  "a\022\022\n\ncreator_id\030\010 \001(\t\022\030\n\020creator_usernam"
  "e\030\t \001(\t\022\034\n\024creator_display_name\030\n \001(\t\022\032\n"
  "\022creator_avatar_url\030\013 \001(\t\0223\n\nengagement\030"
  "\014 \001(\0132\037.sonet.common.EngagementMetrics\022-"
  "\n\010features\030\r \001(\0132\033.sonet.common.VideoFea"
  "tures\022\022\n\ncreated_at\030\016 \001(\t\022\022\n\nupdated_at\030"
  "\017 \001(\t\022\016\n\006cursor\030\020 \001(\t\"\341\001\n\rVideoMetadata\022"
  "\023\n\013duration_ms\030\001 \001(\r\022\017\n\007quality\030\002 \001(\t\022\025\n"
  "\rthumbnail_url\030\003 \001(\t\022\024\n\014playback_url\030\004 \001"
  "(\t\022\022\n\nresolution\030\005 \001(\t\022\024\n\014aspect_ratio\030\006"
  " \001(\t\022\027\n\017file_size_bytes\030\007 \001(\004\022\020\n\010encodin"
  "g\030\010 \001(\t\022\024\n\014bitrate_kbps\030\t \001(\r\022\022\n\nframe_r"
  "ate\030\n \001(\r\"\365\001\n\rVideoFeatures\022\022\n\nbrightnes"
  "s\030\001 \001(\001\022\020\n\010contrast\030\002 \001(\001\022\022\n\nsaturation\030"
  "\003 \001(\001\022\030\n\020motion_intensity\030\004 \001(\001\022\030\n\020scene"
  "_complexity\030\005 \001(\001\022\025\n\raudio_quality\030\006 \001(\001"
  "\022\030\n\020background_music\030\007 \001(\010\022\026\n\016speech_cla"
  "rity\030\010 \001(\001\022\026\n\016color_vibrancy\030\t \001(\001\022\025\n\rvi"
  "sual_appeal\030\n \001(\001\"\276\002\n\021EngagementMetrics\022"
  "\022\n\nview_count\030\001 \001(\r\022\026\n\016unique_viewers\030\002 "
  "\001(\r\022\022\n\nlike_count\030\003 \001(\r\022\024\n\014renote_count\030"
  "\004 \001(\r\022\023\n\013reply_count\030\005 \001(\r\022\023\n\013share_coun"
  "t\030\006 \001(\r\022\026\n\016bookmark_count\030\007 \001(\r\022\035\n\025avera"
  "ge_watch_time_ms\030\010 \001(\001\022\027\n\017completion_rat"
  "e\030\t \001(\001\022\021\n\tskip_rate\030\n \001(\001\022\030\n\020engagement"
  "_score\030\013 \001(\001\022\023\n\013viral_score\030\014 \001(\001\022\027\n\017ret"
  "ention_score\030\r \001(\001\"\261\002\n\020VideoQueryParams\022"
  "\r\n\005limit\030\001 \001(\r\022\016\n\006offset\030\002 \001(\r\022\016\n\006cursor"
  "\030\003 \001(\t\022\022\n\ncategories\030\004 \003(\t\022\032\n\022exclude_ca"
  "tegories\030\005 \003(\t\022\014\n\004tags\030\006 \003(\t\022\024\n\014exclude_"
  "tags\030\007 \003(\t\022\027\n\017min_duration_ms\030\010 \001(\r\022\027\n\017m"
  "ax_duration_ms\030\t \001(\r\022\032\n\022quality_preferen"
  "ce\030\n \001(\t\022\022\n\ncreator_id\030\013 \001(\t\022\023\n\013time_win"
  "dow\030\014 \001(\t\022\017\n\007sort_by\030\r \001(\t\022\022\n\nsort_order"
  "\030\016 \001(\t\"\311\001\n\021VideoSearchResult\022,\n\006videos\030\001"
  " \003(\0132\034.sonet.common.VideoCandidate\022\023\n\013to"
  "tal_count\030\002 \001(\r\022\022\n\npage_count\030\003 \001(\r\022\023\n\013n"
  "ext_cursor\030\004 \001(\t\022\023\n\013prev_cursor\030\005 \001(\t\022\030\n"
  "\020search_relevance\030\006 \001(\001\022\031\n\021suggested_que"
  "ries\030\007 \003(\t\"\313\001\n\022VideoUploadRequest\022\r\n\005tit"
  "le\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022\020\n\010categor"
  "y\030\003 \001(\t\022\014\n\004tags\030\004 \003(\t\022\020\n\010language\030\005 \001(\t\022"
  "3\n\010metadata\030\006 \001(\0132!.sonet.common.VideoUp"
  "loadMetadata\022\022\n\nvideo_data\030\007 \001(\014\022\026\n\016thum"
  "bnail_data\030\010 \001(\014\"\251\001\n\023VideoUploadMetadata"
  "\022\023\n\013duration_ms\030\001 \001(\r\022\022\n\nresolution\030\002 \001("
  "\t\022\024\n\014aspect_ratio\030\003 \001(\t\022\020\n\010encoding\030\004 \001("
  "\t\022\024\n\014bitrate_kbps\030\005 \001(\r\022\022\n\nframe_rate\030\006 "
  "\001(\r\022\027\n\017file_size_bytes\030\007 \001(\004\"\255\001\n\023VideoUp"
  "loadResponse\022\017\n\007success\030\001 \001(\010\022\020\n\010video_i"
  "d\030\002 \001(\t\022\017\n\007message\030\003 \001(\t\022\031\n\021processing_s"
  "tatus\030\004 \001(\t\022\025\n\rthumbnail_url\030\005 \001(\t\022\024\n\014pl"
  "ayback_url\030\006 \001(\t\022\032\n\022processing_time_ms\030\007"
  " \001(\r\"\266\001\n\025VideoProcessingStatus\022\020\n\010video_"
  "id\030\001 \001(\t\022\016\n\006status\030\002 \001(\t\022\020\n\010progress\030\003 \001"
  "(\001\022\024\n\014current_step\030\004 \001(\t\022\027\n\017completed_st"
  "eps\030\005 \003(\t\022\025\n\rerror_message\030\006 \001(\t\022#\n\033esti"
  "mated_time_remaining_ms\030\007 \001(\r\"\373\002\n\016VideoA"
  "nalytics\022\020\n\010video_id\030\001 \001(\t\022\023\n\013total_view"
  "s\030\002 \001(\r\022\026\n\016unique_viewers\030\003 \001(\r\022\035\n\025avera"
  "ge_watch_time_ms\030\004 \001(\001\022\027\n\017completion_rat"
  "e\030\005 \001(\001\022\021\n\tskip_rate\030\006 \001(\001\022\027\n\017engagement"
  "_rate\030\007 \001(\001\022\031\n\021viral_coefficient\030\010 \001(\001\022\027"
  "\n\017retention_score\030\t \001(\001\0226\n\020geographic_vi"
  "ews\030\n \003(\0132\034.sonet.common.GeographicView\022"
  ".\n\014device_views\030\013 \003(\0132\030.sonet.common.Dev"
  "iceView\022*\n\ntime_views\030\014 \003(\0132\026.sonet.comm"
  "on.TimeView\"l\n\016GeographicView\022\017\n\007country"
  "\030\001 \001(\t\022\016\n\006region\030\002 \001(\t\022\014\n\004city\030\003 \001(\t\022\022\n\n"
  "view_count\030\004 \001(\r\022\027\n\017engagement_rate\030\005 \001("
  "\001\"q\n\nDeviceView\022\023\n\013device_type\030\001 \001(\t\022\020\n\010"
  "platform\030\002 \001(\t\022\017\n\007browser\030\003 \001(\t\022\022\n\nview_"
  "count\030\004 \001(\r\022\027\n\017engagement_rate\030\005 \001(\001\"Z\n\010"
  "TimeView\022\014\n\004hour\030\001 \001(\t\022\023\n\013day_of_week\030\002 "
  "\001(\t\022\022\n\nview_count\030\003 \001(\r\022\027\n\017engagement_ra"
  "te\030\004 \001(\001\"\210\001\n\023VideoRecommendation\022\020\n\010vide"
  "o_id\030\001 \001(\t\022\027\n\017relevance_score\030\002 \001(\001\022\016\n\006r"
  "eason\030\003 \001(\t\022\017\n\007factors\030\004 \003(\t\022\021\n\talgorith"
  "m\030\005 \001(\t\022\022\n\nconfidence\030\006 \001(\001\"\261\001\n\021VideoBat"
  "chRequest\022\021\n\tvideo_ids\030\001 \003(\t\022\021\n\toperatio"
  "n\030\002 \001(\t\022C\n\nparameters\030\003 \003(\0132/.sonet.comm"
  "on.VideoBatchRequest.ParametersEntry\0321\n\017"
  "ParametersEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 "
  "\001(\t:\0028\001\"\357\001\n\022VideoBatchResponse\022\017\n\007succes"
  "s\030\001 \001(\010\022\027\n\017processed_count\030\002 \001(\r\022\024\n\014fail"
  "ed_count\030\003 \001(\r\022\030\n\020failed_video_ids\030\004 \003(\t"
  "\022\017\n\007message\030\005 \001(\t\022>\n\007results\030\006 \003(\0132-.son"
  "et.common.VideoBatchResponse.ResultsEntr"
  "y\032.\n\014ResultsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
  "\002 \001(\t:\0028\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_common_2fvideo_5ftypes_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_common_2fvideo_5ftypes_2eproto = {
    false, false, 3777, descriptor_table_protodef_common_2fvideo_5ftypes_2eproto,
    "common/video_types.proto",
    &descriptor_table_common_2fvideo_5ftypes_2eproto_once, nullptr, 0, 19,
    schemas, file_default_instances, TableStruct_common_2fvideo_5ftypes_2eproto::offsets,
    file_level_metadata_common_2fvideo_5ftypes_2eproto, file_level_enum_descriptors_common_2fvideo_5ftypes_2eproto,
    file_level_service_descriptors_common_2fvideo_5ftypes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_common_2fvideo_5ftypes_2eproto_getter() {
  return &descriptor_table_common_2fvideo_5ftypes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_common_2fvideo_5ftypes_2eproto(&descriptor_table_common_2fvideo_5ftypes_2eproto);
namespace sonet {
namespace common {

// ===================================================================

class VideoCandidate::_Internal {
 public:
  static const ::sonet::common::VideoMetadata& video(const VideoCandidate* msg);
  static const ::sonet::common::EngagementMetrics& engagement(const VideoCandidate* msg);
  static const ::sonet::common::VideoFeatures& features(const VideoCandidate* msg);
};

const ::sonet::common::VideoMetadata&
VideoCandidate::_Internal::video(const VideoCandidate* msg) {
  return *msg->_impl_.video_;
}
const ::sonet::common::EngagementMetrics&
VideoCandidate::_Internal::engagement(const VideoCandidate* msg) {
  return *msg->_impl_.engagement_;
}
const ::sonet::common::VideoFeatures&
VideoCandidate::_Internal::features(const VideoCandidate* msg) {
  return *msg->_impl_.features_;
}
VideoCandidate::VideoCandidate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.common.VideoCandidate)
}
VideoCandidate::VideoCandidate(const VideoCandidate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VideoCandidate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){from._impl_.tags_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.category_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.creator_id_){}
    , decltype(_impl_.creator_username_){}
    , decltype(_impl_.creator_display_name_){}
    , decltype(_impl_.creator_avatar_url_){}
    , decltype(_impl_.created_at_){}
    , decltype(_impl_.updated_at_){}
    , decltype(_impl_.cursor_){}
    , decltype(_impl_.video_){nullptr}
    , decltype(_impl_.engagement_){nullptr}
    , decltype(_impl_.features_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language().empty()) {
    _this->_impl_.language_.Set(from._internal_language(), 
      _this->GetArenaForAllocation());
  }
  _impl_.creator_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creator_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creator_id().empty()) {
    _this->_impl_.creator_id_.Set(from._internal_creator_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.creator_username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creator_username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creator_username().empty()) {
    _this->_impl_.creator_username_.Set(from._internal_creator_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.creator_display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creator_display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creator_display_name().empty()) {
    _this->_impl_.creator_display_name_.Set(from._internal_creator_display_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.creator_avatar_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creator_avatar_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creator_avatar_url().empty()) {
    _this->_impl_.creator_avatar_url_.Set(from._internal_creator_avatar_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.created_at_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.created_at_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_created_at().empty()) {
    _this->_impl_.created_at_.Set(from._internal_created_at(), 
      _this->GetArenaForAllocation());
  }
  _impl_.updated_at_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.updated_at_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_updated_at().empty()) {
    _this->_impl_.updated_at_.Set(from._internal_updated_at(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cursor().empty()) {
    _this->_impl_.cursor_.Set(from._internal_cursor(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_video()) {
    _this->_impl_.video_ = new ::sonet::common::VideoMetadata(*from._impl_.video_);
  }
  if (from._internal_has_engagement()) {
    _this->_impl_.engagement_ = new ::sonet::common::EngagementMetrics(*from._impl_.engagement_);
  }
  if (from._internal_has_features()) {
    _this->_impl_.features_ = new ::sonet::common::VideoFeatures(*from._impl_.features_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.common.VideoCandidate)
}

inline void VideoCandidate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.category_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.creator_id_){}
    , decltype(_impl_.creator_username_){}
    , decltype(_impl_.creator_display_name_){}
    , decltype(_impl_.creator_avatar_url_){}
    , decltype(_impl_.created_at_){}
    , decltype(_impl_.updated_at_){}
    , decltype(_impl_.cursor_){}
    , decltype(_impl_.video_){nullptr}
    , decltype(_impl_.engagement_){nullptr}
    , decltype(_impl_.features_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.creator_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creator_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.creator_username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creator_username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.creator_display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creator_display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.creator_avatar_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creator_avatar_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.created_at_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.created_at_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.updated_at_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.updated_at_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VideoCandidate::~VideoCandidate() {
  // @@protoc_insertion_point(destructor:sonet.common.VideoCandidate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoCandidate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tags_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.category_.Destroy();
  _impl_.language_.Destroy();
  _impl_.creator_id_.Destroy();
  _impl_.creator_username_.Destroy();
  _impl_.creator_display_name_.Destroy();
  _impl_.creator_avatar_url_.Destroy();
  _impl_.created_at_.Destroy();
  _impl_.updated_at_.Destroy();
  _impl_.cursor_.Destroy();
  if (this != internal_default_instance()) delete _impl_.video_;
  if (this != internal_default_instance()) delete _impl_.engagement_;
  if (this != internal_default_instance()) delete _impl_.features_;
}

void VideoCandidate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoCandidate::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.common.VideoCandidate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tags_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.category_.ClearToEmpty();
  _impl_.language_.ClearToEmpty();
  _impl_.creator_id_.ClearToEmpty();
  _impl_.creator_username_.ClearToEmpty();
  _impl_.creator_display_name_.ClearToEmpty();
  _impl_.creator_avatar_url_.ClearToEmpty();
  _impl_.created_at_.ClearToEmpty();
  _impl_.updated_at_.ClearToEmpty();
  _impl_.cursor_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.video_ != nullptr) {
    delete _impl_.video_;
  }
  _impl_.video_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.engagement_ != nullptr) {
    delete _impl_.engagement_;
  }
  _impl_.engagement_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.features_ != nullptr) {
    delete _impl_.features_;
  }
  _impl_.features_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoCandidate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoCandidate.id"));
        } else
          goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoCandidate.title"));
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoCandidate.description"));
        } else
          goto handle_unusual;
        continue;
      // string category = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoCandidate.category"));
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoCandidate.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string language = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoCandidate.language"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.VideoMetadata video = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_video(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string creator_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_creator_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoCandidate.creator_id"));
        } else
          goto handle_unusual;
        continue;
      // string creator_username = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_creator_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoCandidate.creator_username"));
        } else
          goto handle_unusual;
        continue;
      // string creator_display_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_creator_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoCandidate.creator_display_name"));
        } else
          goto handle_unusual;
        continue;
      // string creator_avatar_url = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_creator_avatar_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoCandidate.creator_avatar_url"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.EngagementMetrics engagement = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_engagement(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.VideoFeatures features = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_features(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string created_at = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_created_at();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoCandidate.created_at"));
        } else
          goto handle_unusual;
        continue;
      // string updated_at = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_updated_at();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoCandidate.updated_at"));
        } else
          goto handle_unusual;
        continue;
      // string cursor = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_cursor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoCandidate.cursor"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoCandidate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.common.VideoCandidate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoCandidate.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoCandidate.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoCandidate.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // string category = 4;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoCandidate.category");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_category(), target);
  }

  // repeated string tags = 5;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoCandidate.tags");
    target = stream->WriteString(5, s, target);
  }

  // string language = 6;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoCandidate.language");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_language(), target);
  }

  // .sonet.common.VideoMetadata video = 7;
  if (this->_internal_has_video()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::video(this),
        _Internal::video(this).GetCachedSize(), target, stream);
  }

  // string creator_id = 8;
  if (!this->_internal_creator_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creator_id().data(), static_cast<int>(this->_internal_creator_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoCandidate.creator_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_creator_id(), target);
  }

  // string creator_username = 9;
  if (!this->_internal_creator_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creator_username().data(), static_cast<int>(this->_internal_creator_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoCandidate.creator_username");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_creator_username(), target);
  }

  // string creator_display_name = 10;
  if (!this->_internal_creator_display_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creator_display_name().data(), static_cast<int>(this->_internal_creator_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoCandidate.creator_display_name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_creator_display_name(), target);
  }

  // string creator_avatar_url = 11;
  if (!this->_internal_creator_avatar_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creator_avatar_url().data(), static_cast<int>(this->_internal_creator_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoCandidate.creator_avatar_url");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_creator_avatar_url(), target);
  }

  // .sonet.common.EngagementMetrics engagement = 12;
  if (this->_internal_has_engagement()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::engagement(this),
        _Internal::engagement(this).GetCachedSize(), target, stream);
  }

  // .sonet.common.VideoFeatures features = 13;
  if (this->_internal_has_features()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::features(this),
        _Internal::features(this).GetCachedSize(), target, stream);
  }

  // string created_at = 14;
  if (!this->_internal_created_at().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_created_at().data(), static_cast<int>(this->_internal_created_at().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoCandidate.created_at");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_created_at(), target);
  }

  // string updated_at = 15;
  if (!this->_internal_updated_at().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_updated_at().data(), static_cast<int>(this->_internal_updated_at().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoCandidate.updated_at");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_updated_at(), target);
  }

  // string cursor = 16;
  if (!this->_internal_cursor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoCandidate.cursor");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.common.VideoCandidate)
  return target;
}

size_t VideoCandidate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.common.VideoCandidate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tags_.size());
  for (int i = 0, n = _impl_.tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tags_.Get(i));
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string category = 4;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // string language = 6;
  if (!this->_internal_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // string creator_id = 8;
  if (!this->_internal_creator_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creator_id());
  }

  // string creator_username = 9;
  if (!this->_internal_creator_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creator_username());
  }

  // string creator_display_name = 10;
  if (!this->_internal_creator_display_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creator_display_name());
  }

  // string creator_avatar_url = 11;
  if (!this->_internal_creator_avatar_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creator_avatar_url());
  }

  // string created_at = 14;
  if (!this->_internal_created_at().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_created_at());
  }

  // string updated_at = 15;
  if (!this->_internal_updated_at().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updated_at());
  }

  // string cursor = 16;
  if (!this->_internal_cursor().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cursor());
  }

  // .sonet.common.VideoMetadata video = 7;
  if (this->_internal_has_video()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.video_);
  }

  // .sonet.common.EngagementMetrics engagement = 12;
  if (this->_internal_has_engagement()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.engagement_);
  }

  // .sonet.common.VideoFeatures features = 13;
  if (this->_internal_has_features()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.features_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoCandidate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VideoCandidate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoCandidate::GetClassData() const { return &_class_data_; }


void VideoCandidate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VideoCandidate*>(&to_msg);
  auto& from = static_cast<const VideoCandidate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.common.VideoCandidate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (!from._internal_language().empty()) {
    _this->_internal_set_language(from._internal_language());
  }
  if (!from._internal_creator_id().empty()) {
    _this->_internal_set_creator_id(from._internal_creator_id());
  }
  if (!from._internal_creator_username().empty()) {
    _this->_internal_set_creator_username(from._internal_creator_username());
  }
  if (!from._internal_creator_display_name().empty()) {
    _this->_internal_set_creator_display_name(from._internal_creator_display_name());
  }
  if (!from._internal_creator_avatar_url().empty()) {
    _this->_internal_set_creator_avatar_url(from._internal_creator_avatar_url());
  }
  if (!from._internal_created_at().empty()) {
    _this->_internal_set_created_at(from._internal_created_at());
  }
  if (!from._internal_updated_at().empty()) {
    _this->_internal_set_updated_at(from._internal_updated_at());
  }
  if (!from._internal_cursor().empty()) {
    _this->_internal_set_cursor(from._internal_cursor());
  }
  if (from._internal_has_video()) {
    _this->_internal_mutable_video()->::sonet::common::VideoMetadata::MergeFrom(
        from._internal_video());
  }
  if (from._internal_has_engagement()) {
    _this->_internal_mutable_engagement()->::sonet::common::EngagementMetrics::MergeFrom(
        from._internal_engagement());
  }
  if (from._internal_has_features()) {
    _this->_internal_mutable_features()->::sonet::common::VideoFeatures::MergeFrom(
        from._internal_features());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoCandidate::CopyFrom(const VideoCandidate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.common.VideoCandidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoCandidate::IsInitialized() const {
  return true;
}

void VideoCandidate::InternalSwap(VideoCandidate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.language_, lhs_arena,
      &other->_impl_.language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.creator_id_, lhs_arena,
      &other->_impl_.creator_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.creator_username_, lhs_arena,
      &other->_impl_.creator_username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.creator_display_name_, lhs_arena,
      &other->_impl_.creator_display_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.creator_avatar_url_, lhs_arena,
      &other->_impl_.creator_avatar_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.created_at_, lhs_arena,
      &other->_impl_.created_at_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.updated_at_, lhs_arena,
      &other->_impl_.updated_at_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cursor_, lhs_arena,
      &other->_impl_.cursor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoCandidate, _impl_.features_)
      + sizeof(VideoCandidate::_impl_.features_)
      - PROTOBUF_FIELD_OFFSET(VideoCandidate, _impl_.video_)>(
          reinterpret_cast<char*>(&_impl_.video_),
          reinterpret_cast<char*>(&other->_impl_.video_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoCandidate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fvideo_5ftypes_2eproto_getter, &descriptor_table_common_2fvideo_5ftypes_2eproto_once,
      file_level_metadata_common_2fvideo_5ftypes_2eproto[0]);
}

// ===================================================================

class VideoMetadata::_Internal {
 public:
};

VideoMetadata::VideoMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.common.VideoMetadata)
}
VideoMetadata::VideoMetadata(const VideoMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VideoMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.quality_){}
    , decltype(_impl_.thumbnail_url_){}
    , decltype(_impl_.playback_url_){}
    , decltype(_impl_.resolution_){}
    , decltype(_impl_.aspect_ratio_){}
    , decltype(_impl_.encoding_){}
    , decltype(_impl_.duration_ms_){}
    , decltype(_impl_.bitrate_kbps_){}
    , decltype(_impl_.file_size_bytes_){}
    , decltype(_impl_.frame_rate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.quality_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.quality_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quality().empty()) {
    _this->_impl_.quality_.Set(from._internal_quality(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnail_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnail_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_thumbnail_url().empty()) {
    _this->_impl_.thumbnail_url_.Set(from._internal_thumbnail_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.playback_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playback_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playback_url().empty()) {
    _this->_impl_.playback_url_.Set(from._internal_playback_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.resolution_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resolution_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resolution().empty()) {
    _this->_impl_.resolution_.Set(from._internal_resolution(), 
      _this->GetArenaForAllocation());
  }
  _impl_.aspect_ratio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aspect_ratio_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_aspect_ratio().empty()) {
    _this->_impl_.aspect_ratio_.Set(from._internal_aspect_ratio(), 
      _this->GetArenaForAllocation());
  }
  _impl_.encoding_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encoding_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encoding().empty()) {
    _this->_impl_.encoding_.Set(from._internal_encoding(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.duration_ms_, &from._impl_.duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.frame_rate_) -
    reinterpret_cast<char*>(&_impl_.duration_ms_)) + sizeof(_impl_.frame_rate_));
  // @@protoc_insertion_point(copy_constructor:sonet.common.VideoMetadata)
}

inline void VideoMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.quality_){}
    , decltype(_impl_.thumbnail_url_){}
    , decltype(_impl_.playback_url_){}
    , decltype(_impl_.resolution_){}
    , decltype(_impl_.aspect_ratio_){}
    , decltype(_impl_.encoding_){}
    , decltype(_impl_.duration_ms_){0u}
    , decltype(_impl_.bitrate_kbps_){0u}
    , decltype(_impl_.file_size_bytes_){uint64_t{0u}}
    , decltype(_impl_.frame_rate_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.quality_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.quality_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnail_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnail_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.playback_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playback_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.resolution_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resolution_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.aspect_ratio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aspect_ratio_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.encoding_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encoding_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VideoMetadata::~VideoMetadata() {
  // @@protoc_insertion_point(destructor:sonet.common.VideoMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.quality_.Destroy();
  _impl_.thumbnail_url_.Destroy();
  _impl_.playback_url_.Destroy();
  _impl_.resolution_.Destroy();
  _impl_.aspect_ratio_.Destroy();
  _impl_.encoding_.Destroy();
}

void VideoMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.common.VideoMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.quality_.ClearToEmpty();
  _impl_.thumbnail_url_.ClearToEmpty();
  _impl_.playback_url_.ClearToEmpty();
  _impl_.resolution_.ClearToEmpty();
  _impl_.aspect_ratio_.ClearToEmpty();
  _impl_.encoding_.ClearToEmpty();
  ::memset(&_impl_.duration_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.frame_rate_) -
      reinterpret_cast<char*>(&_impl_.duration_ms_)) + sizeof(_impl_.frame_rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 duration_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_quality();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoMetadata.quality"));
        } else
          goto handle_unusual;
        continue;
      // string thumbnail_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_thumbnail_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoMetadata.thumbnail_url"));
        } else
          goto handle_unusual;
        continue;
      // string playback_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_playback_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoMetadata.playback_url"));
        } else
          goto handle_unusual;
        continue;
      // string resolution = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_resolution();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoMetadata.resolution"));
        } else
          goto handle_unusual;
        continue;
      // string aspect_ratio = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_aspect_ratio();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoMetadata.aspect_ratio"));
        } else
          goto handle_unusual;
        continue;
      // uint64 file_size_bytes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.file_size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string encoding = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_encoding();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoMetadata.encoding"));
        } else
          goto handle_unusual;
        continue;
      // uint32 bitrate_kbps = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.bitrate_kbps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 frame_rate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.frame_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.common.VideoMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 duration_ms = 1;
  if (this->_internal_duration_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_duration_ms(), target);
  }

  // string quality = 2;
  if (!this->_internal_quality().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quality().data(), static_cast<int>(this->_internal_quality().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoMetadata.quality");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_quality(), target);
  }

  // string thumbnail_url = 3;
  if (!this->_internal_thumbnail_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_thumbnail_url().data(), static_cast<int>(this->_internal_thumbnail_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoMetadata.thumbnail_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_thumbnail_url(), target);
  }

  // string playback_url = 4;
  if (!this->_internal_playback_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playback_url().data(), static_cast<int>(this->_internal_playback_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoMetadata.playback_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_playback_url(), target);
  }

  // string resolution = 5;
  if (!this->_internal_resolution().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resolution().data(), static_cast<int>(this->_internal_resolution().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoMetadata.resolution");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_resolution(), target);
  }

  // string aspect_ratio = 6;
  if (!this->_internal_aspect_ratio().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aspect_ratio().data(), static_cast<int>(this->_internal_aspect_ratio().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoMetadata.aspect_ratio");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_aspect_ratio(), target);
  }

  // uint64 file_size_bytes = 7;
  if (this->_internal_file_size_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_file_size_bytes(), target);
  }

  // string encoding = 8;
  if (!this->_internal_encoding().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encoding().data(), static_cast<int>(this->_internal_encoding().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoMetadata.encoding");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_encoding(), target);
  }

  // uint32 bitrate_kbps = 9;
  if (this->_internal_bitrate_kbps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_bitrate_kbps(), target);
  }

  // uint32 frame_rate = 10;
  if (this->_internal_frame_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_frame_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.common.VideoMetadata)
  return target;
}

size_t VideoMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.common.VideoMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string quality = 2;
  if (!this->_internal_quality().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quality());
  }

  // string thumbnail_url = 3;
  if (!this->_internal_thumbnail_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thumbnail_url());
  }

  // string playback_url = 4;
  if (!this->_internal_playback_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playback_url());
  }

  // string resolution = 5;
  if (!this->_internal_resolution().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resolution());
  }

  // string aspect_ratio = 6;
  if (!this->_internal_aspect_ratio().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aspect_ratio());
  }

  // string encoding = 8;
  if (!this->_internal_encoding().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encoding());
  }

  // uint32 duration_ms = 1;
  if (this->_internal_duration_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration_ms());
  }

  // uint32 bitrate_kbps = 9;
  if (this->_internal_bitrate_kbps() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bitrate_kbps());
  }

  // uint64 file_size_bytes = 7;
  if (this->_internal_file_size_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_file_size_bytes());
  }

  // uint32 frame_rate = 10;
  if (this->_internal_frame_rate() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_rate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VideoMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoMetadata::GetClassData() const { return &_class_data_; }


void VideoMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VideoMetadata*>(&to_msg);
  auto& from = static_cast<const VideoMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.common.VideoMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_quality().empty()) {
    _this->_internal_set_quality(from._internal_quality());
  }
  if (!from._internal_thumbnail_url().empty()) {
    _this->_internal_set_thumbnail_url(from._internal_thumbnail_url());
  }
  if (!from._internal_playback_url().empty()) {
    _this->_internal_set_playback_url(from._internal_playback_url());
  }
  if (!from._internal_resolution().empty()) {
    _this->_internal_set_resolution(from._internal_resolution());
  }
  if (!from._internal_aspect_ratio().empty()) {
    _this->_internal_set_aspect_ratio(from._internal_aspect_ratio());
  }
  if (!from._internal_encoding().empty()) {
    _this->_internal_set_encoding(from._internal_encoding());
  }
  if (from._internal_duration_ms() != 0) {
    _this->_internal_set_duration_ms(from._internal_duration_ms());
  }
  if (from._internal_bitrate_kbps() != 0) {
    _this->_internal_set_bitrate_kbps(from._internal_bitrate_kbps());
  }
  if (from._internal_file_size_bytes() != 0) {
    _this->_internal_set_file_size_bytes(from._internal_file_size_bytes());
  }
  if (from._internal_frame_rate() != 0) {
    _this->_internal_set_frame_rate(from._internal_frame_rate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoMetadata::CopyFrom(const VideoMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.common.VideoMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoMetadata::IsInitialized() const {
  return true;
}

void VideoMetadata::InternalSwap(VideoMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.quality_, lhs_arena,
      &other->_impl_.quality_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnail_url_, lhs_arena,
      &other->_impl_.thumbnail_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.playback_url_, lhs_arena,
      &other->_impl_.playback_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resolution_, lhs_arena,
      &other->_impl_.resolution_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.aspect_ratio_, lhs_arena,
      &other->_impl_.aspect_ratio_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encoding_, lhs_arena,
      &other->_impl_.encoding_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoMetadata, _impl_.frame_rate_)
      + sizeof(VideoMetadata::_impl_.frame_rate_)
      - PROTOBUF_FIELD_OFFSET(VideoMetadata, _impl_.duration_ms_)>(
          reinterpret_cast<char*>(&_impl_.duration_ms_),
          reinterpret_cast<char*>(&other->_impl_.duration_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fvideo_5ftypes_2eproto_getter, &descriptor_table_common_2fvideo_5ftypes_2eproto_once,
      file_level_metadata_common_2fvideo_5ftypes_2eproto[1]);
}

// ===================================================================

class VideoFeatures::_Internal {
 public:
};

VideoFeatures::VideoFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.common.VideoFeatures)
}
VideoFeatures::VideoFeatures(const VideoFeatures& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VideoFeatures* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.brightness_){}
    , decltype(_impl_.contrast_){}
    , decltype(_impl_.saturation_){}
    , decltype(_impl_.motion_intensity_){}
    , decltype(_impl_.scene_complexity_){}
    , decltype(_impl_.audio_quality_){}
    , decltype(_impl_.speech_clarity_){}
    , decltype(_impl_.color_vibrancy_){}
    , decltype(_impl_.visual_appeal_){}
    , decltype(_impl_.background_music_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.brightness_, &from._impl_.brightness_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.background_music_) -
    reinterpret_cast<char*>(&_impl_.brightness_)) + sizeof(_impl_.background_music_));
  // @@protoc_insertion_point(copy_constructor:sonet.common.VideoFeatures)
}

inline void VideoFeatures::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.brightness_){0}
    , decltype(_impl_.contrast_){0}
    , decltype(_impl_.saturation_){0}
    , decltype(_impl_.motion_intensity_){0}
    , decltype(_impl_.scene_complexity_){0}
    , decltype(_impl_.audio_quality_){0}
    , decltype(_impl_.speech_clarity_){0}
    , decltype(_impl_.color_vibrancy_){0}
    , decltype(_impl_.visual_appeal_){0}
    , decltype(_impl_.background_music_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VideoFeatures::~VideoFeatures() {
  // @@protoc_insertion_point(destructor:sonet.common.VideoFeatures)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoFeatures::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VideoFeatures::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoFeatures::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.common.VideoFeatures)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.brightness_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.background_music_) -
      reinterpret_cast<char*>(&_impl_.brightness_)) + sizeof(_impl_.background_music_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoFeatures::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double brightness = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.brightness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double contrast = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.contrast_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double saturation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.saturation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double motion_intensity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.motion_intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double scene_complexity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.scene_complexity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double audio_quality = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.audio_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool background_music = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.background_music_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double speech_clarity = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.speech_clarity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double color_vibrancy = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.color_vibrancy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double visual_appeal = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _impl_.visual_appeal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoFeatures::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.common.VideoFeatures)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double brightness = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_brightness = this->_internal_brightness();
  uint64_t raw_brightness;
  memcpy(&raw_brightness, &tmp_brightness, sizeof(tmp_brightness));
  if (raw_brightness != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_brightness(), target);
  }

  // double contrast = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_contrast = this->_internal_contrast();
  uint64_t raw_contrast;
  memcpy(&raw_contrast, &tmp_contrast, sizeof(tmp_contrast));
  if (raw_contrast != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_contrast(), target);
  }

  // double saturation = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_saturation = this->_internal_saturation();
  uint64_t raw_saturation;
  memcpy(&raw_saturation, &tmp_saturation, sizeof(tmp_saturation));
  if (raw_saturation != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_saturation(), target);
  }

  // double motion_intensity = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_motion_intensity = this->_internal_motion_intensity();
  uint64_t raw_motion_intensity;
  memcpy(&raw_motion_intensity, &tmp_motion_intensity, sizeof(tmp_motion_intensity));
  if (raw_motion_intensity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_motion_intensity(), target);
  }

  // double scene_complexity = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_scene_complexity = this->_internal_scene_complexity();
  uint64_t raw_scene_complexity;
  memcpy(&raw_scene_complexity, &tmp_scene_complexity, sizeof(tmp_scene_complexity));
  if (raw_scene_complexity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_scene_complexity(), target);
  }

  // double audio_quality = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_audio_quality = this->_internal_audio_quality();
  uint64_t raw_audio_quality;
  memcpy(&raw_audio_quality, &tmp_audio_quality, sizeof(tmp_audio_quality));
  if (raw_audio_quality != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_audio_quality(), target);
  }

  // bool background_music = 7;
  if (this->_internal_background_music() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_background_music(), target);
  }

  // double speech_clarity = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speech_clarity = this->_internal_speech_clarity();
  uint64_t raw_speech_clarity;
  memcpy(&raw_speech_clarity, &tmp_speech_clarity, sizeof(tmp_speech_clarity));
  if (raw_speech_clarity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_speech_clarity(), target);
  }

  // double color_vibrancy = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_color_vibrancy = this->_internal_color_vibrancy();
  uint64_t raw_color_vibrancy;
  memcpy(&raw_color_vibrancy, &tmp_color_vibrancy, sizeof(tmp_color_vibrancy));
  if (raw_color_vibrancy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_color_vibrancy(), target);
  }

  // double visual_appeal = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_visual_appeal = this->_internal_visual_appeal();
  uint64_t raw_visual_appeal;
  memcpy(&raw_visual_appeal, &tmp_visual_appeal, sizeof(tmp_visual_appeal));
  if (raw_visual_appeal != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_visual_appeal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.common.VideoFeatures)
  return target;
}

size_t VideoFeatures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.common.VideoFeatures)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double brightness = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_brightness = this->_internal_brightness();
  uint64_t raw_brightness;
  memcpy(&raw_brightness, &tmp_brightness, sizeof(tmp_brightness));
  if (raw_brightness != 0) {
    total_size += 1 + 8;
  }

  // double contrast = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_contrast = this->_internal_contrast();
  uint64_t raw_contrast;
  memcpy(&raw_contrast, &tmp_contrast, sizeof(tmp_contrast));
  if (raw_contrast != 0) {
    total_size += 1 + 8;
  }

  // double saturation = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_saturation = this->_internal_saturation();
  uint64_t raw_saturation;
  memcpy(&raw_saturation, &tmp_saturation, sizeof(tmp_saturation));
  if (raw_saturation != 0) {
    total_size += 1 + 8;
  }

  // double motion_intensity = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_motion_intensity = this->_internal_motion_intensity();
  uint64_t raw_motion_intensity;
  memcpy(&raw_motion_intensity, &tmp_motion_intensity, sizeof(tmp_motion_intensity));
  if (raw_motion_intensity != 0) {
    total_size += 1 + 8;
  }

  // double scene_complexity = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_scene_complexity = this->_internal_scene_complexity();
  uint64_t raw_scene_complexity;
  memcpy(&raw_scene_complexity, &tmp_scene_complexity, sizeof(tmp_scene_complexity));
  if (raw_scene_complexity != 0) {
    total_size += 1 + 8;
  }

  // double audio_quality = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_audio_quality = this->_internal_audio_quality();
  uint64_t raw_audio_quality;
  memcpy(&raw_audio_quality, &tmp_audio_quality, sizeof(tmp_audio_quality));
  if (raw_audio_quality != 0) {
    total_size += 1 + 8;
  }

  // double speech_clarity = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speech_clarity = this->_internal_speech_clarity();
  uint64_t raw_speech_clarity;
  memcpy(&raw_speech_clarity, &tmp_speech_clarity, sizeof(tmp_speech_clarity));
  if (raw_speech_clarity != 0) {
    total_size += 1 + 8;
  }

  // double color_vibrancy = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_color_vibrancy = this->_internal_color_vibrancy();
  uint64_t raw_color_vibrancy;
  memcpy(&raw_color_vibrancy, &tmp_color_vibrancy, sizeof(tmp_color_vibrancy));
  if (raw_color_vibrancy != 0) {
    total_size += 1 + 8;
  }

  // double visual_appeal = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_visual_appeal = this->_internal_visual_appeal();
  uint64_t raw_visual_appeal;
  memcpy(&raw_visual_appeal, &tmp_visual_appeal, sizeof(tmp_visual_appeal));
  if (raw_visual_appeal != 0) {
    total_size += 1 + 8;
  }

  // bool background_music = 7;
  if (this->_internal_background_music() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoFeatures::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VideoFeatures::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoFeatures::GetClassData() const { return &_class_data_; }


void VideoFeatures::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VideoFeatures*>(&to_msg);
  auto& from = static_cast<const VideoFeatures&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.common.VideoFeatures)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_brightness = from._internal_brightness();
  uint64_t raw_brightness;
  memcpy(&raw_brightness, &tmp_brightness, sizeof(tmp_brightness));
  if (raw_brightness != 0) {
    _this->_internal_set_brightness(from._internal_brightness());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_contrast = from._internal_contrast();
  uint64_t raw_contrast;
  memcpy(&raw_contrast, &tmp_contrast, sizeof(tmp_contrast));
  if (raw_contrast != 0) {
    _this->_internal_set_contrast(from._internal_contrast());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_saturation = from._internal_saturation();
  uint64_t raw_saturation;
  memcpy(&raw_saturation, &tmp_saturation, sizeof(tmp_saturation));
  if (raw_saturation != 0) {
    _this->_internal_set_saturation(from._internal_saturation());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_motion_intensity = from._internal_motion_intensity();
  uint64_t raw_motion_intensity;
  memcpy(&raw_motion_intensity, &tmp_motion_intensity, sizeof(tmp_motion_intensity));
  if (raw_motion_intensity != 0) {
    _this->_internal_set_motion_intensity(from._internal_motion_intensity());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_scene_complexity = from._internal_scene_complexity();
  uint64_t raw_scene_complexity;
  memcpy(&raw_scene_complexity, &tmp_scene_complexity, sizeof(tmp_scene_complexity));
  if (raw_scene_complexity != 0) {
    _this->_internal_set_scene_complexity(from._internal_scene_complexity());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_audio_quality = from._internal_audio_quality();
  uint64_t raw_audio_quality;
  memcpy(&raw_audio_quality, &tmp_audio_quality, sizeof(tmp_audio_quality));
  if (raw_audio_quality != 0) {
    _this->_internal_set_audio_quality(from._internal_audio_quality());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speech_clarity = from._internal_speech_clarity();
  uint64_t raw_speech_clarity;
  memcpy(&raw_speech_clarity, &tmp_speech_clarity, sizeof(tmp_speech_clarity));
  if (raw_speech_clarity != 0) {
    _this->_internal_set_speech_clarity(from._internal_speech_clarity());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_color_vibrancy = from._internal_color_vibrancy();
  uint64_t raw_color_vibrancy;
  memcpy(&raw_color_vibrancy, &tmp_color_vibrancy, sizeof(tmp_color_vibrancy));
  if (raw_color_vibrancy != 0) {
    _this->_internal_set_color_vibrancy(from._internal_color_vibrancy());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_visual_appeal = from._internal_visual_appeal();
  uint64_t raw_visual_appeal;
  memcpy(&raw_visual_appeal, &tmp_visual_appeal, sizeof(tmp_visual_appeal));
  if (raw_visual_appeal != 0) {
    _this->_internal_set_visual_appeal(from._internal_visual_appeal());
  }
  if (from._internal_background_music() != 0) {
    _this->_internal_set_background_music(from._internal_background_music());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoFeatures::CopyFrom(const VideoFeatures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.common.VideoFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoFeatures::IsInitialized() const {
  return true;
}

void VideoFeatures::InternalSwap(VideoFeatures* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoFeatures, _impl_.background_music_)
      + sizeof(VideoFeatures::_impl_.background_music_)
      - PROTOBUF_FIELD_OFFSET(VideoFeatures, _impl_.brightness_)>(
          reinterpret_cast<char*>(&_impl_.brightness_),
          reinterpret_cast<char*>(&other->_impl_.brightness_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoFeatures::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fvideo_5ftypes_2eproto_getter, &descriptor_table_common_2fvideo_5ftypes_2eproto_once,
      file_level_metadata_common_2fvideo_5ftypes_2eproto[2]);
}

// ===================================================================

class EngagementMetrics::_Internal {
 public:
};

EngagementMetrics::EngagementMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.common.EngagementMetrics)
}
EngagementMetrics::EngagementMetrics(const EngagementMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EngagementMetrics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.view_count_){}
    , decltype(_impl_.unique_viewers_){}
    , decltype(_impl_.like_count_){}
    , decltype(_impl_.renote_count_){}
    , decltype(_impl_.reply_count_){}
    , decltype(_impl_.share_count_){}
    , decltype(_impl_.average_watch_time_ms_){}
    , decltype(_impl_.completion_rate_){}
    , decltype(_impl_.skip_rate_){}
    , decltype(_impl_.engagement_score_){}
    , decltype(_impl_.viral_score_){}
    , decltype(_impl_.retention_score_){}
    , decltype(_impl_.bookmark_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.view_count_, &from._impl_.view_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bookmark_count_) -
    reinterpret_cast<char*>(&_impl_.view_count_)) + sizeof(_impl_.bookmark_count_));
  // @@protoc_insertion_point(copy_constructor:sonet.common.EngagementMetrics)
}

inline void EngagementMetrics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.view_count_){0u}
    , decltype(_impl_.unique_viewers_){0u}
    , decltype(_impl_.like_count_){0u}
    , decltype(_impl_.renote_count_){0u}
    , decltype(_impl_.reply_count_){0u}
    , decltype(_impl_.share_count_){0u}
    , decltype(_impl_.average_watch_time_ms_){0}
    , decltype(_impl_.completion_rate_){0}
    , decltype(_impl_.skip_rate_){0}
    , decltype(_impl_.engagement_score_){0}
    , decltype(_impl_.viral_score_){0}
    , decltype(_impl_.retention_score_){0}
    , decltype(_impl_.bookmark_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EngagementMetrics::~EngagementMetrics() {
  // @@protoc_insertion_point(destructor:sonet.common.EngagementMetrics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EngagementMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EngagementMetrics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EngagementMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.common.EngagementMetrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.view_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bookmark_count_) -
      reinterpret_cast<char*>(&_impl_.view_count_)) + sizeof(_impl_.bookmark_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EngagementMetrics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 view_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.view_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 unique_viewers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.unique_viewers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 like_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.like_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 renote_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.renote_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 reply_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.reply_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 share_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.share_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bookmark_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.bookmark_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double average_watch_time_ms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.average_watch_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double completion_rate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.completion_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double skip_rate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _impl_.skip_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double engagement_score = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.engagement_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double viral_score = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _impl_.viral_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double retention_score = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _impl_.retention_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EngagementMetrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.common.EngagementMetrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 view_count = 1;
  if (this->_internal_view_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_view_count(), target);
  }

  // uint32 unique_viewers = 2;
  if (this->_internal_unique_viewers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_unique_viewers(), target);
  }

  // uint32 like_count = 3;
  if (this->_internal_like_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_like_count(), target);
  }

  // uint32 renote_count = 4;
  if (this->_internal_renote_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_renote_count(), target);
  }

  // uint32 reply_count = 5;
  if (this->_internal_reply_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_reply_count(), target);
  }

  // uint32 share_count = 6;
  if (this->_internal_share_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_share_count(), target);
  }

  // uint32 bookmark_count = 7;
  if (this->_internal_bookmark_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_bookmark_count(), target);
  }

  // double average_watch_time_ms = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_average_watch_time_ms = this->_internal_average_watch_time_ms();
  uint64_t raw_average_watch_time_ms;
  memcpy(&raw_average_watch_time_ms, &tmp_average_watch_time_ms, sizeof(tmp_average_watch_time_ms));
  if (raw_average_watch_time_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_average_watch_time_ms(), target);
  }

  // double completion_rate = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_completion_rate = this->_internal_completion_rate();
  uint64_t raw_completion_rate;
  memcpy(&raw_completion_rate, &tmp_completion_rate, sizeof(tmp_completion_rate));
  if (raw_completion_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_completion_rate(), target);
  }

  // double skip_rate = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_skip_rate = this->_internal_skip_rate();
  uint64_t raw_skip_rate;
  memcpy(&raw_skip_rate, &tmp_skip_rate, sizeof(tmp_skip_rate));
  if (raw_skip_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_skip_rate(), target);
  }

  // double engagement_score = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_engagement_score = this->_internal_engagement_score();
  uint64_t raw_engagement_score;
  memcpy(&raw_engagement_score, &tmp_engagement_score, sizeof(tmp_engagement_score));
  if (raw_engagement_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_engagement_score(), target);
  }

  // double viral_score = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_viral_score = this->_internal_viral_score();
  uint64_t raw_viral_score;
  memcpy(&raw_viral_score, &tmp_viral_score, sizeof(tmp_viral_score));
  if (raw_viral_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_viral_score(), target);
  }

  // double retention_score = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_retention_score = this->_internal_retention_score();
  uint64_t raw_retention_score;
  memcpy(&raw_retention_score, &tmp_retention_score, sizeof(tmp_retention_score));
  if (raw_retention_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_retention_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.common.EngagementMetrics)
  return target;
}

size_t EngagementMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.common.EngagementMetrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 view_count = 1;
  if (this->_internal_view_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_view_count());
  }

  // uint32 unique_viewers = 2;
  if (this->_internal_unique_viewers() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_unique_viewers());
  }

  // uint32 like_count = 3;
  if (this->_internal_like_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_like_count());
  }

  // uint32 renote_count = 4;
  if (this->_internal_renote_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_renote_count());
  }

  // uint32 reply_count = 5;
  if (this->_internal_reply_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reply_count());
  }

  // uint32 share_count = 6;
  if (this->_internal_share_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_share_count());
  }

  // double average_watch_time_ms = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_average_watch_time_ms = this->_internal_average_watch_time_ms();
  uint64_t raw_average_watch_time_ms;
  memcpy(&raw_average_watch_time_ms, &tmp_average_watch_time_ms, sizeof(tmp_average_watch_time_ms));
  if (raw_average_watch_time_ms != 0) {
    total_size += 1 + 8;
  }

  // double completion_rate = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_completion_rate = this->_internal_completion_rate();
  uint64_t raw_completion_rate;
  memcpy(&raw_completion_rate, &tmp_completion_rate, sizeof(tmp_completion_rate));
  if (raw_completion_rate != 0) {
    total_size += 1 + 8;
  }

  // double skip_rate = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_skip_rate = this->_internal_skip_rate();
  uint64_t raw_skip_rate;
  memcpy(&raw_skip_rate, &tmp_skip_rate, sizeof(tmp_skip_rate));
  if (raw_skip_rate != 0) {
    total_size += 1 + 8;
  }

  // double engagement_score = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_engagement_score = this->_internal_engagement_score();
  uint64_t raw_engagement_score;
  memcpy(&raw_engagement_score, &tmp_engagement_score, sizeof(tmp_engagement_score));
  if (raw_engagement_score != 0) {
    total_size += 1 + 8;
  }

  // double viral_score = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_viral_score = this->_internal_viral_score();
  uint64_t raw_viral_score;
  memcpy(&raw_viral_score, &tmp_viral_score, sizeof(tmp_viral_score));
  if (raw_viral_score != 0) {
    total_size += 1 + 8;
  }

  // double retention_score = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_retention_score = this->_internal_retention_score();
  uint64_t raw_retention_score;
  memcpy(&raw_retention_score, &tmp_retention_score, sizeof(tmp_retention_score));
  if (raw_retention_score != 0) {
    total_size += 1 + 8;
  }

  // uint32 bookmark_count = 7;
  if (this->_internal_bookmark_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bookmark_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EngagementMetrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EngagementMetrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EngagementMetrics::GetClassData() const { return &_class_data_; }


void EngagementMetrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EngagementMetrics*>(&to_msg);
  auto& from = static_cast<const EngagementMetrics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.common.EngagementMetrics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_view_count() != 0) {
    _this->_internal_set_view_count(from._internal_view_count());
  }
  if (from._internal_unique_viewers() != 0) {
    _this->_internal_set_unique_viewers(from._internal_unique_viewers());
  }
  if (from._internal_like_count() != 0) {
    _this->_internal_set_like_count(from._internal_like_count());
  }
  if (from._internal_renote_count() != 0) {
    _this->_internal_set_renote_count(from._internal_renote_count());
  }
  if (from._internal_reply_count() != 0) {
    _this->_internal_set_reply_count(from._internal_reply_count());
  }
  if (from._internal_share_count() != 0) {
    _this->_internal_set_share_count(from._internal_share_count());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_average_watch_time_ms = from._internal_average_watch_time_ms();
  uint64_t raw_average_watch_time_ms;
  memcpy(&raw_average_watch_time_ms, &tmp_average_watch_time_ms, sizeof(tmp_average_watch_time_ms));
  if (raw_average_watch_time_ms != 0) {
    _this->_internal_set_average_watch_time_ms(from._internal_average_watch_time_ms());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_completion_rate = from._internal_completion_rate();
  uint64_t raw_completion_rate;
  memcpy(&raw_completion_rate, &tmp_completion_rate, sizeof(tmp_completion_rate));
  if (raw_completion_rate != 0) {
    _this->_internal_set_completion_rate(from._internal_completion_rate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_skip_rate = from._internal_skip_rate();
  uint64_t raw_skip_rate;
  memcpy(&raw_skip_rate, &tmp_skip_rate, sizeof(tmp_skip_rate));
  if (raw_skip_rate != 0) {
    _this->_internal_set_skip_rate(from._internal_skip_rate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_engagement_score = from._internal_engagement_score();
  uint64_t raw_engagement_score;
  memcpy(&raw_engagement_score, &tmp_engagement_score, sizeof(tmp_engagement_score));
  if (raw_engagement_score != 0) {
    _this->_internal_set_engagement_score(from._internal_engagement_score());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_viral_score = from._internal_viral_score();
  uint64_t raw_viral_score;
  memcpy(&raw_viral_score, &tmp_viral_score, sizeof(tmp_viral_score));
  if (raw_viral_score != 0) {
    _this->_internal_set_viral_score(from._internal_viral_score());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_retention_score = from._internal_retention_score();
  uint64_t raw_retention_score;
  memcpy(&raw_retention_score, &tmp_retention_score, sizeof(tmp_retention_score));
  if (raw_retention_score != 0) {
    _this->_internal_set_retention_score(from._internal_retention_score());
  }
  if (from._internal_bookmark_count() != 0) {
    _this->_internal_set_bookmark_count(from._internal_bookmark_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EngagementMetrics::CopyFrom(const EngagementMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.common.EngagementMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EngagementMetrics::IsInitialized() const {
  return true;
}

void EngagementMetrics::InternalSwap(EngagementMetrics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EngagementMetrics, _impl_.bookmark_count_)
      + sizeof(EngagementMetrics::_impl_.bookmark_count_)
      - PROTOBUF_FIELD_OFFSET(EngagementMetrics, _impl_.view_count_)>(
          reinterpret_cast<char*>(&_impl_.view_count_),
          reinterpret_cast<char*>(&other->_impl_.view_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EngagementMetrics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fvideo_5ftypes_2eproto_getter, &descriptor_table_common_2fvideo_5ftypes_2eproto_once,
      file_level_metadata_common_2fvideo_5ftypes_2eproto[3]);
}

// ===================================================================

class VideoQueryParams::_Internal {
 public:
};

VideoQueryParams::VideoQueryParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.common.VideoQueryParams)
}
VideoQueryParams::VideoQueryParams(const VideoQueryParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VideoQueryParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.categories_){from._impl_.categories_}
    , decltype(_impl_.exclude_categories_){from._impl_.exclude_categories_}
    , decltype(_impl_.tags_){from._impl_.tags_}
    , decltype(_impl_.exclude_tags_){from._impl_.exclude_tags_}
    , decltype(_impl_.cursor_){}
    , decltype(_impl_.quality_preference_){}
    , decltype(_impl_.creator_id_){}
    , decltype(_impl_.time_window_){}
    , decltype(_impl_.sort_by_){}
    , decltype(_impl_.sort_order_){}
    , decltype(_impl_.limit_){}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.min_duration_ms_){}
    , decltype(_impl_.max_duration_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cursor().empty()) {
    _this->_impl_.cursor_.Set(from._internal_cursor(), 
      _this->GetArenaForAllocation());
  }
  _impl_.quality_preference_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.quality_preference_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quality_preference().empty()) {
    _this->_impl_.quality_preference_.Set(from._internal_quality_preference(), 
      _this->GetArenaForAllocation());
  }
  _impl_.creator_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creator_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creator_id().empty()) {
    _this->_impl_.creator_id_.Set(from._internal_creator_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.time_window_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_window_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_time_window().empty()) {
    _this->_impl_.time_window_.Set(from._internal_time_window(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sort_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sort_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sort_by().empty()) {
    _this->_impl_.sort_by_.Set(from._internal_sort_by(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sort_order_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sort_order_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sort_order().empty()) {
    _this->_impl_.sort_order_.Set(from._internal_sort_order(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.limit_, &from._impl_.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_duration_ms_) -
    reinterpret_cast<char*>(&_impl_.limit_)) + sizeof(_impl_.max_duration_ms_));
  // @@protoc_insertion_point(copy_constructor:sonet.common.VideoQueryParams)
}

inline void VideoQueryParams::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.categories_){arena}
    , decltype(_impl_.exclude_categories_){arena}
    , decltype(_impl_.tags_){arena}
    , decltype(_impl_.exclude_tags_){arena}
    , decltype(_impl_.cursor_){}
    , decltype(_impl_.quality_preference_){}
    , decltype(_impl_.creator_id_){}
    , decltype(_impl_.time_window_){}
    , decltype(_impl_.sort_by_){}
    , decltype(_impl_.sort_order_){}
    , decltype(_impl_.limit_){0u}
    , decltype(_impl_.offset_){0u}
    , decltype(_impl_.min_duration_ms_){0u}
    , decltype(_impl_.max_duration_ms_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quality_preference_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.quality_preference_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.creator_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creator_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.time_window_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_window_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sort_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sort_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sort_order_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sort_order_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VideoQueryParams::~VideoQueryParams() {
  // @@protoc_insertion_point(destructor:sonet.common.VideoQueryParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoQueryParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.categories_.~RepeatedPtrField();
  _impl_.exclude_categories_.~RepeatedPtrField();
  _impl_.tags_.~RepeatedPtrField();
  _impl_.exclude_tags_.~RepeatedPtrField();
  _impl_.cursor_.Destroy();
  _impl_.quality_preference_.Destroy();
  _impl_.creator_id_.Destroy();
  _impl_.time_window_.Destroy();
  _impl_.sort_by_.Destroy();
  _impl_.sort_order_.Destroy();
}

void VideoQueryParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoQueryParams::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.common.VideoQueryParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.categories_.Clear();
  _impl_.exclude_categories_.Clear();
  _impl_.tags_.Clear();
  _impl_.exclude_tags_.Clear();
  _impl_.cursor_.ClearToEmpty();
  _impl_.quality_preference_.ClearToEmpty();
  _impl_.creator_id_.ClearToEmpty();
  _impl_.time_window_.ClearToEmpty();
  _impl_.sort_by_.ClearToEmpty();
  _impl_.sort_order_.ClearToEmpty();
  ::memset(&_impl_.limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_duration_ms_) -
      reinterpret_cast<char*>(&_impl_.limit_)) + sizeof(_impl_.max_duration_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoQueryParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string cursor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_cursor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoQueryParams.cursor"));
        } else
          goto handle_unusual;
        continue;
      // repeated string categories = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_categories();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoQueryParams.categories"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string exclude_categories = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_exclude_categories();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoQueryParams.exclude_categories"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoQueryParams.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string exclude_tags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_exclude_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoQueryParams.exclude_tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 min_duration_ms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.min_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_duration_ms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.max_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string quality_preference = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_quality_preference();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoQueryParams.quality_preference"));
        } else
          goto handle_unusual;
        continue;
      // string creator_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_creator_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoQueryParams.creator_id"));
        } else
          goto handle_unusual;
        continue;
      // string time_window = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_time_window();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoQueryParams.time_window"));
        } else
          goto handle_unusual;
        continue;
      // string sort_by = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_sort_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoQueryParams.sort_by"));
        } else
          goto handle_unusual;
        continue;
      // string sort_order = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_sort_order();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoQueryParams.sort_order"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoQueryParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.common.VideoQueryParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 limit = 1;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_limit(), target);
  }

  // uint32 offset = 2;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_offset(), target);
  }

  // string cursor = 3;
  if (!this->_internal_cursor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoQueryParams.cursor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cursor(), target);
  }

  // repeated string categories = 4;
  for (int i = 0, n = this->_internal_categories_size(); i < n; i++) {
    const auto& s = this->_internal_categories(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoQueryParams.categories");
    target = stream->WriteString(4, s, target);
  }

  // repeated string exclude_categories = 5;
  for (int i = 0, n = this->_internal_exclude_categories_size(); i < n; i++) {
    const auto& s = this->_internal_exclude_categories(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoQueryParams.exclude_categories");
    target = stream->WriteString(5, s, target);
  }

  // repeated string tags = 6;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoQueryParams.tags");
    target = stream->WriteString(6, s, target);
  }

  // repeated string exclude_tags = 7;
  for (int i = 0, n = this->_internal_exclude_tags_size(); i < n; i++) {
    const auto& s = this->_internal_exclude_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoQueryParams.exclude_tags");
    target = stream->WriteString(7, s, target);
  }

  // uint32 min_duration_ms = 8;
  if (this->_internal_min_duration_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_min_duration_ms(), target);
  }

  // uint32 max_duration_ms = 9;
  if (this->_internal_max_duration_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_max_duration_ms(), target);
  }

  // string quality_preference = 10;
  if (!this->_internal_quality_preference().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quality_preference().data(), static_cast<int>(this->_internal_quality_preference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoQueryParams.quality_preference");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_quality_preference(), target);
  }

  // string creator_id = 11;
  if (!this->_internal_creator_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creator_id().data(), static_cast<int>(this->_internal_creator_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoQueryParams.creator_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_creator_id(), target);
  }

  // string time_window = 12;
  if (!this->_internal_time_window().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time_window().data(), static_cast<int>(this->_internal_time_window().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoQueryParams.time_window");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_time_window(), target);
  }

  // string sort_by = 13;
  if (!this->_internal_sort_by().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sort_by().data(), static_cast<int>(this->_internal_sort_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoQueryParams.sort_by");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_sort_by(), target);
  }

  // string sort_order = 14;
  if (!this->_internal_sort_order().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sort_order().data(), static_cast<int>(this->_internal_sort_order().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoQueryParams.sort_order");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_sort_order(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.common.VideoQueryParams)
  return target;
}

size_t VideoQueryParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.common.VideoQueryParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string categories = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.categories_.size());
  for (int i = 0, n = _impl_.categories_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.categories_.Get(i));
  }

  // repeated string exclude_categories = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.exclude_categories_.size());
  for (int i = 0, n = _impl_.exclude_categories_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.exclude_categories_.Get(i));
  }

  // repeated string tags = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tags_.size());
  for (int i = 0, n = _impl_.tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tags_.Get(i));
  }

  // repeated string exclude_tags = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.exclude_tags_.size());
  for (int i = 0, n = _impl_.exclude_tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.exclude_tags_.Get(i));
  }

  // string cursor = 3;
  if (!this->_internal_cursor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cursor());
  }

  // string quality_preference = 10;
  if (!this->_internal_quality_preference().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quality_preference());
  }

  // string creator_id = 11;
  if (!this->_internal_creator_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creator_id());
  }

  // string time_window = 12;
  if (!this->_internal_time_window().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time_window());
  }

  // string sort_by = 13;
  if (!this->_internal_sort_by().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sort_by());
  }

  // string sort_order = 14;
  if (!this->_internal_sort_order().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sort_order());
  }

  // uint32 limit = 1;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_limit());
  }

  // uint32 offset = 2;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());
  }

  // uint32 min_duration_ms = 8;
  if (this->_internal_min_duration_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_min_duration_ms());
  }

  // uint32 max_duration_ms = 9;
  if (this->_internal_max_duration_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_duration_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoQueryParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VideoQueryParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoQueryParams::GetClassData() const { return &_class_data_; }


void VideoQueryParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VideoQueryParams*>(&to_msg);
  auto& from = static_cast<const VideoQueryParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.common.VideoQueryParams)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.categories_.MergeFrom(from._impl_.categories_);
  _this->_impl_.exclude_categories_.MergeFrom(from._impl_.exclude_categories_);
  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  _this->_impl_.exclude_tags_.MergeFrom(from._impl_.exclude_tags_);
  if (!from._internal_cursor().empty()) {
    _this->_internal_set_cursor(from._internal_cursor());
  }
  if (!from._internal_quality_preference().empty()) {
    _this->_internal_set_quality_preference(from._internal_quality_preference());
  }
  if (!from._internal_creator_id().empty()) {
    _this->_internal_set_creator_id(from._internal_creator_id());
  }
  if (!from._internal_time_window().empty()) {
    _this->_internal_set_time_window(from._internal_time_window());
  }
  if (!from._internal_sort_by().empty()) {
    _this->_internal_set_sort_by(from._internal_sort_by());
  }
  if (!from._internal_sort_order().empty()) {
    _this->_internal_set_sort_order(from._internal_sort_order());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_min_duration_ms() != 0) {
    _this->_internal_set_min_duration_ms(from._internal_min_duration_ms());
  }
  if (from._internal_max_duration_ms() != 0) {
    _this->_internal_set_max_duration_ms(from._internal_max_duration_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoQueryParams::CopyFrom(const VideoQueryParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.common.VideoQueryParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoQueryParams::IsInitialized() const {
  return true;
}

void VideoQueryParams::InternalSwap(VideoQueryParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.categories_.InternalSwap(&other->_impl_.categories_);
  _impl_.exclude_categories_.InternalSwap(&other->_impl_.exclude_categories_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  _impl_.exclude_tags_.InternalSwap(&other->_impl_.exclude_tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cursor_, lhs_arena,
      &other->_impl_.cursor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.quality_preference_, lhs_arena,
      &other->_impl_.quality_preference_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.creator_id_, lhs_arena,
      &other->_impl_.creator_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.time_window_, lhs_arena,
      &other->_impl_.time_window_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sort_by_, lhs_arena,
      &other->_impl_.sort_by_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sort_order_, lhs_arena,
      &other->_impl_.sort_order_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoQueryParams, _impl_.max_duration_ms_)
      + sizeof(VideoQueryParams::_impl_.max_duration_ms_)
      - PROTOBUF_FIELD_OFFSET(VideoQueryParams, _impl_.limit_)>(
          reinterpret_cast<char*>(&_impl_.limit_),
          reinterpret_cast<char*>(&other->_impl_.limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoQueryParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fvideo_5ftypes_2eproto_getter, &descriptor_table_common_2fvideo_5ftypes_2eproto_once,
      file_level_metadata_common_2fvideo_5ftypes_2eproto[4]);
}

// ===================================================================

class VideoSearchResult::_Internal {
 public:
};

VideoSearchResult::VideoSearchResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.common.VideoSearchResult)
}
VideoSearchResult::VideoSearchResult(const VideoSearchResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VideoSearchResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.videos_){from._impl_.videos_}
    , decltype(_impl_.suggested_queries_){from._impl_.suggested_queries_}
    , decltype(_impl_.next_cursor_){}
    , decltype(_impl_.prev_cursor_){}
    , decltype(_impl_.total_count_){}
    , decltype(_impl_.page_count_){}
    , decltype(_impl_.search_relevance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.next_cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_cursor().empty()) {
    _this->_impl_.next_cursor_.Set(from._internal_next_cursor(), 
      _this->GetArenaForAllocation());
  }
  _impl_.prev_cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prev_cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prev_cursor().empty()) {
    _this->_impl_.prev_cursor_.Set(from._internal_prev_cursor(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.total_count_, &from._impl_.total_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.search_relevance_) -
    reinterpret_cast<char*>(&_impl_.total_count_)) + sizeof(_impl_.search_relevance_));
  // @@protoc_insertion_point(copy_constructor:sonet.common.VideoSearchResult)
}

inline void VideoSearchResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.videos_){arena}
    , decltype(_impl_.suggested_queries_){arena}
    , decltype(_impl_.next_cursor_){}
    , decltype(_impl_.prev_cursor_){}
    , decltype(_impl_.total_count_){0u}
    , decltype(_impl_.page_count_){0u}
    , decltype(_impl_.search_relevance_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.next_cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.prev_cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prev_cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VideoSearchResult::~VideoSearchResult() {
  // @@protoc_insertion_point(destructor:sonet.common.VideoSearchResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoSearchResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.videos_.~RepeatedPtrField();
  _impl_.suggested_queries_.~RepeatedPtrField();
  _impl_.next_cursor_.Destroy();
  _impl_.prev_cursor_.Destroy();
}

void VideoSearchResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoSearchResult::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.common.VideoSearchResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.videos_.Clear();
  _impl_.suggested_queries_.Clear();
  _impl_.next_cursor_.ClearToEmpty();
  _impl_.prev_cursor_.ClearToEmpty();
  ::memset(&_impl_.total_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.search_relevance_) -
      reinterpret_cast<char*>(&_impl_.total_count_)) + sizeof(_impl_.search_relevance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoSearchResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sonet.common.VideoCandidate videos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_videos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 total_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.page_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string next_cursor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_next_cursor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoSearchResult.next_cursor"));
        } else
          goto handle_unusual;
        continue;
      // string prev_cursor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_prev_cursor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoSearchResult.prev_cursor"));
        } else
          goto handle_unusual;
        continue;
      // double search_relevance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.search_relevance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated string suggested_queries = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_suggested_queries();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoSearchResult.suggested_queries"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoSearchResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.common.VideoSearchResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sonet.common.VideoCandidate videos = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_videos_size()); i < n; i++) {
    const auto& repfield = this->_internal_videos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 total_count = 2;
  if (this->_internal_total_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_total_count(), target);
  }

  // uint32 page_count = 3;
  if (this->_internal_page_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page_count(), target);
  }

  // string next_cursor = 4;
  if (!this->_internal_next_cursor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_cursor().data(), static_cast<int>(this->_internal_next_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoSearchResult.next_cursor");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_next_cursor(), target);
  }

  // string prev_cursor = 5;
  if (!this->_internal_prev_cursor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prev_cursor().data(), static_cast<int>(this->_internal_prev_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoSearchResult.prev_cursor");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_prev_cursor(), target);
  }

  // double search_relevance = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_search_relevance = this->_internal_search_relevance();
  uint64_t raw_search_relevance;
  memcpy(&raw_search_relevance, &tmp_search_relevance, sizeof(tmp_search_relevance));
  if (raw_search_relevance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_search_relevance(), target);
  }

  // repeated string suggested_queries = 7;
  for (int i = 0, n = this->_internal_suggested_queries_size(); i < n; i++) {
    const auto& s = this->_internal_suggested_queries(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoSearchResult.suggested_queries");
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.common.VideoSearchResult)
  return target;
}

size_t VideoSearchResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.common.VideoSearchResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sonet.common.VideoCandidate videos = 1;
  total_size += 1UL * this->_internal_videos_size();
  for (const auto& msg : this->_impl_.videos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string suggested_queries = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.suggested_queries_.size());
  for (int i = 0, n = _impl_.suggested_queries_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.suggested_queries_.Get(i));
  }

  // string next_cursor = 4;
  if (!this->_internal_next_cursor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_cursor());
  }

  // string prev_cursor = 5;
  if (!this->_internal_prev_cursor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prev_cursor());
  }

  // uint32 total_count = 2;
  if (this->_internal_total_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_total_count());
  }

  // uint32 page_count = 3;
  if (this->_internal_page_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page_count());
  }

  // double search_relevance = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_search_relevance = this->_internal_search_relevance();
  uint64_t raw_search_relevance;
  memcpy(&raw_search_relevance, &tmp_search_relevance, sizeof(tmp_search_relevance));
  if (raw_search_relevance != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoSearchResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VideoSearchResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoSearchResult::GetClassData() const { return &_class_data_; }


void VideoSearchResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VideoSearchResult*>(&to_msg);
  auto& from = static_cast<const VideoSearchResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.common.VideoSearchResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.videos_.MergeFrom(from._impl_.videos_);
  _this->_impl_.suggested_queries_.MergeFrom(from._impl_.suggested_queries_);
  if (!from._internal_next_cursor().empty()) {
    _this->_internal_set_next_cursor(from._internal_next_cursor());
  }
  if (!from._internal_prev_cursor().empty()) {
    _this->_internal_set_prev_cursor(from._internal_prev_cursor());
  }
  if (from._internal_total_count() != 0) {
    _this->_internal_set_total_count(from._internal_total_count());
  }
  if (from._internal_page_count() != 0) {
    _this->_internal_set_page_count(from._internal_page_count());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_search_relevance = from._internal_search_relevance();
  uint64_t raw_search_relevance;
  memcpy(&raw_search_relevance, &tmp_search_relevance, sizeof(tmp_search_relevance));
  if (raw_search_relevance != 0) {
    _this->_internal_set_search_relevance(from._internal_search_relevance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoSearchResult::CopyFrom(const VideoSearchResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.common.VideoSearchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoSearchResult::IsInitialized() const {
  return true;
}

void VideoSearchResult::InternalSwap(VideoSearchResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.videos_.InternalSwap(&other->_impl_.videos_);
  _impl_.suggested_queries_.InternalSwap(&other->_impl_.suggested_queries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.next_cursor_, lhs_arena,
      &other->_impl_.next_cursor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prev_cursor_, lhs_arena,
      &other->_impl_.prev_cursor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoSearchResult, _impl_.search_relevance_)
      + sizeof(VideoSearchResult::_impl_.search_relevance_)
      - PROTOBUF_FIELD_OFFSET(VideoSearchResult, _impl_.total_count_)>(
          reinterpret_cast<char*>(&_impl_.total_count_),
          reinterpret_cast<char*>(&other->_impl_.total_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoSearchResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fvideo_5ftypes_2eproto_getter, &descriptor_table_common_2fvideo_5ftypes_2eproto_once,
      file_level_metadata_common_2fvideo_5ftypes_2eproto[5]);
}

// ===================================================================

class VideoUploadRequest::_Internal {
 public:
  static const ::sonet::common::VideoUploadMetadata& metadata(const VideoUploadRequest* msg);
};

const ::sonet::common::VideoUploadMetadata&
VideoUploadRequest::_Internal::metadata(const VideoUploadRequest* msg) {
  return *msg->_impl_.metadata_;
}
VideoUploadRequest::VideoUploadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.common.VideoUploadRequest)
}
VideoUploadRequest::VideoUploadRequest(const VideoUploadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VideoUploadRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){from._impl_.tags_}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.category_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.video_data_){}
    , decltype(_impl_.thumbnail_data_){}
    , decltype(_impl_.metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language().empty()) {
    _this->_impl_.language_.Set(from._internal_language(), 
      _this->GetArenaForAllocation());
  }
  _impl_.video_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.video_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_video_data().empty()) {
    _this->_impl_.video_data_.Set(from._internal_video_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnail_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnail_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_thumbnail_data().empty()) {
    _this->_impl_.thumbnail_data_.Set(from._internal_thumbnail_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::sonet::common::VideoUploadMetadata(*from._impl_.metadata_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.common.VideoUploadRequest)
}

inline void VideoUploadRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){arena}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.category_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.video_data_){}
    , decltype(_impl_.thumbnail_data_){}
    , decltype(_impl_.metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.video_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.video_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnail_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnail_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VideoUploadRequest::~VideoUploadRequest() {
  // @@protoc_insertion_point(destructor:sonet.common.VideoUploadRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoUploadRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tags_.~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.category_.Destroy();
  _impl_.language_.Destroy();
  _impl_.video_data_.Destroy();
  _impl_.thumbnail_data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.metadata_;
}

void VideoUploadRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoUploadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.common.VideoUploadRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tags_.Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.category_.ClearToEmpty();
  _impl_.language_.ClearToEmpty();
  _impl_.video_data_.ClearToEmpty();
  _impl_.thumbnail_data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoUploadRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoUploadRequest.title"));
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoUploadRequest.description"));
        } else
          goto handle_unusual;
        continue;
      // string category = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoUploadRequest.category"));
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoUploadRequest.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string language = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoUploadRequest.language"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.VideoUploadMetadata metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes video_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_video_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes thumbnail_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_thumbnail_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoUploadRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.common.VideoUploadRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoUploadRequest.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoUploadRequest.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // string category = 3;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoUploadRequest.category");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_category(), target);
  }

  // repeated string tags = 4;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoUploadRequest.tags");
    target = stream->WriteString(4, s, target);
  }

  // string language = 5;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoUploadRequest.language");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_language(), target);
  }

  // .sonet.common.VideoUploadMetadata metadata = 6;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // bytes video_data = 7;
  if (!this->_internal_video_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_video_data(), target);
  }

  // bytes thumbnail_data = 8;
  if (!this->_internal_thumbnail_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_thumbnail_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.common.VideoUploadRequest)
  return target;
}

size_t VideoUploadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.common.VideoUploadRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tags_.size());
  for (int i = 0, n = _impl_.tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tags_.Get(i));
  }

  // string title = 1;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string category = 3;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // string language = 5;
  if (!this->_internal_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // bytes video_data = 7;
  if (!this->_internal_video_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_video_data());
  }

  // bytes thumbnail_data = 8;
  if (!this->_internal_thumbnail_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_thumbnail_data());
  }

  // .sonet.common.VideoUploadMetadata metadata = 6;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoUploadRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VideoUploadRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoUploadRequest::GetClassData() const { return &_class_data_; }


void VideoUploadRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VideoUploadRequest*>(&to_msg);
  auto& from = static_cast<const VideoUploadRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.common.VideoUploadRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (!from._internal_language().empty()) {
    _this->_internal_set_language(from._internal_language());
  }
  if (!from._internal_video_data().empty()) {
    _this->_internal_set_video_data(from._internal_video_data());
  }
  if (!from._internal_thumbnail_data().empty()) {
    _this->_internal_set_thumbnail_data(from._internal_thumbnail_data());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::sonet::common::VideoUploadMetadata::MergeFrom(
        from._internal_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoUploadRequest::CopyFrom(const VideoUploadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.common.VideoUploadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoUploadRequest::IsInitialized() const {
  return true;
}

void VideoUploadRequest::InternalSwap(VideoUploadRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.language_, lhs_arena,
      &other->_impl_.language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.video_data_, lhs_arena,
      &other->_impl_.video_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnail_data_, lhs_arena,
      &other->_impl_.thumbnail_data_, rhs_arena
  );
  swap(_impl_.metadata_, other->_impl_.metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoUploadRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fvideo_5ftypes_2eproto_getter, &descriptor_table_common_2fvideo_5ftypes_2eproto_once,
      file_level_metadata_common_2fvideo_5ftypes_2eproto[6]);
}

// ===================================================================

class VideoUploadMetadata::_Internal {
 public:
};

VideoUploadMetadata::VideoUploadMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.common.VideoUploadMetadata)
}
VideoUploadMetadata::VideoUploadMetadata(const VideoUploadMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VideoUploadMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.resolution_){}
    , decltype(_impl_.aspect_ratio_){}
    , decltype(_impl_.encoding_){}
    , decltype(_impl_.duration_ms_){}
    , decltype(_impl_.bitrate_kbps_){}
    , decltype(_impl_.file_size_bytes_){}
    , decltype(_impl_.frame_rate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.resolution_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resolution_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resolution().empty()) {
    _this->_impl_.resolution_.Set(from._internal_resolution(), 
      _this->GetArenaForAllocation());
  }
  _impl_.aspect_ratio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aspect_ratio_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_aspect_ratio().empty()) {
    _this->_impl_.aspect_ratio_.Set(from._internal_aspect_ratio(), 
      _this->GetArenaForAllocation());
  }
  _impl_.encoding_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encoding_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encoding().empty()) {
    _this->_impl_.encoding_.Set(from._internal_encoding(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.duration_ms_, &from._impl_.duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.frame_rate_) -
    reinterpret_cast<char*>(&_impl_.duration_ms_)) + sizeof(_impl_.frame_rate_));
  // @@protoc_insertion_point(copy_constructor:sonet.common.VideoUploadMetadata)
}

inline void VideoUploadMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.resolution_){}
    , decltype(_impl_.aspect_ratio_){}
    , decltype(_impl_.encoding_){}
    , decltype(_impl_.duration_ms_){0u}
    , decltype(_impl_.bitrate_kbps_){0u}
    , decltype(_impl_.file_size_bytes_){uint64_t{0u}}
    , decltype(_impl_.frame_rate_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.resolution_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resolution_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.aspect_ratio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aspect_ratio_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.encoding_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encoding_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VideoUploadMetadata::~VideoUploadMetadata() {
  // @@protoc_insertion_point(destructor:sonet.common.VideoUploadMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoUploadMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.resolution_.Destroy();
  _impl_.aspect_ratio_.Destroy();
  _impl_.encoding_.Destroy();
}

void VideoUploadMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoUploadMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.common.VideoUploadMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.resolution_.ClearToEmpty();
  _impl_.aspect_ratio_.ClearToEmpty();
  _impl_.encoding_.ClearToEmpty();
  ::memset(&_impl_.duration_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.frame_rate_) -
      reinterpret_cast<char*>(&_impl_.duration_ms_)) + sizeof(_impl_.frame_rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoUploadMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 duration_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string resolution = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_resolution();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoUploadMetadata.resolution"));
        } else
          goto handle_unusual;
        continue;
      // string aspect_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_aspect_ratio();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoUploadMetadata.aspect_ratio"));
        } else
          goto handle_unusual;
        continue;
      // string encoding = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_encoding();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoUploadMetadata.encoding"));
        } else
          goto handle_unusual;
        continue;
      // uint32 bitrate_kbps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.bitrate_kbps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 frame_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.frame_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 file_size_bytes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.file_size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoUploadMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.common.VideoUploadMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 duration_ms = 1;
  if (this->_internal_duration_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_duration_ms(), target);
  }

  // string resolution = 2;
  if (!this->_internal_resolution().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resolution().data(), static_cast<int>(this->_internal_resolution().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoUploadMetadata.resolution");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_resolution(), target);
  }

  // string aspect_ratio = 3;
  if (!this->_internal_aspect_ratio().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aspect_ratio().data(), static_cast<int>(this->_internal_aspect_ratio().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoUploadMetadata.aspect_ratio");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_aspect_ratio(), target);
  }

  // string encoding = 4;
  if (!this->_internal_encoding().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encoding().data(), static_cast<int>(this->_internal_encoding().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoUploadMetadata.encoding");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_encoding(), target);
  }

  // uint32 bitrate_kbps = 5;
  if (this->_internal_bitrate_kbps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_bitrate_kbps(), target);
  }

  // uint32 frame_rate = 6;
  if (this->_internal_frame_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_frame_rate(), target);
  }

  // uint64 file_size_bytes = 7;
  if (this->_internal_file_size_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_file_size_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.common.VideoUploadMetadata)
  return target;
}

size_t VideoUploadMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.common.VideoUploadMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resolution = 2;
  if (!this->_internal_resolution().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resolution());
  }

  // string aspect_ratio = 3;
  if (!this->_internal_aspect_ratio().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aspect_ratio());
  }

  // string encoding = 4;
  if (!this->_internal_encoding().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encoding());
  }

  // uint32 duration_ms = 1;
  if (this->_internal_duration_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration_ms());
  }

  // uint32 bitrate_kbps = 5;
  if (this->_internal_bitrate_kbps() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bitrate_kbps());
  }

  // uint64 file_size_bytes = 7;
  if (this->_internal_file_size_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_file_size_bytes());
  }

  // uint32 frame_rate = 6;
  if (this->_internal_frame_rate() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_rate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoUploadMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VideoUploadMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoUploadMetadata::GetClassData() const { return &_class_data_; }


void VideoUploadMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VideoUploadMetadata*>(&to_msg);
  auto& from = static_cast<const VideoUploadMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.common.VideoUploadMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_resolution().empty()) {
    _this->_internal_set_resolution(from._internal_resolution());
  }
  if (!from._internal_aspect_ratio().empty()) {
    _this->_internal_set_aspect_ratio(from._internal_aspect_ratio());
  }
  if (!from._internal_encoding().empty()) {
    _this->_internal_set_encoding(from._internal_encoding());
  }
  if (from._internal_duration_ms() != 0) {
    _this->_internal_set_duration_ms(from._internal_duration_ms());
  }
  if (from._internal_bitrate_kbps() != 0) {
    _this->_internal_set_bitrate_kbps(from._internal_bitrate_kbps());
  }
  if (from._internal_file_size_bytes() != 0) {
    _this->_internal_set_file_size_bytes(from._internal_file_size_bytes());
  }
  if (from._internal_frame_rate() != 0) {
    _this->_internal_set_frame_rate(from._internal_frame_rate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoUploadMetadata::CopyFrom(const VideoUploadMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.common.VideoUploadMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoUploadMetadata::IsInitialized() const {
  return true;
}

void VideoUploadMetadata::InternalSwap(VideoUploadMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resolution_, lhs_arena,
      &other->_impl_.resolution_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.aspect_ratio_, lhs_arena,
      &other->_impl_.aspect_ratio_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encoding_, lhs_arena,
      &other->_impl_.encoding_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoUploadMetadata, _impl_.frame_rate_)
      + sizeof(VideoUploadMetadata::_impl_.frame_rate_)
      - PROTOBUF_FIELD_OFFSET(VideoUploadMetadata, _impl_.duration_ms_)>(
          reinterpret_cast<char*>(&_impl_.duration_ms_),
          reinterpret_cast<char*>(&other->_impl_.duration_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoUploadMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fvideo_5ftypes_2eproto_getter, &descriptor_table_common_2fvideo_5ftypes_2eproto_once,
      file_level_metadata_common_2fvideo_5ftypes_2eproto[7]);
}

// ===================================================================

class VideoUploadResponse::_Internal {
 public:
};

VideoUploadResponse::VideoUploadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.common.VideoUploadResponse)
}
VideoUploadResponse::VideoUploadResponse(const VideoUploadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VideoUploadResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.video_id_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.processing_status_){}
    , decltype(_impl_.thumbnail_url_){}
    , decltype(_impl_.playback_url_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.processing_time_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.video_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.video_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_video_id().empty()) {
    _this->_impl_.video_id_.Set(from._internal_video_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.processing_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.processing_status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_processing_status().empty()) {
    _this->_impl_.processing_status_.Set(from._internal_processing_status(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnail_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnail_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_thumbnail_url().empty()) {
    _this->_impl_.thumbnail_url_.Set(from._internal_thumbnail_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.playback_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playback_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playback_url().empty()) {
    _this->_impl_.playback_url_.Set(from._internal_playback_url(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.processing_time_ms_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.processing_time_ms_));
  // @@protoc_insertion_point(copy_constructor:sonet.common.VideoUploadResponse)
}

inline void VideoUploadResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.video_id_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.processing_status_){}
    , decltype(_impl_.thumbnail_url_){}
    , decltype(_impl_.playback_url_){}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.processing_time_ms_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.video_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.video_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.processing_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.processing_status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnail_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnail_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.playback_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playback_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VideoUploadResponse::~VideoUploadResponse() {
  // @@protoc_insertion_point(destructor:sonet.common.VideoUploadResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoUploadResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.video_id_.Destroy();
  _impl_.message_.Destroy();
  _impl_.processing_status_.Destroy();
  _impl_.thumbnail_url_.Destroy();
  _impl_.playback_url_.Destroy();
}

void VideoUploadResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoUploadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.common.VideoUploadResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.video_id_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _impl_.processing_status_.ClearToEmpty();
  _impl_.thumbnail_url_.ClearToEmpty();
  _impl_.playback_url_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.processing_time_ms_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.processing_time_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoUploadResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string video_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_video_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoUploadResponse.video_id"));
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoUploadResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // string processing_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_processing_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoUploadResponse.processing_status"));
        } else
          goto handle_unusual;
        continue;
      // string thumbnail_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_thumbnail_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoUploadResponse.thumbnail_url"));
        } else
          goto handle_unusual;
        continue;
      // string playback_url = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_playback_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoUploadResponse.playback_url"));
        } else
          goto handle_unusual;
        continue;
      // uint32 processing_time_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.processing_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoUploadResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.common.VideoUploadResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string video_id = 2;
  if (!this->_internal_video_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_video_id().data(), static_cast<int>(this->_internal_video_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoUploadResponse.video_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_video_id(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoUploadResponse.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // string processing_status = 4;
  if (!this->_internal_processing_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_processing_status().data(), static_cast<int>(this->_internal_processing_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoUploadResponse.processing_status");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_processing_status(), target);
  }

  // string thumbnail_url = 5;
  if (!this->_internal_thumbnail_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_thumbnail_url().data(), static_cast<int>(this->_internal_thumbnail_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoUploadResponse.thumbnail_url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_thumbnail_url(), target);
  }

  // string playback_url = 6;
  if (!this->_internal_playback_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playback_url().data(), static_cast<int>(this->_internal_playback_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoUploadResponse.playback_url");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_playback_url(), target);
  }

  // uint32 processing_time_ms = 7;
  if (this->_internal_processing_time_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_processing_time_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.common.VideoUploadResponse)
  return target;
}

size_t VideoUploadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.common.VideoUploadResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string video_id = 2;
  if (!this->_internal_video_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_video_id());
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string processing_status = 4;
  if (!this->_internal_processing_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_processing_status());
  }

  // string thumbnail_url = 5;
  if (!this->_internal_thumbnail_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thumbnail_url());
  }

  // string playback_url = 6;
  if (!this->_internal_playback_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playback_url());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 processing_time_ms = 7;
  if (this->_internal_processing_time_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_processing_time_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoUploadResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VideoUploadResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoUploadResponse::GetClassData() const { return &_class_data_; }


void VideoUploadResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VideoUploadResponse*>(&to_msg);
  auto& from = static_cast<const VideoUploadResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.common.VideoUploadResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_video_id().empty()) {
    _this->_internal_set_video_id(from._internal_video_id());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_processing_status().empty()) {
    _this->_internal_set_processing_status(from._internal_processing_status());
  }
  if (!from._internal_thumbnail_url().empty()) {
    _this->_internal_set_thumbnail_url(from._internal_thumbnail_url());
  }
  if (!from._internal_playback_url().empty()) {
    _this->_internal_set_playback_url(from._internal_playback_url());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_processing_time_ms() != 0) {
    _this->_internal_set_processing_time_ms(from._internal_processing_time_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoUploadResponse::CopyFrom(const VideoUploadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.common.VideoUploadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoUploadResponse::IsInitialized() const {
  return true;
}

void VideoUploadResponse::InternalSwap(VideoUploadResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.video_id_, lhs_arena,
      &other->_impl_.video_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.processing_status_, lhs_arena,
      &other->_impl_.processing_status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnail_url_, lhs_arena,
      &other->_impl_.thumbnail_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.playback_url_, lhs_arena,
      &other->_impl_.playback_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoUploadResponse, _impl_.processing_time_ms_)
      + sizeof(VideoUploadResponse::_impl_.processing_time_ms_)
      - PROTOBUF_FIELD_OFFSET(VideoUploadResponse, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoUploadResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fvideo_5ftypes_2eproto_getter, &descriptor_table_common_2fvideo_5ftypes_2eproto_once,
      file_level_metadata_common_2fvideo_5ftypes_2eproto[8]);
}

// ===================================================================

class VideoProcessingStatus::_Internal {
 public:
};

VideoProcessingStatus::VideoProcessingStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.common.VideoProcessingStatus)
}
VideoProcessingStatus::VideoProcessingStatus(const VideoProcessingStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VideoProcessingStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.completed_steps_){from._impl_.completed_steps_}
    , decltype(_impl_.video_id_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.current_step_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.progress_){}
    , decltype(_impl_.estimated_time_remaining_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.video_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.video_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_video_id().empty()) {
    _this->_impl_.video_id_.Set(from._internal_video_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  _impl_.current_step_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_step_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_current_step().empty()) {
    _this->_impl_.current_step_.Set(from._internal_current_step(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.progress_, &from._impl_.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.estimated_time_remaining_ms_) -
    reinterpret_cast<char*>(&_impl_.progress_)) + sizeof(_impl_.estimated_time_remaining_ms_));
  // @@protoc_insertion_point(copy_constructor:sonet.common.VideoProcessingStatus)
}

inline void VideoProcessingStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.completed_steps_){arena}
    , decltype(_impl_.video_id_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.current_step_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.progress_){0}
    , decltype(_impl_.estimated_time_remaining_ms_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.video_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.video_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.current_step_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_step_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VideoProcessingStatus::~VideoProcessingStatus() {
  // @@protoc_insertion_point(destructor:sonet.common.VideoProcessingStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoProcessingStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.completed_steps_.~RepeatedPtrField();
  _impl_.video_id_.Destroy();
  _impl_.status_.Destroy();
  _impl_.current_step_.Destroy();
  _impl_.error_message_.Destroy();
}

void VideoProcessingStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoProcessingStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.common.VideoProcessingStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.completed_steps_.Clear();
  _impl_.video_id_.ClearToEmpty();
  _impl_.status_.ClearToEmpty();
  _impl_.current_step_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  ::memset(&_impl_.progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.estimated_time_remaining_ms_) -
      reinterpret_cast<char*>(&_impl_.progress_)) + sizeof(_impl_.estimated_time_remaining_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoProcessingStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string video_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_video_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoProcessingStatus.video_id"));
        } else
          goto handle_unusual;
        continue;
      // string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoProcessingStatus.status"));
        } else
          goto handle_unusual;
        continue;
      // double progress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string current_step = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_current_step();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoProcessingStatus.current_step"));
        } else
          goto handle_unusual;
        continue;
      // repeated string completed_steps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_completed_steps();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoProcessingStatus.completed_steps"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string error_message = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoProcessingStatus.error_message"));
        } else
          goto handle_unusual;
        continue;
      // uint32 estimated_time_remaining_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.estimated_time_remaining_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoProcessingStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.common.VideoProcessingStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string video_id = 1;
  if (!this->_internal_video_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_video_id().data(), static_cast<int>(this->_internal_video_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoProcessingStatus.video_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_video_id(), target);
  }

  // string status = 2;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoProcessingStatus.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  // double progress = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_progress = this->_internal_progress();
  uint64_t raw_progress;
  memcpy(&raw_progress, &tmp_progress, sizeof(tmp_progress));
  if (raw_progress != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_progress(), target);
  }

  // string current_step = 4;
  if (!this->_internal_current_step().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_step().data(), static_cast<int>(this->_internal_current_step().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoProcessingStatus.current_step");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_current_step(), target);
  }

  // repeated string completed_steps = 5;
  for (int i = 0, n = this->_internal_completed_steps_size(); i < n; i++) {
    const auto& s = this->_internal_completed_steps(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoProcessingStatus.completed_steps");
    target = stream->WriteString(5, s, target);
  }

  // string error_message = 6;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoProcessingStatus.error_message");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_error_message(), target);
  }

  // uint32 estimated_time_remaining_ms = 7;
  if (this->_internal_estimated_time_remaining_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_estimated_time_remaining_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.common.VideoProcessingStatus)
  return target;
}

size_t VideoProcessingStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.common.VideoProcessingStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string completed_steps = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.completed_steps_.size());
  for (int i = 0, n = _impl_.completed_steps_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.completed_steps_.Get(i));
  }

  // string video_id = 1;
  if (!this->_internal_video_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_video_id());
  }

  // string status = 2;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string current_step = 4;
  if (!this->_internal_current_step().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_step());
  }

  // string error_message = 6;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // double progress = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_progress = this->_internal_progress();
  uint64_t raw_progress;
  memcpy(&raw_progress, &tmp_progress, sizeof(tmp_progress));
  if (raw_progress != 0) {
    total_size += 1 + 8;
  }

  // uint32 estimated_time_remaining_ms = 7;
  if (this->_internal_estimated_time_remaining_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_estimated_time_remaining_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoProcessingStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VideoProcessingStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoProcessingStatus::GetClassData() const { return &_class_data_; }


void VideoProcessingStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VideoProcessingStatus*>(&to_msg);
  auto& from = static_cast<const VideoProcessingStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.common.VideoProcessingStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.completed_steps_.MergeFrom(from._impl_.completed_steps_);
  if (!from._internal_video_id().empty()) {
    _this->_internal_set_video_id(from._internal_video_id());
  }
  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (!from._internal_current_step().empty()) {
    _this->_internal_set_current_step(from._internal_current_step());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_progress = from._internal_progress();
  uint64_t raw_progress;
  memcpy(&raw_progress, &tmp_progress, sizeof(tmp_progress));
  if (raw_progress != 0) {
    _this->_internal_set_progress(from._internal_progress());
  }
  if (from._internal_estimated_time_remaining_ms() != 0) {
    _this->_internal_set_estimated_time_remaining_ms(from._internal_estimated_time_remaining_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoProcessingStatus::CopyFrom(const VideoProcessingStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.common.VideoProcessingStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoProcessingStatus::IsInitialized() const {
  return true;
}

void VideoProcessingStatus::InternalSwap(VideoProcessingStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.completed_steps_.InternalSwap(&other->_impl_.completed_steps_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.video_id_, lhs_arena,
      &other->_impl_.video_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.current_step_, lhs_arena,
      &other->_impl_.current_step_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoProcessingStatus, _impl_.estimated_time_remaining_ms_)
      + sizeof(VideoProcessingStatus::_impl_.estimated_time_remaining_ms_)
      - PROTOBUF_FIELD_OFFSET(VideoProcessingStatus, _impl_.progress_)>(
          reinterpret_cast<char*>(&_impl_.progress_),
          reinterpret_cast<char*>(&other->_impl_.progress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoProcessingStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fvideo_5ftypes_2eproto_getter, &descriptor_table_common_2fvideo_5ftypes_2eproto_once,
      file_level_metadata_common_2fvideo_5ftypes_2eproto[9]);
}

// ===================================================================

class VideoAnalytics::_Internal {
 public:
};

VideoAnalytics::VideoAnalytics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.common.VideoAnalytics)
}
VideoAnalytics::VideoAnalytics(const VideoAnalytics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VideoAnalytics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.geographic_views_){from._impl_.geographic_views_}
    , decltype(_impl_.device_views_){from._impl_.device_views_}
    , decltype(_impl_.time_views_){from._impl_.time_views_}
    , decltype(_impl_.video_id_){}
    , decltype(_impl_.total_views_){}
    , decltype(_impl_.unique_viewers_){}
    , decltype(_impl_.average_watch_time_ms_){}
    , decltype(_impl_.completion_rate_){}
    , decltype(_impl_.skip_rate_){}
    , decltype(_impl_.engagement_rate_){}
    , decltype(_impl_.viral_coefficient_){}
    , decltype(_impl_.retention_score_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.video_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.video_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_video_id().empty()) {
    _this->_impl_.video_id_.Set(from._internal_video_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.total_views_, &from._impl_.total_views_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.retention_score_) -
    reinterpret_cast<char*>(&_impl_.total_views_)) + sizeof(_impl_.retention_score_));
  // @@protoc_insertion_point(copy_constructor:sonet.common.VideoAnalytics)
}

inline void VideoAnalytics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.geographic_views_){arena}
    , decltype(_impl_.device_views_){arena}
    , decltype(_impl_.time_views_){arena}
    , decltype(_impl_.video_id_){}
    , decltype(_impl_.total_views_){0u}
    , decltype(_impl_.unique_viewers_){0u}
    , decltype(_impl_.average_watch_time_ms_){0}
    , decltype(_impl_.completion_rate_){0}
    , decltype(_impl_.skip_rate_){0}
    , decltype(_impl_.engagement_rate_){0}
    , decltype(_impl_.viral_coefficient_){0}
    , decltype(_impl_.retention_score_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.video_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.video_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VideoAnalytics::~VideoAnalytics() {
  // @@protoc_insertion_point(destructor:sonet.common.VideoAnalytics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoAnalytics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.geographic_views_.~RepeatedPtrField();
  _impl_.device_views_.~RepeatedPtrField();
  _impl_.time_views_.~RepeatedPtrField();
  _impl_.video_id_.Destroy();
}

void VideoAnalytics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoAnalytics::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.common.VideoAnalytics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.geographic_views_.Clear();
  _impl_.device_views_.Clear();
  _impl_.time_views_.Clear();
  _impl_.video_id_.ClearToEmpty();
  ::memset(&_impl_.total_views_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.retention_score_) -
      reinterpret_cast<char*>(&_impl_.total_views_)) + sizeof(_impl_.retention_score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoAnalytics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string video_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_video_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoAnalytics.video_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 total_views = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_views_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 unique_viewers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.unique_viewers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double average_watch_time_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.average_watch_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double completion_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.completion_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double skip_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.skip_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double engagement_rate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.engagement_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double viral_coefficient = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.viral_coefficient_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double retention_score = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.retention_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .sonet.common.GeographicView geographic_views = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_geographic_views(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .sonet.common.DeviceView device_views = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_device_views(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .sonet.common.TimeView time_views = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_time_views(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoAnalytics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.common.VideoAnalytics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string video_id = 1;
  if (!this->_internal_video_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_video_id().data(), static_cast<int>(this->_internal_video_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoAnalytics.video_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_video_id(), target);
  }

  // uint32 total_views = 2;
  if (this->_internal_total_views() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_total_views(), target);
  }

  // uint32 unique_viewers = 3;
  if (this->_internal_unique_viewers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_unique_viewers(), target);
  }

  // double average_watch_time_ms = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_average_watch_time_ms = this->_internal_average_watch_time_ms();
  uint64_t raw_average_watch_time_ms;
  memcpy(&raw_average_watch_time_ms, &tmp_average_watch_time_ms, sizeof(tmp_average_watch_time_ms));
  if (raw_average_watch_time_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_average_watch_time_ms(), target);
  }

  // double completion_rate = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_completion_rate = this->_internal_completion_rate();
  uint64_t raw_completion_rate;
  memcpy(&raw_completion_rate, &tmp_completion_rate, sizeof(tmp_completion_rate));
  if (raw_completion_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_completion_rate(), target);
  }

  // double skip_rate = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_skip_rate = this->_internal_skip_rate();
  uint64_t raw_skip_rate;
  memcpy(&raw_skip_rate, &tmp_skip_rate, sizeof(tmp_skip_rate));
  if (raw_skip_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_skip_rate(), target);
  }

  // double engagement_rate = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_engagement_rate = this->_internal_engagement_rate();
  uint64_t raw_engagement_rate;
  memcpy(&raw_engagement_rate, &tmp_engagement_rate, sizeof(tmp_engagement_rate));
  if (raw_engagement_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_engagement_rate(), target);
  }

  // double viral_coefficient = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_viral_coefficient = this->_internal_viral_coefficient();
  uint64_t raw_viral_coefficient;
  memcpy(&raw_viral_coefficient, &tmp_viral_coefficient, sizeof(tmp_viral_coefficient));
  if (raw_viral_coefficient != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_viral_coefficient(), target);
  }

  // double retention_score = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_retention_score = this->_internal_retention_score();
  uint64_t raw_retention_score;
  memcpy(&raw_retention_score, &tmp_retention_score, sizeof(tmp_retention_score));
  if (raw_retention_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_retention_score(), target);
  }

  // repeated .sonet.common.GeographicView geographic_views = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_geographic_views_size()); i < n; i++) {
    const auto& repfield = this->_internal_geographic_views(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sonet.common.DeviceView device_views = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_device_views_size()); i < n; i++) {
    const auto& repfield = this->_internal_device_views(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sonet.common.TimeView time_views = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_time_views_size()); i < n; i++) {
    const auto& repfield = this->_internal_time_views(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.common.VideoAnalytics)
  return target;
}

size_t VideoAnalytics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.common.VideoAnalytics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sonet.common.GeographicView geographic_views = 10;
  total_size += 1UL * this->_internal_geographic_views_size();
  for (const auto& msg : this->_impl_.geographic_views_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .sonet.common.DeviceView device_views = 11;
  total_size += 1UL * this->_internal_device_views_size();
  for (const auto& msg : this->_impl_.device_views_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .sonet.common.TimeView time_views = 12;
  total_size += 1UL * this->_internal_time_views_size();
  for (const auto& msg : this->_impl_.time_views_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string video_id = 1;
  if (!this->_internal_video_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_video_id());
  }

  // uint32 total_views = 2;
  if (this->_internal_total_views() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_total_views());
  }

  // uint32 unique_viewers = 3;
  if (this->_internal_unique_viewers() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_unique_viewers());
  }

  // double average_watch_time_ms = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_average_watch_time_ms = this->_internal_average_watch_time_ms();
  uint64_t raw_average_watch_time_ms;
  memcpy(&raw_average_watch_time_ms, &tmp_average_watch_time_ms, sizeof(tmp_average_watch_time_ms));
  if (raw_average_watch_time_ms != 0) {
    total_size += 1 + 8;
  }

  // double completion_rate = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_completion_rate = this->_internal_completion_rate();
  uint64_t raw_completion_rate;
  memcpy(&raw_completion_rate, &tmp_completion_rate, sizeof(tmp_completion_rate));
  if (raw_completion_rate != 0) {
    total_size += 1 + 8;
  }

  // double skip_rate = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_skip_rate = this->_internal_skip_rate();
  uint64_t raw_skip_rate;
  memcpy(&raw_skip_rate, &tmp_skip_rate, sizeof(tmp_skip_rate));
  if (raw_skip_rate != 0) {
    total_size += 1 + 8;
  }

  // double engagement_rate = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_engagement_rate = this->_internal_engagement_rate();
  uint64_t raw_engagement_rate;
  memcpy(&raw_engagement_rate, &tmp_engagement_rate, sizeof(tmp_engagement_rate));
  if (raw_engagement_rate != 0) {
    total_size += 1 + 8;
  }

  // double viral_coefficient = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_viral_coefficient = this->_internal_viral_coefficient();
  uint64_t raw_viral_coefficient;
  memcpy(&raw_viral_coefficient, &tmp_viral_coefficient, sizeof(tmp_viral_coefficient));
  if (raw_viral_coefficient != 0) {
    total_size += 1 + 8;
  }

  // double retention_score = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_retention_score = this->_internal_retention_score();
  uint64_t raw_retention_score;
  memcpy(&raw_retention_score, &tmp_retention_score, sizeof(tmp_retention_score));
  if (raw_retention_score != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoAnalytics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VideoAnalytics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoAnalytics::GetClassData() const { return &_class_data_; }


void VideoAnalytics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VideoAnalytics*>(&to_msg);
  auto& from = static_cast<const VideoAnalytics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.common.VideoAnalytics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.geographic_views_.MergeFrom(from._impl_.geographic_views_);
  _this->_impl_.device_views_.MergeFrom(from._impl_.device_views_);
  _this->_impl_.time_views_.MergeFrom(from._impl_.time_views_);
  if (!from._internal_video_id().empty()) {
    _this->_internal_set_video_id(from._internal_video_id());
  }
  if (from._internal_total_views() != 0) {
    _this->_internal_set_total_views(from._internal_total_views());
  }
  if (from._internal_unique_viewers() != 0) {
    _this->_internal_set_unique_viewers(from._internal_unique_viewers());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_average_watch_time_ms = from._internal_average_watch_time_ms();
  uint64_t raw_average_watch_time_ms;
  memcpy(&raw_average_watch_time_ms, &tmp_average_watch_time_ms, sizeof(tmp_average_watch_time_ms));
  if (raw_average_watch_time_ms != 0) {
    _this->_internal_set_average_watch_time_ms(from._internal_average_watch_time_ms());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_completion_rate = from._internal_completion_rate();
  uint64_t raw_completion_rate;
  memcpy(&raw_completion_rate, &tmp_completion_rate, sizeof(tmp_completion_rate));
  if (raw_completion_rate != 0) {
    _this->_internal_set_completion_rate(from._internal_completion_rate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_skip_rate = from._internal_skip_rate();
  uint64_t raw_skip_rate;
  memcpy(&raw_skip_rate, &tmp_skip_rate, sizeof(tmp_skip_rate));
  if (raw_skip_rate != 0) {
    _this->_internal_set_skip_rate(from._internal_skip_rate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_engagement_rate = from._internal_engagement_rate();
  uint64_t raw_engagement_rate;
  memcpy(&raw_engagement_rate, &tmp_engagement_rate, sizeof(tmp_engagement_rate));
  if (raw_engagement_rate != 0) {
    _this->_internal_set_engagement_rate(from._internal_engagement_rate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_viral_coefficient = from._internal_viral_coefficient();
  uint64_t raw_viral_coefficient;
  memcpy(&raw_viral_coefficient, &tmp_viral_coefficient, sizeof(tmp_viral_coefficient));
  if (raw_viral_coefficient != 0) {
    _this->_internal_set_viral_coefficient(from._internal_viral_coefficient());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_retention_score = from._internal_retention_score();
  uint64_t raw_retention_score;
  memcpy(&raw_retention_score, &tmp_retention_score, sizeof(tmp_retention_score));
  if (raw_retention_score != 0) {
    _this->_internal_set_retention_score(from._internal_retention_score());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoAnalytics::CopyFrom(const VideoAnalytics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.common.VideoAnalytics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoAnalytics::IsInitialized() const {
  return true;
}

void VideoAnalytics::InternalSwap(VideoAnalytics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.geographic_views_.InternalSwap(&other->_impl_.geographic_views_);
  _impl_.device_views_.InternalSwap(&other->_impl_.device_views_);
  _impl_.time_views_.InternalSwap(&other->_impl_.time_views_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.video_id_, lhs_arena,
      &other->_impl_.video_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoAnalytics, _impl_.retention_score_)
      + sizeof(VideoAnalytics::_impl_.retention_score_)
      - PROTOBUF_FIELD_OFFSET(VideoAnalytics, _impl_.total_views_)>(
          reinterpret_cast<char*>(&_impl_.total_views_),
          reinterpret_cast<char*>(&other->_impl_.total_views_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoAnalytics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fvideo_5ftypes_2eproto_getter, &descriptor_table_common_2fvideo_5ftypes_2eproto_once,
      file_level_metadata_common_2fvideo_5ftypes_2eproto[10]);
}

// ===================================================================

class GeographicView::_Internal {
 public:
};

GeographicView::GeographicView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.common.GeographicView)
}
GeographicView::GeographicView(const GeographicView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GeographicView* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.country_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.city_){}
    , decltype(_impl_.engagement_rate_){}
    , decltype(_impl_.view_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country().empty()) {
    _this->_impl_.country_.Set(from._internal_country(), 
      _this->GetArenaForAllocation());
  }
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_region().empty()) {
    _this->_impl_.region_.Set(from._internal_region(), 
      _this->GetArenaForAllocation());
  }
  _impl_.city_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.city_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_city().empty()) {
    _this->_impl_.city_.Set(from._internal_city(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.engagement_rate_, &from._impl_.engagement_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.view_count_) -
    reinterpret_cast<char*>(&_impl_.engagement_rate_)) + sizeof(_impl_.view_count_));
  // @@protoc_insertion_point(copy_constructor:sonet.common.GeographicView)
}

inline void GeographicView::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.country_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.city_){}
    , decltype(_impl_.engagement_rate_){0}
    , decltype(_impl_.view_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.city_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.city_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GeographicView::~GeographicView() {
  // @@protoc_insertion_point(destructor:sonet.common.GeographicView)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GeographicView::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.country_.Destroy();
  _impl_.region_.Destroy();
  _impl_.city_.Destroy();
}

void GeographicView::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GeographicView::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.common.GeographicView)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.country_.ClearToEmpty();
  _impl_.region_.ClearToEmpty();
  _impl_.city_.ClearToEmpty();
  ::memset(&_impl_.engagement_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.view_count_) -
      reinterpret_cast<char*>(&_impl_.engagement_rate_)) + sizeof(_impl_.view_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeographicView::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string country = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.GeographicView.country"));
        } else
          goto handle_unusual;
        continue;
      // string region = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_region();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.GeographicView.region"));
        } else
          goto handle_unusual;
        continue;
      // string city = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_city();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.GeographicView.city"));
        } else
          goto handle_unusual;
        continue;
      // uint32 view_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.view_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double engagement_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.engagement_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GeographicView::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.common.GeographicView)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string country = 1;
  if (!this->_internal_country().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.GeographicView.country");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_country(), target);
  }

  // string region = 2;
  if (!this->_internal_region().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.GeographicView.region");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_region(), target);
  }

  // string city = 3;
  if (!this->_internal_city().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_city().data(), static_cast<int>(this->_internal_city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.GeographicView.city");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_city(), target);
  }

  // uint32 view_count = 4;
  if (this->_internal_view_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_view_count(), target);
  }

  // double engagement_rate = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_engagement_rate = this->_internal_engagement_rate();
  uint64_t raw_engagement_rate;
  memcpy(&raw_engagement_rate, &tmp_engagement_rate, sizeof(tmp_engagement_rate));
  if (raw_engagement_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_engagement_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.common.GeographicView)
  return target;
}

size_t GeographicView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.common.GeographicView)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string country = 1;
  if (!this->_internal_country().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string region = 2;
  if (!this->_internal_region().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // string city = 3;
  if (!this->_internal_city().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_city());
  }

  // double engagement_rate = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_engagement_rate = this->_internal_engagement_rate();
  uint64_t raw_engagement_rate;
  memcpy(&raw_engagement_rate, &tmp_engagement_rate, sizeof(tmp_engagement_rate));
  if (raw_engagement_rate != 0) {
    total_size += 1 + 8;
  }

  // uint32 view_count = 4;
  if (this->_internal_view_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_view_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GeographicView::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GeographicView::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GeographicView::GetClassData() const { return &_class_data_; }


void GeographicView::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GeographicView*>(&to_msg);
  auto& from = static_cast<const GeographicView&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.common.GeographicView)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_country().empty()) {
    _this->_internal_set_country(from._internal_country());
  }
  if (!from._internal_region().empty()) {
    _this->_internal_set_region(from._internal_region());
  }
  if (!from._internal_city().empty()) {
    _this->_internal_set_city(from._internal_city());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_engagement_rate = from._internal_engagement_rate();
  uint64_t raw_engagement_rate;
  memcpy(&raw_engagement_rate, &tmp_engagement_rate, sizeof(tmp_engagement_rate));
  if (raw_engagement_rate != 0) {
    _this->_internal_set_engagement_rate(from._internal_engagement_rate());
  }
  if (from._internal_view_count() != 0) {
    _this->_internal_set_view_count(from._internal_view_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GeographicView::CopyFrom(const GeographicView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.common.GeographicView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeographicView::IsInitialized() const {
  return true;
}

void GeographicView::InternalSwap(GeographicView* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_, lhs_arena,
      &other->_impl_.country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.region_, lhs_arena,
      &other->_impl_.region_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.city_, lhs_arena,
      &other->_impl_.city_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeographicView, _impl_.view_count_)
      + sizeof(GeographicView::_impl_.view_count_)
      - PROTOBUF_FIELD_OFFSET(GeographicView, _impl_.engagement_rate_)>(
          reinterpret_cast<char*>(&_impl_.engagement_rate_),
          reinterpret_cast<char*>(&other->_impl_.engagement_rate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeographicView::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fvideo_5ftypes_2eproto_getter, &descriptor_table_common_2fvideo_5ftypes_2eproto_once,
      file_level_metadata_common_2fvideo_5ftypes_2eproto[11]);
}

// ===================================================================

class DeviceView::_Internal {
 public:
};

DeviceView::DeviceView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.common.DeviceView)
}
DeviceView::DeviceView(const DeviceView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceView* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_type_){}
    , decltype(_impl_.platform_){}
    , decltype(_impl_.browser_){}
    , decltype(_impl_.engagement_rate_){}
    , decltype(_impl_.view_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.device_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_type().empty()) {
    _this->_impl_.device_type_.Set(from._internal_device_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.platform_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.platform_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_platform().empty()) {
    _this->_impl_.platform_.Set(from._internal_platform(), 
      _this->GetArenaForAllocation());
  }
  _impl_.browser_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.browser_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_browser().empty()) {
    _this->_impl_.browser_.Set(from._internal_browser(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.engagement_rate_, &from._impl_.engagement_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.view_count_) -
    reinterpret_cast<char*>(&_impl_.engagement_rate_)) + sizeof(_impl_.view_count_));
  // @@protoc_insertion_point(copy_constructor:sonet.common.DeviceView)
}

inline void DeviceView::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_type_){}
    , decltype(_impl_.platform_){}
    , decltype(_impl_.browser_){}
    , decltype(_impl_.engagement_rate_){0}
    , decltype(_impl_.view_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.device_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.platform_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.platform_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.browser_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.browser_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceView::~DeviceView() {
  // @@protoc_insertion_point(destructor:sonet.common.DeviceView)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceView::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.device_type_.Destroy();
  _impl_.platform_.Destroy();
  _impl_.browser_.Destroy();
}

void DeviceView::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceView::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.common.DeviceView)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.device_type_.ClearToEmpty();
  _impl_.platform_.ClearToEmpty();
  _impl_.browser_.ClearToEmpty();
  ::memset(&_impl_.engagement_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.view_count_) -
      reinterpret_cast<char*>(&_impl_.engagement_rate_)) + sizeof(_impl_.view_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceView::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string device_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_device_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.DeviceView.device_type"));
        } else
          goto handle_unusual;
        continue;
      // string platform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_platform();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.DeviceView.platform"));
        } else
          goto handle_unusual;
        continue;
      // string browser = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_browser();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.DeviceView.browser"));
        } else
          goto handle_unusual;
        continue;
      // uint32 view_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.view_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double engagement_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.engagement_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceView::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.common.DeviceView)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_type = 1;
  if (!this->_internal_device_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_type().data(), static_cast<int>(this->_internal_device_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.DeviceView.device_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_type(), target);
  }

  // string platform = 2;
  if (!this->_internal_platform().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_platform().data(), static_cast<int>(this->_internal_platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.DeviceView.platform");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_platform(), target);
  }

  // string browser = 3;
  if (!this->_internal_browser().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_browser().data(), static_cast<int>(this->_internal_browser().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.DeviceView.browser");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_browser(), target);
  }

  // uint32 view_count = 4;
  if (this->_internal_view_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_view_count(), target);
  }

  // double engagement_rate = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_engagement_rate = this->_internal_engagement_rate();
  uint64_t raw_engagement_rate;
  memcpy(&raw_engagement_rate, &tmp_engagement_rate, sizeof(tmp_engagement_rate));
  if (raw_engagement_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_engagement_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.common.DeviceView)
  return target;
}

size_t DeviceView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.common.DeviceView)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_type = 1;
  if (!this->_internal_device_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_type());
  }

  // string platform = 2;
  if (!this->_internal_platform().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_platform());
  }

  // string browser = 3;
  if (!this->_internal_browser().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_browser());
  }

  // double engagement_rate = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_engagement_rate = this->_internal_engagement_rate();
  uint64_t raw_engagement_rate;
  memcpy(&raw_engagement_rate, &tmp_engagement_rate, sizeof(tmp_engagement_rate));
  if (raw_engagement_rate != 0) {
    total_size += 1 + 8;
  }

  // uint32 view_count = 4;
  if (this->_internal_view_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_view_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceView::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceView::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceView::GetClassData() const { return &_class_data_; }


void DeviceView::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceView*>(&to_msg);
  auto& from = static_cast<const DeviceView&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.common.DeviceView)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device_type().empty()) {
    _this->_internal_set_device_type(from._internal_device_type());
  }
  if (!from._internal_platform().empty()) {
    _this->_internal_set_platform(from._internal_platform());
  }
  if (!from._internal_browser().empty()) {
    _this->_internal_set_browser(from._internal_browser());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_engagement_rate = from._internal_engagement_rate();
  uint64_t raw_engagement_rate;
  memcpy(&raw_engagement_rate, &tmp_engagement_rate, sizeof(tmp_engagement_rate));
  if (raw_engagement_rate != 0) {
    _this->_internal_set_engagement_rate(from._internal_engagement_rate());
  }
  if (from._internal_view_count() != 0) {
    _this->_internal_set_view_count(from._internal_view_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceView::CopyFrom(const DeviceView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.common.DeviceView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceView::IsInitialized() const {
  return true;
}

void DeviceView::InternalSwap(DeviceView* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_type_, lhs_arena,
      &other->_impl_.device_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.platform_, lhs_arena,
      &other->_impl_.platform_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.browser_, lhs_arena,
      &other->_impl_.browser_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceView, _impl_.view_count_)
      + sizeof(DeviceView::_impl_.view_count_)
      - PROTOBUF_FIELD_OFFSET(DeviceView, _impl_.engagement_rate_)>(
          reinterpret_cast<char*>(&_impl_.engagement_rate_),
          reinterpret_cast<char*>(&other->_impl_.engagement_rate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceView::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fvideo_5ftypes_2eproto_getter, &descriptor_table_common_2fvideo_5ftypes_2eproto_once,
      file_level_metadata_common_2fvideo_5ftypes_2eproto[12]);
}

// ===================================================================

class TimeView::_Internal {
 public:
};

TimeView::TimeView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.common.TimeView)
}
TimeView::TimeView(const TimeView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimeView* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hour_){}
    , decltype(_impl_.day_of_week_){}
    , decltype(_impl_.engagement_rate_){}
    , decltype(_impl_.view_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hour_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hour_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hour().empty()) {
    _this->_impl_.hour_.Set(from._internal_hour(), 
      _this->GetArenaForAllocation());
  }
  _impl_.day_of_week_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.day_of_week_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_day_of_week().empty()) {
    _this->_impl_.day_of_week_.Set(from._internal_day_of_week(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.engagement_rate_, &from._impl_.engagement_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.view_count_) -
    reinterpret_cast<char*>(&_impl_.engagement_rate_)) + sizeof(_impl_.view_count_));
  // @@protoc_insertion_point(copy_constructor:sonet.common.TimeView)
}

inline void TimeView::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hour_){}
    , decltype(_impl_.day_of_week_){}
    , decltype(_impl_.engagement_rate_){0}
    , decltype(_impl_.view_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hour_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hour_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.day_of_week_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.day_of_week_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TimeView::~TimeView() {
  // @@protoc_insertion_point(destructor:sonet.common.TimeView)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimeView::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hour_.Destroy();
  _impl_.day_of_week_.Destroy();
}

void TimeView::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimeView::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.common.TimeView)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hour_.ClearToEmpty();
  _impl_.day_of_week_.ClearToEmpty();
  ::memset(&_impl_.engagement_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.view_count_) -
      reinterpret_cast<char*>(&_impl_.engagement_rate_)) + sizeof(_impl_.view_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeView::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string hour = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hour();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.TimeView.hour"));
        } else
          goto handle_unusual;
        continue;
      // string day_of_week = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_day_of_week();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.TimeView.day_of_week"));
        } else
          goto handle_unusual;
        continue;
      // uint32 view_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.view_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double engagement_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.engagement_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimeView::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.common.TimeView)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string hour = 1;
  if (!this->_internal_hour().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hour().data(), static_cast<int>(this->_internal_hour().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.TimeView.hour");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hour(), target);
  }

  // string day_of_week = 2;
  if (!this->_internal_day_of_week().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_day_of_week().data(), static_cast<int>(this->_internal_day_of_week().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.TimeView.day_of_week");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_day_of_week(), target);
  }

  // uint32 view_count = 3;
  if (this->_internal_view_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_view_count(), target);
  }

  // double engagement_rate = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_engagement_rate = this->_internal_engagement_rate();
  uint64_t raw_engagement_rate;
  memcpy(&raw_engagement_rate, &tmp_engagement_rate, sizeof(tmp_engagement_rate));
  if (raw_engagement_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_engagement_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.common.TimeView)
  return target;
}

size_t TimeView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.common.TimeView)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hour = 1;
  if (!this->_internal_hour().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hour());
  }

  // string day_of_week = 2;
  if (!this->_internal_day_of_week().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_day_of_week());
  }

  // double engagement_rate = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_engagement_rate = this->_internal_engagement_rate();
  uint64_t raw_engagement_rate;
  memcpy(&raw_engagement_rate, &tmp_engagement_rate, sizeof(tmp_engagement_rate));
  if (raw_engagement_rate != 0) {
    total_size += 1 + 8;
  }

  // uint32 view_count = 3;
  if (this->_internal_view_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_view_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeView::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimeView::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeView::GetClassData() const { return &_class_data_; }


void TimeView::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimeView*>(&to_msg);
  auto& from = static_cast<const TimeView&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.common.TimeView)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hour().empty()) {
    _this->_internal_set_hour(from._internal_hour());
  }
  if (!from._internal_day_of_week().empty()) {
    _this->_internal_set_day_of_week(from._internal_day_of_week());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_engagement_rate = from._internal_engagement_rate();
  uint64_t raw_engagement_rate;
  memcpy(&raw_engagement_rate, &tmp_engagement_rate, sizeof(tmp_engagement_rate));
  if (raw_engagement_rate != 0) {
    _this->_internal_set_engagement_rate(from._internal_engagement_rate());
  }
  if (from._internal_view_count() != 0) {
    _this->_internal_set_view_count(from._internal_view_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeView::CopyFrom(const TimeView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.common.TimeView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeView::IsInitialized() const {
  return true;
}

void TimeView::InternalSwap(TimeView* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hour_, lhs_arena,
      &other->_impl_.hour_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.day_of_week_, lhs_arena,
      &other->_impl_.day_of_week_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeView, _impl_.view_count_)
      + sizeof(TimeView::_impl_.view_count_)
      - PROTOBUF_FIELD_OFFSET(TimeView, _impl_.engagement_rate_)>(
          reinterpret_cast<char*>(&_impl_.engagement_rate_),
          reinterpret_cast<char*>(&other->_impl_.engagement_rate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeView::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fvideo_5ftypes_2eproto_getter, &descriptor_table_common_2fvideo_5ftypes_2eproto_once,
      file_level_metadata_common_2fvideo_5ftypes_2eproto[13]);
}

// ===================================================================

class VideoRecommendation::_Internal {
 public:
};

VideoRecommendation::VideoRecommendation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.common.VideoRecommendation)
}
VideoRecommendation::VideoRecommendation(const VideoRecommendation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VideoRecommendation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.factors_){from._impl_.factors_}
    , decltype(_impl_.video_id_){}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.algorithm_){}
    , decltype(_impl_.relevance_score_){}
    , decltype(_impl_.confidence_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.video_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.video_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_video_id().empty()) {
    _this->_impl_.video_id_.Set(from._internal_video_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reason().empty()) {
    _this->_impl_.reason_.Set(from._internal_reason(), 
      _this->GetArenaForAllocation());
  }
  _impl_.algorithm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.algorithm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_algorithm().empty()) {
    _this->_impl_.algorithm_.Set(from._internal_algorithm(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.relevance_score_, &from._impl_.relevance_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.confidence_) -
    reinterpret_cast<char*>(&_impl_.relevance_score_)) + sizeof(_impl_.confidence_));
  // @@protoc_insertion_point(copy_constructor:sonet.common.VideoRecommendation)
}

inline void VideoRecommendation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.factors_){arena}
    , decltype(_impl_.video_id_){}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.algorithm_){}
    , decltype(_impl_.relevance_score_){0}
    , decltype(_impl_.confidence_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.video_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.video_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.algorithm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.algorithm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VideoRecommendation::~VideoRecommendation() {
  // @@protoc_insertion_point(destructor:sonet.common.VideoRecommendation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoRecommendation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.factors_.~RepeatedPtrField();
  _impl_.video_id_.Destroy();
  _impl_.reason_.Destroy();
  _impl_.algorithm_.Destroy();
}

void VideoRecommendation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoRecommendation::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.common.VideoRecommendation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.factors_.Clear();
  _impl_.video_id_.ClearToEmpty();
  _impl_.reason_.ClearToEmpty();
  _impl_.algorithm_.ClearToEmpty();
  ::memset(&_impl_.relevance_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.confidence_) -
      reinterpret_cast<char*>(&_impl_.relevance_score_)) + sizeof(_impl_.confidence_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoRecommendation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string video_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_video_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoRecommendation.video_id"));
        } else
          goto handle_unusual;
        continue;
      // double relevance_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.relevance_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoRecommendation.reason"));
        } else
          goto handle_unusual;
        continue;
      // repeated string factors = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_factors();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoRecommendation.factors"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string algorithm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_algorithm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoRecommendation.algorithm"));
        } else
          goto handle_unusual;
        continue;
      // double confidence = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoRecommendation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.common.VideoRecommendation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string video_id = 1;
  if (!this->_internal_video_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_video_id().data(), static_cast<int>(this->_internal_video_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoRecommendation.video_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_video_id(), target);
  }

  // double relevance_score = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_relevance_score = this->_internal_relevance_score();
  uint64_t raw_relevance_score;
  memcpy(&raw_relevance_score, &tmp_relevance_score, sizeof(tmp_relevance_score));
  if (raw_relevance_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_relevance_score(), target);
  }

  // string reason = 3;
  if (!this->_internal_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoRecommendation.reason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reason(), target);
  }

  // repeated string factors = 4;
  for (int i = 0, n = this->_internal_factors_size(); i < n; i++) {
    const auto& s = this->_internal_factors(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoRecommendation.factors");
    target = stream->WriteString(4, s, target);
  }

  // string algorithm = 5;
  if (!this->_internal_algorithm().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_algorithm().data(), static_cast<int>(this->_internal_algorithm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoRecommendation.algorithm");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_algorithm(), target);
  }

  // double confidence = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_confidence = this->_internal_confidence();
  uint64_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.common.VideoRecommendation)
  return target;
}

size_t VideoRecommendation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.common.VideoRecommendation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string factors = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.factors_.size());
  for (int i = 0, n = _impl_.factors_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.factors_.Get(i));
  }

  // string video_id = 1;
  if (!this->_internal_video_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_video_id());
  }

  // string reason = 3;
  if (!this->_internal_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // string algorithm = 5;
  if (!this->_internal_algorithm().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_algorithm());
  }

  // double relevance_score = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_relevance_score = this->_internal_relevance_score();
  uint64_t raw_relevance_score;
  memcpy(&raw_relevance_score, &tmp_relevance_score, sizeof(tmp_relevance_score));
  if (raw_relevance_score != 0) {
    total_size += 1 + 8;
  }

  // double confidence = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_confidence = this->_internal_confidence();
  uint64_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoRecommendation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VideoRecommendation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoRecommendation::GetClassData() const { return &_class_data_; }


void VideoRecommendation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VideoRecommendation*>(&to_msg);
  auto& from = static_cast<const VideoRecommendation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.common.VideoRecommendation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.factors_.MergeFrom(from._impl_.factors_);
  if (!from._internal_video_id().empty()) {
    _this->_internal_set_video_id(from._internal_video_id());
  }
  if (!from._internal_reason().empty()) {
    _this->_internal_set_reason(from._internal_reason());
  }
  if (!from._internal_algorithm().empty()) {
    _this->_internal_set_algorithm(from._internal_algorithm());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_relevance_score = from._internal_relevance_score();
  uint64_t raw_relevance_score;
  memcpy(&raw_relevance_score, &tmp_relevance_score, sizeof(tmp_relevance_score));
  if (raw_relevance_score != 0) {
    _this->_internal_set_relevance_score(from._internal_relevance_score());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_confidence = from._internal_confidence();
  uint64_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    _this->_internal_set_confidence(from._internal_confidence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoRecommendation::CopyFrom(const VideoRecommendation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.common.VideoRecommendation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoRecommendation::IsInitialized() const {
  return true;
}

void VideoRecommendation::InternalSwap(VideoRecommendation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.factors_.InternalSwap(&other->_impl_.factors_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.video_id_, lhs_arena,
      &other->_impl_.video_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reason_, lhs_arena,
      &other->_impl_.reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.algorithm_, lhs_arena,
      &other->_impl_.algorithm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoRecommendation, _impl_.confidence_)
      + sizeof(VideoRecommendation::_impl_.confidence_)
      - PROTOBUF_FIELD_OFFSET(VideoRecommendation, _impl_.relevance_score_)>(
          reinterpret_cast<char*>(&_impl_.relevance_score_),
          reinterpret_cast<char*>(&other->_impl_.relevance_score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoRecommendation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fvideo_5ftypes_2eproto_getter, &descriptor_table_common_2fvideo_5ftypes_2eproto_once,
      file_level_metadata_common_2fvideo_5ftypes_2eproto[14]);
}

// ===================================================================

VideoBatchRequest_ParametersEntry_DoNotUse::VideoBatchRequest_ParametersEntry_DoNotUse() {}
VideoBatchRequest_ParametersEntry_DoNotUse::VideoBatchRequest_ParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void VideoBatchRequest_ParametersEntry_DoNotUse::MergeFrom(const VideoBatchRequest_ParametersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata VideoBatchRequest_ParametersEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fvideo_5ftypes_2eproto_getter, &descriptor_table_common_2fvideo_5ftypes_2eproto_once,
      file_level_metadata_common_2fvideo_5ftypes_2eproto[15]);
}

// ===================================================================

class VideoBatchRequest::_Internal {
 public:
};

VideoBatchRequest::VideoBatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &VideoBatchRequest::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:sonet.common.VideoBatchRequest)
}
VideoBatchRequest::VideoBatchRequest(const VideoBatchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VideoBatchRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.video_ids_){from._impl_.video_ids_}
    , /*decltype(_impl_.parameters_)*/{}
    , decltype(_impl_.operation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.parameters_.MergeFrom(from._impl_.parameters_);
  _impl_.operation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_operation().empty()) {
    _this->_impl_.operation_.Set(from._internal_operation(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.common.VideoBatchRequest)
}

inline void VideoBatchRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.video_ids_){arena}
    , /*decltype(_impl_.parameters_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.operation_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.operation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VideoBatchRequest::~VideoBatchRequest() {
  // @@protoc_insertion_point(destructor:sonet.common.VideoBatchRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void VideoBatchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.video_ids_.~RepeatedPtrField();
  _impl_.parameters_.Destruct();
  _impl_.parameters_.~MapField();
  _impl_.operation_.Destroy();
}

void VideoBatchRequest::ArenaDtor(void* object) {
  VideoBatchRequest* _this = reinterpret_cast< VideoBatchRequest* >(object);
  _this->_impl_.parameters_.Destruct();
}
void VideoBatchRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoBatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.common.VideoBatchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.video_ids_.Clear();
  _impl_.parameters_.Clear();
  _impl_.operation_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoBatchRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string video_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_video_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoBatchRequest.video_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_operation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoBatchRequest.operation"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.parameters_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoBatchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.common.VideoBatchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string video_ids = 1;
  for (int i = 0, n = this->_internal_video_ids_size(); i < n; i++) {
    const auto& s = this->_internal_video_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoBatchRequest.video_ids");
    target = stream->WriteString(1, s, target);
  }

  // string operation = 2;
  if (!this->_internal_operation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operation().data(), static_cast<int>(this->_internal_operation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoBatchRequest.operation");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_operation(), target);
  }

  // map<string, string> parameters = 3;
  if (!this->_internal_parameters().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = VideoBatchRequest_ParametersEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_parameters();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "sonet.common.VideoBatchRequest.ParametersEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "sonet.common.VideoBatchRequest.ParametersEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.common.VideoBatchRequest)
  return target;
}

size_t VideoBatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.common.VideoBatchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string video_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.video_ids_.size());
  for (int i = 0, n = _impl_.video_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.video_ids_.Get(i));
  }

  // map<string, string> parameters = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_parameters_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_parameters().begin();
      it != this->_internal_parameters().end(); ++it) {
    total_size += VideoBatchRequest_ParametersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string operation = 2;
  if (!this->_internal_operation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoBatchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VideoBatchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoBatchRequest::GetClassData() const { return &_class_data_; }


void VideoBatchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VideoBatchRequest*>(&to_msg);
  auto& from = static_cast<const VideoBatchRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.common.VideoBatchRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.video_ids_.MergeFrom(from._impl_.video_ids_);
  _this->_impl_.parameters_.MergeFrom(from._impl_.parameters_);
  if (!from._internal_operation().empty()) {
    _this->_internal_set_operation(from._internal_operation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoBatchRequest::CopyFrom(const VideoBatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.common.VideoBatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoBatchRequest::IsInitialized() const {
  return true;
}

void VideoBatchRequest::InternalSwap(VideoBatchRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.video_ids_.InternalSwap(&other->_impl_.video_ids_);
  _impl_.parameters_.InternalSwap(&other->_impl_.parameters_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.operation_, lhs_arena,
      &other->_impl_.operation_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoBatchRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fvideo_5ftypes_2eproto_getter, &descriptor_table_common_2fvideo_5ftypes_2eproto_once,
      file_level_metadata_common_2fvideo_5ftypes_2eproto[16]);
}

// ===================================================================

VideoBatchResponse_ResultsEntry_DoNotUse::VideoBatchResponse_ResultsEntry_DoNotUse() {}
VideoBatchResponse_ResultsEntry_DoNotUse::VideoBatchResponse_ResultsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void VideoBatchResponse_ResultsEntry_DoNotUse::MergeFrom(const VideoBatchResponse_ResultsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata VideoBatchResponse_ResultsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fvideo_5ftypes_2eproto_getter, &descriptor_table_common_2fvideo_5ftypes_2eproto_once,
      file_level_metadata_common_2fvideo_5ftypes_2eproto[17]);
}

// ===================================================================

class VideoBatchResponse::_Internal {
 public:
};

VideoBatchResponse::VideoBatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &VideoBatchResponse::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:sonet.common.VideoBatchResponse)
}
VideoBatchResponse::VideoBatchResponse(const VideoBatchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VideoBatchResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.failed_video_ids_){from._impl_.failed_video_ids_}
    , /*decltype(_impl_.results_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.processed_count_){}
    , decltype(_impl_.failed_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.results_.MergeFrom(from._impl_.results_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.failed_count_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.failed_count_));
  // @@protoc_insertion_point(copy_constructor:sonet.common.VideoBatchResponse)
}

inline void VideoBatchResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.failed_video_ids_){arena}
    , /*decltype(_impl_.results_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.message_){}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.processed_count_){0u}
    , decltype(_impl_.failed_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VideoBatchResponse::~VideoBatchResponse() {
  // @@protoc_insertion_point(destructor:sonet.common.VideoBatchResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void VideoBatchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.failed_video_ids_.~RepeatedPtrField();
  _impl_.results_.Destruct();
  _impl_.results_.~MapField();
  _impl_.message_.Destroy();
}

void VideoBatchResponse::ArenaDtor(void* object) {
  VideoBatchResponse* _this = reinterpret_cast< VideoBatchResponse* >(object);
  _this->_impl_.results_.Destruct();
}
void VideoBatchResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoBatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.common.VideoBatchResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.failed_video_ids_.Clear();
  _impl_.results_.Clear();
  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.failed_count_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.failed_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoBatchResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 processed_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.processed_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 failed_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.failed_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string failed_video_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_failed_video_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoBatchResponse.failed_video_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.common.VideoBatchResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> results = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.results_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoBatchResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.common.VideoBatchResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // uint32 processed_count = 2;
  if (this->_internal_processed_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_processed_count(), target);
  }

  // uint32 failed_count = 3;
  if (this->_internal_failed_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_failed_count(), target);
  }

  // repeated string failed_video_ids = 4;
  for (int i = 0, n = this->_internal_failed_video_ids_size(); i < n; i++) {
    const auto& s = this->_internal_failed_video_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoBatchResponse.failed_video_ids");
    target = stream->WriteString(4, s, target);
  }

  // string message = 5;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.common.VideoBatchResponse.message");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_message(), target);
  }

  // map<string, string> results = 6;
  if (!this->_internal_results().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = VideoBatchResponse_ResultsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_results();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "sonet.common.VideoBatchResponse.ResultsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "sonet.common.VideoBatchResponse.ResultsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.common.VideoBatchResponse)
  return target;
}

size_t VideoBatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.common.VideoBatchResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string failed_video_ids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.failed_video_ids_.size());
  for (int i = 0, n = _impl_.failed_video_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.failed_video_ids_.Get(i));
  }

  // map<string, string> results = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_results_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_results().begin();
      it != this->_internal_results().end(); ++it) {
    total_size += VideoBatchResponse_ResultsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string message = 5;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 processed_count = 2;
  if (this->_internal_processed_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_processed_count());
  }

  // uint32 failed_count = 3;
  if (this->_internal_failed_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_failed_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoBatchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VideoBatchResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoBatchResponse::GetClassData() const { return &_class_data_; }


void VideoBatchResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VideoBatchResponse*>(&to_msg);
  auto& from = static_cast<const VideoBatchResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.common.VideoBatchResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.failed_video_ids_.MergeFrom(from._impl_.failed_video_ids_);
  _this->_impl_.results_.MergeFrom(from._impl_.results_);
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_processed_count() != 0) {
    _this->_internal_set_processed_count(from._internal_processed_count());
  }
  if (from._internal_failed_count() != 0) {
    _this->_internal_set_failed_count(from._internal_failed_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoBatchResponse::CopyFrom(const VideoBatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.common.VideoBatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoBatchResponse::IsInitialized() const {
  return true;
}

void VideoBatchResponse::InternalSwap(VideoBatchResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.failed_video_ids_.InternalSwap(&other->_impl_.failed_video_ids_);
  _impl_.results_.InternalSwap(&other->_impl_.results_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoBatchResponse, _impl_.failed_count_)
      + sizeof(VideoBatchResponse::_impl_.failed_count_)
      - PROTOBUF_FIELD_OFFSET(VideoBatchResponse, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoBatchResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fvideo_5ftypes_2eproto_getter, &descriptor_table_common_2fvideo_5ftypes_2eproto_once,
      file_level_metadata_common_2fvideo_5ftypes_2eproto[18]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace sonet
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sonet::common::VideoCandidate*
Arena::CreateMaybeMessage< ::sonet::common::VideoCandidate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::common::VideoCandidate >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::common::VideoMetadata*
Arena::CreateMaybeMessage< ::sonet::common::VideoMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::common::VideoMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::common::VideoFeatures*
Arena::CreateMaybeMessage< ::sonet::common::VideoFeatures >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::common::VideoFeatures >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::common::EngagementMetrics*
Arena::CreateMaybeMessage< ::sonet::common::EngagementMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::common::EngagementMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::common::VideoQueryParams*
Arena::CreateMaybeMessage< ::sonet::common::VideoQueryParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::common::VideoQueryParams >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::common::VideoSearchResult*
Arena::CreateMaybeMessage< ::sonet::common::VideoSearchResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::common::VideoSearchResult >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::common::VideoUploadRequest*
Arena::CreateMaybeMessage< ::sonet::common::VideoUploadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::common::VideoUploadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::common::VideoUploadMetadata*
Arena::CreateMaybeMessage< ::sonet::common::VideoUploadMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::common::VideoUploadMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::common::VideoUploadResponse*
Arena::CreateMaybeMessage< ::sonet::common::VideoUploadResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::common::VideoUploadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::common::VideoProcessingStatus*
Arena::CreateMaybeMessage< ::sonet::common::VideoProcessingStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::common::VideoProcessingStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::common::VideoAnalytics*
Arena::CreateMaybeMessage< ::sonet::common::VideoAnalytics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::common::VideoAnalytics >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::common::GeographicView*
Arena::CreateMaybeMessage< ::sonet::common::GeographicView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::common::GeographicView >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::common::DeviceView*
Arena::CreateMaybeMessage< ::sonet::common::DeviceView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::common::DeviceView >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::common::TimeView*
Arena::CreateMaybeMessage< ::sonet::common::TimeView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::common::TimeView >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::common::VideoRecommendation*
Arena::CreateMaybeMessage< ::sonet::common::VideoRecommendation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::common::VideoRecommendation >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::common::VideoBatchRequest_ParametersEntry_DoNotUse*
Arena::CreateMaybeMessage< ::sonet::common::VideoBatchRequest_ParametersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::common::VideoBatchRequest_ParametersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::common::VideoBatchRequest*
Arena::CreateMaybeMessage< ::sonet::common::VideoBatchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::common::VideoBatchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::common::VideoBatchResponse_ResultsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::sonet::common::VideoBatchResponse_ResultsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::common::VideoBatchResponse_ResultsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::common::VideoBatchResponse*
Arena::CreateMaybeMessage< ::sonet::common::VideoBatchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::common::VideoBatchResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
