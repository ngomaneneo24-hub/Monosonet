// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/list_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ListService_CreateList_FullMethodName       = "/sonet.list.v1.ListService/CreateList"
	ListService_GetList_FullMethodName          = "/sonet.list.v1.ListService/GetList"
	ListService_GetUserLists_FullMethodName     = "/sonet.list.v1.ListService/GetUserLists"
	ListService_UpdateList_FullMethodName       = "/sonet.list.v1.ListService/UpdateList"
	ListService_DeleteList_FullMethodName       = "/sonet.list.v1.ListService/DeleteList"
	ListService_AddListMember_FullMethodName    = "/sonet.list.v1.ListService/AddListMember"
	ListService_RemoveListMember_FullMethodName = "/sonet.list.v1.ListService/RemoveListMember"
	ListService_GetListMembers_FullMethodName   = "/sonet.list.v1.ListService/GetListMembers"
	ListService_IsUserInList_FullMethodName     = "/sonet.list.v1.ListService/IsUserInList"
)

// ListServiceClient is the client API for ListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListServiceClient interface {
	// Create a new list
	CreateList(ctx context.Context, in *CreateListRequest, opts ...grpc.CallOption) (*CreateListResponse, error)
	// Get a list by ID
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	// Get lists owned by a user
	GetUserLists(ctx context.Context, in *GetUserListsRequest, opts ...grpc.CallOption) (*GetUserListsResponse, error)
	// Update a list
	UpdateList(ctx context.Context, in *UpdateListRequest, opts ...grpc.CallOption) (*UpdateListResponse, error)
	// Delete a list
	DeleteList(ctx context.Context, in *DeleteListRequest, opts ...grpc.CallOption) (*DeleteListResponse, error)
	// Add a member to a list
	AddListMember(ctx context.Context, in *AddListMemberRequest, opts ...grpc.CallOption) (*AddListMemberResponse, error)
	// Remove a member from a list
	RemoveListMember(ctx context.Context, in *RemoveListMemberRequest, opts ...grpc.CallOption) (*RemoveListMemberResponse, error)
	// Get list members
	GetListMembers(ctx context.Context, in *GetListMembersRequest, opts ...grpc.CallOption) (*GetListMembersResponse, error)
	// Check if user is in list
	IsUserInList(ctx context.Context, in *IsUserInListRequest, opts ...grpc.CallOption) (*IsUserInListResponse, error)
}

type listServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewListServiceClient(cc grpc.ClientConnInterface) ListServiceClient {
	return &listServiceClient{cc}
}

func (c *listServiceClient) CreateList(ctx context.Context, in *CreateListRequest, opts ...grpc.CallOption) (*CreateListResponse, error) {
	out := new(CreateListResponse)
	err := c.cc.Invoke(ctx, ListService_CreateList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, ListService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) GetUserLists(ctx context.Context, in *GetUserListsRequest, opts ...grpc.CallOption) (*GetUserListsResponse, error) {
	out := new(GetUserListsResponse)
	err := c.cc.Invoke(ctx, ListService_GetUserLists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) UpdateList(ctx context.Context, in *UpdateListRequest, opts ...grpc.CallOption) (*UpdateListResponse, error) {
	out := new(UpdateListResponse)
	err := c.cc.Invoke(ctx, ListService_UpdateList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) DeleteList(ctx context.Context, in *DeleteListRequest, opts ...grpc.CallOption) (*DeleteListResponse, error) {
	out := new(DeleteListResponse)
	err := c.cc.Invoke(ctx, ListService_DeleteList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) AddListMember(ctx context.Context, in *AddListMemberRequest, opts ...grpc.CallOption) (*AddListMemberResponse, error) {
	out := new(AddListMemberResponse)
	err := c.cc.Invoke(ctx, ListService_AddListMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) RemoveListMember(ctx context.Context, in *RemoveListMemberRequest, opts ...grpc.CallOption) (*RemoveListMemberResponse, error) {
	out := new(RemoveListMemberResponse)
	err := c.cc.Invoke(ctx, ListService_RemoveListMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) GetListMembers(ctx context.Context, in *GetListMembersRequest, opts ...grpc.CallOption) (*GetListMembersResponse, error) {
	out := new(GetListMembersResponse)
	err := c.cc.Invoke(ctx, ListService_GetListMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) IsUserInList(ctx context.Context, in *IsUserInListRequest, opts ...grpc.CallOption) (*IsUserInListResponse, error) {
	out := new(IsUserInListResponse)
	err := c.cc.Invoke(ctx, ListService_IsUserInList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListServiceServer is the server API for ListService service.
// All implementations must embed UnimplementedListServiceServer
// for forward compatibility
type ListServiceServer interface {
	// Create a new list
	CreateList(context.Context, *CreateListRequest) (*CreateListResponse, error)
	// Get a list by ID
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
	// Get lists owned by a user
	GetUserLists(context.Context, *GetUserListsRequest) (*GetUserListsResponse, error)
	// Update a list
	UpdateList(context.Context, *UpdateListRequest) (*UpdateListResponse, error)
	// Delete a list
	DeleteList(context.Context, *DeleteListRequest) (*DeleteListResponse, error)
	// Add a member to a list
	AddListMember(context.Context, *AddListMemberRequest) (*AddListMemberResponse, error)
	// Remove a member from a list
	RemoveListMember(context.Context, *RemoveListMemberRequest) (*RemoveListMemberResponse, error)
	// Get list members
	GetListMembers(context.Context, *GetListMembersRequest) (*GetListMembersResponse, error)
	// Check if user is in list
	IsUserInList(context.Context, *IsUserInListRequest) (*IsUserInListResponse, error)
	mustEmbedUnimplementedListServiceServer()
}

// UnimplementedListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedListServiceServer struct {
}

func (UnimplementedListServiceServer) CreateList(context.Context, *CreateListRequest) (*CreateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateList not implemented")
}
func (UnimplementedListServiceServer) GetList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedListServiceServer) GetUserLists(context.Context, *GetUserListsRequest) (*GetUserListsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLists not implemented")
}
func (UnimplementedListServiceServer) UpdateList(context.Context, *UpdateListRequest) (*UpdateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateList not implemented")
}
func (UnimplementedListServiceServer) DeleteList(context.Context, *DeleteListRequest) (*DeleteListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteList not implemented")
}
func (UnimplementedListServiceServer) AddListMember(context.Context, *AddListMemberRequest) (*AddListMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddListMember not implemented")
}
func (UnimplementedListServiceServer) RemoveListMember(context.Context, *RemoveListMemberRequest) (*RemoveListMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveListMember not implemented")
}
func (UnimplementedListServiceServer) GetListMembers(context.Context, *GetListMembersRequest) (*GetListMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListMembers not implemented")
}
func (UnimplementedListServiceServer) IsUserInList(context.Context, *IsUserInListRequest) (*IsUserInListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUserInList not implemented")
}
func (UnimplementedListServiceServer) mustEmbedUnimplementedListServiceServer() {}

// UnsafeListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListServiceServer will
// result in compilation errors.
type UnsafeListServiceServer interface {
	mustEmbedUnimplementedListServiceServer()
}

func RegisterListServiceServer(s grpc.ServiceRegistrar, srv ListServiceServer) {
	s.RegisterService(&ListService_ServiceDesc, srv)
}

func _ListService_CreateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).CreateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_CreateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).CreateList(ctx, req.(*CreateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_GetUserLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserListsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).GetUserLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_GetUserLists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).GetUserLists(ctx, req.(*GetUserListsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_UpdateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).UpdateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_UpdateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).UpdateList(ctx, req.(*UpdateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_DeleteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).DeleteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_DeleteList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).DeleteList(ctx, req.(*DeleteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_AddListMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddListMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).AddListMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_AddListMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).AddListMember(ctx, req.(*AddListMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_RemoveListMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveListMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).RemoveListMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_RemoveListMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).RemoveListMember(ctx, req.(*RemoveListMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_GetListMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).GetListMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_GetListMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).GetListMembers(ctx, req.(*GetListMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_IsUserInList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsUserInListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).IsUserInList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_IsUserInList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).IsUserInList(ctx, req.(*IsUserInListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ListService_ServiceDesc is the grpc.ServiceDesc for ListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sonet.list.v1.ListService",
	HandlerType: (*ListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateList",
			Handler:    _ListService_CreateList_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _ListService_GetList_Handler,
		},
		{
			MethodName: "GetUserLists",
			Handler:    _ListService_GetUserLists_Handler,
		},
		{
			MethodName: "UpdateList",
			Handler:    _ListService_UpdateList_Handler,
		},
		{
			MethodName: "DeleteList",
			Handler:    _ListService_DeleteList_Handler,
		},
		{
			MethodName: "AddListMember",
			Handler:    _ListService_AddListMember_Handler,
		},
		{
			MethodName: "RemoveListMember",
			Handler:    _ListService_RemoveListMember_Handler,
		},
		{
			MethodName: "GetListMembers",
			Handler:    _ListService_GetListMembers_Handler,
		},
		{
			MethodName: "IsUserInList",
			Handler:    _ListService_IsUserInList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/list_service.proto",
}
