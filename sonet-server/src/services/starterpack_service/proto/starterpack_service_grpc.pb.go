// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/starterpack_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StarterpackService_CreateStarterpack_FullMethodName        = "/sonet.starterpack.v1.StarterpackService/CreateStarterpack"
	StarterpackService_GetStarterpack_FullMethodName           = "/sonet.starterpack.v1.StarterpackService/GetStarterpack"
	StarterpackService_GetUserStarterpacks_FullMethodName      = "/sonet.starterpack.v1.StarterpackService/GetUserStarterpacks"
	StarterpackService_UpdateStarterpack_FullMethodName        = "/sonet.starterpack.v1.StarterpackService/UpdateStarterpack"
	StarterpackService_DeleteStarterpack_FullMethodName        = "/sonet.starterpack.v1.StarterpackService/DeleteStarterpack"
	StarterpackService_AddStarterpackItem_FullMethodName       = "/sonet.starterpack.v1.StarterpackService/AddStarterpackItem"
	StarterpackService_RemoveStarterpackItem_FullMethodName    = "/sonet.starterpack.v1.StarterpackService/RemoveStarterpackItem"
	StarterpackService_GetStarterpackItems_FullMethodName      = "/sonet.starterpack.v1.StarterpackService/GetStarterpackItems"
	StarterpackService_GetSuggestedStarterpacks_FullMethodName = "/sonet.starterpack.v1.StarterpackService/GetSuggestedStarterpacks"
)

// StarterpackServiceClient is the client API for StarterpackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StarterpackServiceClient interface {
	// Create a new starterpack
	CreateStarterpack(ctx context.Context, in *CreateStarterpackRequest, opts ...grpc.CallOption) (*CreateStarterpackResponse, error)
	// Get a starterpack by ID
	GetStarterpack(ctx context.Context, in *GetStarterpackRequest, opts ...grpc.CallOption) (*GetStarterpackResponse, error)
	// Get starterpacks created by a user
	GetUserStarterpacks(ctx context.Context, in *GetUserStarterpacksRequest, opts ...grpc.CallOption) (*GetUserStarterpacksResponse, error)
	// Update a starterpack
	UpdateStarterpack(ctx context.Context, in *UpdateStarterpackRequest, opts ...grpc.CallOption) (*UpdateStarterpackResponse, error)
	// Delete a starterpack
	DeleteStarterpack(ctx context.Context, in *DeleteStarterpackRequest, opts ...grpc.CallOption) (*DeleteStarterpackResponse, error)
	// Add an item to a starterpack
	AddStarterpackItem(ctx context.Context, in *AddStarterpackItemRequest, opts ...grpc.CallOption) (*AddStarterpackItemResponse, error)
	// Remove an item from a starterpack
	RemoveStarterpackItem(ctx context.Context, in *RemoveStarterpackItemRequest, opts ...grpc.CallOption) (*RemoveStarterpackItemResponse, error)
	// Get starterpack items
	GetStarterpackItems(ctx context.Context, in *GetStarterpackItemsRequest, opts ...grpc.CallOption) (*GetStarterpackItemsResponse, error)
	// Get suggested starterpacks for a user
	GetSuggestedStarterpacks(ctx context.Context, in *GetSuggestedStarterpacksRequest, opts ...grpc.CallOption) (*GetSuggestedStarterpacksResponse, error)
}

type starterpackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStarterpackServiceClient(cc grpc.ClientConnInterface) StarterpackServiceClient {
	return &starterpackServiceClient{cc}
}

func (c *starterpackServiceClient) CreateStarterpack(ctx context.Context, in *CreateStarterpackRequest, opts ...grpc.CallOption) (*CreateStarterpackResponse, error) {
	out := new(CreateStarterpackResponse)
	err := c.cc.Invoke(ctx, StarterpackService_CreateStarterpack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starterpackServiceClient) GetStarterpack(ctx context.Context, in *GetStarterpackRequest, opts ...grpc.CallOption) (*GetStarterpackResponse, error) {
	out := new(GetStarterpackResponse)
	err := c.cc.Invoke(ctx, StarterpackService_GetStarterpack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starterpackServiceClient) GetUserStarterpacks(ctx context.Context, in *GetUserStarterpacksRequest, opts ...grpc.CallOption) (*GetUserStarterpacksResponse, error) {
	out := new(GetUserStarterpacksResponse)
	err := c.cc.Invoke(ctx, StarterpackService_GetUserStarterpacks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starterpackServiceClient) UpdateStarterpack(ctx context.Context, in *UpdateStarterpackRequest, opts ...grpc.CallOption) (*UpdateStarterpackResponse, error) {
	out := new(UpdateStarterpackResponse)
	err := c.cc.Invoke(ctx, StarterpackService_UpdateStarterpack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starterpackServiceClient) DeleteStarterpack(ctx context.Context, in *DeleteStarterpackRequest, opts ...grpc.CallOption) (*DeleteStarterpackResponse, error) {
	out := new(DeleteStarterpackResponse)
	err := c.cc.Invoke(ctx, StarterpackService_DeleteStarterpack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starterpackServiceClient) AddStarterpackItem(ctx context.Context, in *AddStarterpackItemRequest, opts ...grpc.CallOption) (*AddStarterpackItemResponse, error) {
	out := new(AddStarterpackItemResponse)
	err := c.cc.Invoke(ctx, StarterpackService_AddStarterpackItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starterpackServiceClient) RemoveStarterpackItem(ctx context.Context, in *RemoveStarterpackItemRequest, opts ...grpc.CallOption) (*RemoveStarterpackItemResponse, error) {
	out := new(RemoveStarterpackItemResponse)
	err := c.cc.Invoke(ctx, StarterpackService_RemoveStarterpackItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starterpackServiceClient) GetStarterpackItems(ctx context.Context, in *GetStarterpackItemsRequest, opts ...grpc.CallOption) (*GetStarterpackItemsResponse, error) {
	out := new(GetStarterpackItemsResponse)
	err := c.cc.Invoke(ctx, StarterpackService_GetStarterpackItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starterpackServiceClient) GetSuggestedStarterpacks(ctx context.Context, in *GetSuggestedStarterpacksRequest, opts ...grpc.CallOption) (*GetSuggestedStarterpacksResponse, error) {
	out := new(GetSuggestedStarterpacksResponse)
	err := c.cc.Invoke(ctx, StarterpackService_GetSuggestedStarterpacks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StarterpackServiceServer is the server API for StarterpackService service.
// All implementations must embed UnimplementedStarterpackServiceServer
// for forward compatibility
type StarterpackServiceServer interface {
	// Create a new starterpack
	CreateStarterpack(context.Context, *CreateStarterpackRequest) (*CreateStarterpackResponse, error)
	// Get a starterpack by ID
	GetStarterpack(context.Context, *GetStarterpackRequest) (*GetStarterpackResponse, error)
	// Get starterpacks created by a user
	GetUserStarterpacks(context.Context, *GetUserStarterpacksRequest) (*GetUserStarterpacksResponse, error)
	// Update a starterpack
	UpdateStarterpack(context.Context, *UpdateStarterpackRequest) (*UpdateStarterpackResponse, error)
	// Delete a starterpack
	DeleteStarterpack(context.Context, *DeleteStarterpackRequest) (*DeleteStarterpackResponse, error)
	// Add an item to a starterpack
	AddStarterpackItem(context.Context, *AddStarterpackItemRequest) (*AddStarterpackItemResponse, error)
	// Remove an item from a starterpack
	RemoveStarterpackItem(context.Context, *RemoveStarterpackItemRequest) (*RemoveStarterpackItemResponse, error)
	// Get starterpack items
	GetStarterpackItems(context.Context, *GetStarterpackItemsRequest) (*GetStarterpackItemsResponse, error)
	// Get suggested starterpacks for a user
	GetSuggestedStarterpacks(context.Context, *GetSuggestedStarterpacksRequest) (*GetSuggestedStarterpacksResponse, error)
	mustEmbedUnimplementedStarterpackServiceServer()
}

// UnimplementedStarterpackServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStarterpackServiceServer struct {
}

func (UnimplementedStarterpackServiceServer) CreateStarterpack(context.Context, *CreateStarterpackRequest) (*CreateStarterpackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStarterpack not implemented")
}
func (UnimplementedStarterpackServiceServer) GetStarterpack(context.Context, *GetStarterpackRequest) (*GetStarterpackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStarterpack not implemented")
}
func (UnimplementedStarterpackServiceServer) GetUserStarterpacks(context.Context, *GetUserStarterpacksRequest) (*GetUserStarterpacksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStarterpacks not implemented")
}
func (UnimplementedStarterpackServiceServer) UpdateStarterpack(context.Context, *UpdateStarterpackRequest) (*UpdateStarterpackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStarterpack not implemented")
}
func (UnimplementedStarterpackServiceServer) DeleteStarterpack(context.Context, *DeleteStarterpackRequest) (*DeleteStarterpackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStarterpack not implemented")
}
func (UnimplementedStarterpackServiceServer) AddStarterpackItem(context.Context, *AddStarterpackItemRequest) (*AddStarterpackItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStarterpackItem not implemented")
}
func (UnimplementedStarterpackServiceServer) RemoveStarterpackItem(context.Context, *RemoveStarterpackItemRequest) (*RemoveStarterpackItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStarterpackItem not implemented")
}
func (UnimplementedStarterpackServiceServer) GetStarterpackItems(context.Context, *GetStarterpackItemsRequest) (*GetStarterpackItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStarterpackItems not implemented")
}
func (UnimplementedStarterpackServiceServer) GetSuggestedStarterpacks(context.Context, *GetSuggestedStarterpacksRequest) (*GetSuggestedStarterpacksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuggestedStarterpacks not implemented")
}
func (UnimplementedStarterpackServiceServer) mustEmbedUnimplementedStarterpackServiceServer() {}

// UnsafeStarterpackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StarterpackServiceServer will
// result in compilation errors.
type UnsafeStarterpackServiceServer interface {
	mustEmbedUnimplementedStarterpackServiceServer()
}

func RegisterStarterpackServiceServer(s grpc.ServiceRegistrar, srv StarterpackServiceServer) {
	s.RegisterService(&StarterpackService_ServiceDesc, srv)
}

func _StarterpackService_CreateStarterpack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStarterpackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarterpackServiceServer).CreateStarterpack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StarterpackService_CreateStarterpack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarterpackServiceServer).CreateStarterpack(ctx, req.(*CreateStarterpackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarterpackService_GetStarterpack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStarterpackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarterpackServiceServer).GetStarterpack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StarterpackService_GetStarterpack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarterpackServiceServer).GetStarterpack(ctx, req.(*GetStarterpackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarterpackService_GetUserStarterpacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStarterpacksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarterpackServiceServer).GetUserStarterpacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StarterpackService_GetUserStarterpacks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarterpackServiceServer).GetUserStarterpacks(ctx, req.(*GetUserStarterpacksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarterpackService_UpdateStarterpack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStarterpackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarterpackServiceServer).UpdateStarterpack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StarterpackService_UpdateStarterpack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarterpackServiceServer).UpdateStarterpack(ctx, req.(*UpdateStarterpackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarterpackService_DeleteStarterpack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStarterpackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarterpackServiceServer).DeleteStarterpack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StarterpackService_DeleteStarterpack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarterpackServiceServer).DeleteStarterpack(ctx, req.(*DeleteStarterpackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarterpackService_AddStarterpackItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStarterpackItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarterpackServiceServer).AddStarterpackItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StarterpackService_AddStarterpackItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarterpackServiceServer).AddStarterpackItem(ctx, req.(*AddStarterpackItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarterpackService_RemoveStarterpackItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStarterpackItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarterpackServiceServer).RemoveStarterpackItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StarterpackService_RemoveStarterpackItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarterpackServiceServer).RemoveStarterpackItem(ctx, req.(*RemoveStarterpackItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarterpackService_GetStarterpackItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStarterpackItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarterpackServiceServer).GetStarterpackItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StarterpackService_GetStarterpackItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarterpackServiceServer).GetStarterpackItems(ctx, req.(*GetStarterpackItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarterpackService_GetSuggestedStarterpacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSuggestedStarterpacksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarterpackServiceServer).GetSuggestedStarterpacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StarterpackService_GetSuggestedStarterpacks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarterpackServiceServer).GetSuggestedStarterpacks(ctx, req.(*GetSuggestedStarterpacksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StarterpackService_ServiceDesc is the grpc.ServiceDesc for StarterpackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StarterpackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sonet.starterpack.v1.StarterpackService",
	HandlerType: (*StarterpackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStarterpack",
			Handler:    _StarterpackService_CreateStarterpack_Handler,
		},
		{
			MethodName: "GetStarterpack",
			Handler:    _StarterpackService_GetStarterpack_Handler,
		},
		{
			MethodName: "GetUserStarterpacks",
			Handler:    _StarterpackService_GetUserStarterpacks_Handler,
		},
		{
			MethodName: "UpdateStarterpack",
			Handler:    _StarterpackService_UpdateStarterpack_Handler,
		},
		{
			MethodName: "DeleteStarterpack",
			Handler:    _StarterpackService_DeleteStarterpack_Handler,
		},
		{
			MethodName: "AddStarterpackItem",
			Handler:    _StarterpackService_AddStarterpackItem_Handler,
		},
		{
			MethodName: "RemoveStarterpackItem",
			Handler:    _StarterpackService_RemoveStarterpackItem_Handler,
		},
		{
			MethodName: "GetStarterpackItems",
			Handler:    _StarterpackService_GetStarterpackItems_Handler,
		},
		{
			MethodName: "GetSuggestedStarterpacks",
			Handler:    _StarterpackService_GetSuggestedStarterpacks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/starterpack_service.proto",
}
