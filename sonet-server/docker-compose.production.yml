version: '3.8'

services:
  # postgresql Database with production hardening
  postgres:
    image: postgres:15-alpine
    container_name: sonet_postgres_prod
    restart: unless-stopped
    environment:
      postgres_db: sonet_production
      postgres_user: sonet_app
      postgres_password: ${postgres_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - sonet_internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sonet_app -d sonet_production"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: sonet_redis_prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - sonet_internal
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Moderation Service (C++/gRPC)
  moderation_service:
    build:
      context: ./src/services/moderation_service
      dockerfile: Dockerfile.production
    container_name: sonet_moderation_service_prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://sonet_app:${postgres_password}@postgres:5432/sonet_production
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - GRPC_PORT=50051
      - LOG_LEVEL=info
      - FOUNDER_USERNAME=neoqiss
      - FOUNDER_EMAIL=neo@sonet.com
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    ports:
      - "127.0.0.1:50051:50051"
    networks:
      - sonet_internal
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=localhost:50051"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp

  # API Gateway (Go)
  api_gateway:
    build:
      context: ./src/gateway
      dockerfile: Dockerfile.production
    container_name: sonet_api_gateway_prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=8080
      - MODERATION_SERVICE_URL=moderation_service:50051
      - DATABASE_URL=postgresql://sonet_app:${postgres_password}@postgres:5432/sonet_production
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRY=24h
      - RATE_LIMIT_WINDOW=15m
      - RATE_LIMIT_MAX_REQUESTS=1000
      - CORS_ORIGIN=${CORS_ORIGIN}
      - LOG_LEVEL=info
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
      - ./certs:/app/certs
    ports:
      - "127.0.0.1:8080:8080"
      - "127.0.0.1:8443:8443"
    networks:
      - sonet_internal
      - sonet_external
    depends_on:
      moderation_service:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Nginx Reverse Proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: sonet_nginx_prod
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certs:/etc/nginx/certs:ro
      - ./logs/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - sonet_external
    depends_on:
      - api_gateway
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: sonet_prometheus_prod
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - sonet_internal
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: sonet_grafana_prod
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://${DOMAIN}/grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "127.0.0.1:3000:3000"
    networks:
      - sonet_internal
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch for log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: sonet_elasticsearch_prod
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - cluster.name=sonet-logs
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "127.0.0.1:9200:9200"
    networks:
      - sonet_internal
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: sonet_kibana_prod
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    volumes:
      - ./monitoring/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    ports:
      - "127.0.0.1:5601:5601"
    networks:
      - sonet_internal
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Filebeat for log shipping
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: sonet_filebeat_prod
    restart: unless-stopped
    user: root
    volumes:
      - ./monitoring/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs:/var/log/sonet:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - sonet_internal
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Cron job for database maintenance
  db_maintenance:
    image: postgres:15-alpine
    container_name: sonet_db_maintenance_prod
    restart: "no"
    environment:
      postgres_db: sonet_production
      postgres_user: sonet_app
      postgres_password: ${postgres_password}
      PGHOST: postgres
      PGPORT: 5432
    volumes:
      - ./database/maintenance:/scripts:ro
      - ./database/backups:/backups
    networks:
      - sonet_internal
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Running database maintenance...' &&
        psql -h postgres -U sonet_app -d sonet_production -f /scripts/maintenance.sql &&
        echo 'Maintenance completed successfully'
      "
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/sonet/data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/sonet/data/redis
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/sonet/data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/sonet/data/grafana
  elasticsearch_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/sonet/data/elasticsearch

networks:
  sonet_internal:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.20.0.0/16
  sonet_external:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16